/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t,e,n,r,i,s={258:(t,e,n)=>{n.d(e,{Jn:()=>v,qX:()=>p,Xd:()=>m,Mq:()=>A,ZF:()=>w,KN:()=>b});var r=n(552),i=n(934),s=n(444);class o{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const a="@firebase/app",c="0.7.5",u=new i.Yd("@firebase/app"),l={[a]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},h=new Map,d=new Map;function f(t,e){try{t.container.addComponent(e)}catch(n){u.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,n)}}function m(t){const e=t.name;if(d.has(e))return u.debug(`There were multiple attempts to register component ${e}.`),!1;d.set(e,t);for(const e of h.values())f(e,t);return!0}function p(t,e){return t.container.getProvider(e)}const g=new s.LL("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function."});class y{constructor(t,e,n){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new r.wA("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw g.create("app-deleted",{appName:this._name})}}const v="9.2.0";function w(t,e={}){"object"!=typeof e&&(e={name:e});const n=Object.assign({name:"[DEFAULT]",automaticDataCollectionEnabled:!1},e),i=n.name;if("string"!=typeof i||!i)throw g.create("bad-app-name",{appName:String(i)});const o=h.get(i);if(o){if((0,s.vZ)(t,o.options)&&(0,s.vZ)(n,o.config))return o;throw g.create("duplicate-app",{appName:i})}const a=new r.H0(i);for(const t of d.values())a.addComponent(t);const c=new y(t,n,a);return h.set(i,c),c}function A(t="[DEFAULT]"){const e=h.get(t);if(!e)throw g.create("no-app",{appName:t});return e}function b(t,e,n){var i;let s=null!==(i=l[t])&&void 0!==i?i:t;n&&(s+=`-${n}`);const o=s.match(/\s|\//),a=e.match(/\s|\//);if(o||a){const t=[`Unable to register library "${s}" with version "${e}":`];return o&&t.push(`library name "${s}" contains illegal characters (whitespace or "/")`),o&&a&&t.push("and"),a&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void u.warn(t.join(" "))}m(new r.wA(`${s}-version`,(()=>({library:s,version:e})),"VERSION"))}m(new r.wA("platform-logger",(t=>new o(t)),"PRIVATE")),b(a,c,""),b(a,c,"esm2017"),b("fire-js","")},552:(t,e,n)=>{function r(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,s=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=s.next()).done;)o.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=s.return)&&n.call(s)}finally{if(i)throw i.error}}return o}function s(t,e,n){if(n||2===arguments.length)for(var r,i=0,s=e.length;i<s;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))}n.d(e,{wA:()=>a,H0:()=>l}),Object.create,Object.create;var o=n(444),a=function(){function t(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}return t.prototype.setInstantiationMode=function(t){return this.instantiationMode=t,this},t.prototype.setMultipleInstances=function(t){return this.multipleInstances=t,this},t.prototype.setServiceProps=function(t){return this.serviceProps=t,this},t.prototype.setInstanceCreatedCallback=function(t){return this.onInstanceCreated=t,this},t}(),c="[DEFAULT]",u=function(){function t(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}return t.prototype.get=function(t){var e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){var n=new o.BH;if(this.instancesDeferred.set(e,n),this.isInitialized(e)||this.shouldAutoInitialize())try{var r=this.getOrInitializeService({instanceIdentifier:e});r&&n.resolve(r)}catch(t){}}return this.instancesDeferred.get(e).promise},t.prototype.getImmediate=function(t){var e,n=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),r=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(r)return null;throw Error("Service "+this.name+" is not available")}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(t){if(r)return null;throw t}},t.prototype.getComponent=function(){return this.component},t.prototype.setComponent=function(t){var e,n;if(t.name!==this.name)throw Error("Mismatching Component "+t.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:c})}catch(t){}try{for(var s=r(this.instancesDeferred.entries()),o=s.next();!o.done;o=s.next()){var a=i(o.value,2),u=a[0],l=a[1],h=this.normalizeInstanceIdentifier(u);try{var d=this.getOrInitializeService({instanceIdentifier:h});l.resolve(d)}catch(t){}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}}},t.prototype.clearInstance=function(t){void 0===t&&(t=c),this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)},t.prototype.delete=function(){return t=this,e=void 0,r=function(){var t;return function(t,e){var n,r,i,s,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=e.call(t,o)}catch(t){s=[6,t],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}(this,(function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all(s(s([],i(t.filter((function(t){return"INTERNAL"in t})).map((function(t){return t.INTERNAL.delete()})))),i(t.filter((function(t){return"_delete"in t})).map((function(t){return t._delete()})))))];case 1:return e.sent(),[2]}}))},new((n=void 0)||(n=Promise))((function(i,s){function o(t){try{c(r.next(t))}catch(t){s(t)}}function a(t){try{c(r.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}c((r=r.apply(t,e||[])).next())}));var t,e,n,r},t.prototype.isComponentSet=function(){return null!=this.component},t.prototype.isInitialized=function(t){return void 0===t&&(t=c),this.instances.has(t)},t.prototype.getOptions=function(t){return void 0===t&&(t=c),this.instancesOptions.get(t)||{}},t.prototype.initialize=function(t){var e,n;void 0===t&&(t={});var s=t.options,o=void 0===s?{}:s,a=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(a))throw Error(this.name+"("+a+") has already been initialized");if(!this.isComponentSet())throw Error("Component "+this.name+" has not been registered yet");var c=this.getOrInitializeService({instanceIdentifier:a,options:o});try{for(var u=r(this.instancesDeferred.entries()),l=u.next();!l.done;l=u.next()){var h=i(l.value,2),d=h[0],f=h[1];a===this.normalizeInstanceIdentifier(d)&&f.resolve(c)}}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=u.return)&&n.call(u)}finally{if(e)throw e.error}}return c},t.prototype.onInit=function(t,e){var n,r=this.normalizeInstanceIdentifier(e),i=null!==(n=this.onInitCallbacks.get(r))&&void 0!==n?n:new Set;i.add(t),this.onInitCallbacks.set(r,i);var s=this.instances.get(r);return s&&t(s,r),function(){i.delete(t)}},t.prototype.invokeOnInitCallbacks=function(t,e){var n,i,s=this.onInitCallbacks.get(e);if(s)try{for(var o=r(s),a=o.next();!a.done;a=o.next()){var c=a.value;try{c(t,e)}catch(t){}}}catch(t){n={error:t}}finally{try{a&&!a.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}},t.prototype.getOrInitializeService=function(t){var e,n=t.instanceIdentifier,r=t.options,i=void 0===r?{}:r,s=this.instances.get(n);if(!s&&this.component&&(s=this.component.instanceFactory(this.container,{instanceIdentifier:(e=n,e===c?void 0:e),options:i}),this.instances.set(n,s),this.instancesOptions.set(n,i),this.invokeOnInitCallbacks(s,n),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,n,s)}catch(t){}return s||null},t.prototype.normalizeInstanceIdentifier=function(t){return void 0===t&&(t=c),this.component?this.component.multipleInstances?t:c:t},t.prototype.shouldAutoInitialize=function(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode},t}(),l=function(){function t(t){this.name=t,this.providers=new Map}return t.prototype.addComponent=function(t){var e=this.getProvider(t.name);if(e.isComponentSet())throw new Error("Component "+t.name+" has already been registered with "+this.name);e.setComponent(t)},t.prototype.addOrOverwriteComponent=function(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)},t.prototype.getProvider=function(t){if(this.providers.has(t))return this.providers.get(t);var e=new u(t,this);return this.providers.set(t,e),e},t.prototype.getProviders=function(){return Array.from(this.providers.values())},t}()},934:(t,e,n)=>{n.d(e,{in:()=>i,Yd:()=>u});const r=[];var i;!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(i||(i={}));const s={debug:i.DEBUG,verbose:i.VERBOSE,info:i.INFO,warn:i.WARN,error:i.ERROR,silent:i.SILENT},o=i.INFO,a={[i.DEBUG]:"log",[i.VERBOSE]:"log",[i.INFO]:"info",[i.WARN]:"warn",[i.ERROR]:"error"},c=(t,e,...n)=>{if(e<t.logLevel)return;const r=(new Date).toISOString(),i=a[e];if(!i)throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);console[i](`[${r}]  ${t.name}:`,...n)};class u{constructor(t){this.name=t,this._logLevel=o,this._logHandler=c,this._userLogHandler=null,r.push(this)}get logLevel(){return this._logLevel}set logLevel(t){if(!(t in i))throw new TypeError(`Invalid value "${t}" assigned to \`logLevel\``);this._logLevel=t}setLogLevel(t){this._logLevel="string"==typeof t?s[t]:t}get logHandler(){return this._logHandler}set logHandler(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t}get userLogHandler(){return this._userLogHandler}set userLogHandler(t){this._userLogHandler=t}debug(...t){this._userLogHandler&&this._userLogHandler(this,i.DEBUG,...t),this._logHandler(this,i.DEBUG,...t)}log(...t){this._userLogHandler&&this._userLogHandler(this,i.VERBOSE,...t),this._logHandler(this,i.VERBOSE,...t)}info(...t){this._userLogHandler&&this._userLogHandler(this,i.INFO,...t),this._logHandler(this,i.INFO,...t)}warn(...t){this._userLogHandler&&this._userLogHandler(this,i.WARN,...t),this._logHandler(this,i.WARN,...t)}error(...t){this._userLogHandler&&this._userLogHandler(this,i.ERROR,...t),this._logHandler(this,i.ERROR,...t)}}},444:(t,e,n)=>{n.d(e,{BH:()=>r,LL:()=>d,vZ:()=>m,m9:()=>g,ru:()=>o,d:()=>c,w1:()=>u,uI:()=>s,b$:()=>a,Mn:()=>l});class r{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}wrapCallback(t){return(e,n)=>{e?this.reject(e):this.resolve(n),"function"==typeof t&&(this.promise.catch((()=>{})),1===t.length?t(e):t(e,n))}}}function i(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function s(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(i())}function o(){const t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}function a(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function c(){return i().indexOf("Electron/")>=0}function u(){const t=i();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0}function l(){return i().indexOf("MSAppHost/")>=0}class h extends Error{constructor(t,e,n){super(e),this.code=t,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,h.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,d.prototype.create)}}class d{constructor(t,e,n){this.service=t,this.serviceName=e,this.errors=n}create(t,...e){const n=e[0]||{},r=`${this.service}/${t}`,i=this.errors[t],s=i?function(t,e){return t.replace(f,((t,n)=>{const r=e[n];return null!=r?String(r):`<${n}?>`}))}(i,n):"Error",o=`${this.serviceName}: ${s} (${r}).`;return new h(r,o,n)}}const f=/\{\$([^}]+)}/g;function m(t,e){if(t===e)return!0;const n=Object.keys(t),r=Object.keys(e);for(const i of n){if(!r.includes(i))return!1;const n=t[i],s=e[i];if(p(n)&&p(s)){if(!m(n,s))return!1}else if(n!==s)return!1}for(const t of r)if(!n.includes(t))return!1;return!0}function p(t){return null!==t&&"object"==typeof t}function g(t){return t&&t._delegate?t._delegate:t}},609:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),i=n.n(r),s=n(645),o=n.n(s)()(i());o.push([t.id,"/* http://meyerweb.com/eric/tools/css/reset/\n   v5.0.1 | 20191019\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n\tdisplay: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n\tline-height: 1;\n}\nmenu, ol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n","",{version:3,sources:["webpack://./node_modules/reset-css/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA,kDAAkD;AAClD;IACI,aAAa;AACjB;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/\n   v5.0.1 | 20191019\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n\tdisplay: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n\tline-height: 1;\n}\nmenu, ol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n"],sourceRoot:""}]);const a=o},424:(t,e,n)=>{n.d(e,{Z:()=>u});var r=n(537),i=n.n(r),s=n(645),o=n.n(s),a=n(609),c=o()(i());c.i(a.Z),c.push([t.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const u=c},935:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),i=n.n(r),s=n(645),o=n.n(s)()(i());o.push([t.id,"#home {\r\n    width: 80vw;\r\n    height: 100%;\r\n    margin: auto;\r\n}\r\n\r\n.home-controls {\r\n    box-sizing: border-box;\r\n    height: 10%;\r\n    margin: auto;\r\n    margin-bottom: 5px;\r\n    overflow: auto; \r\n    border: 5px solid orange;\r\n    border-radius: 5px;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n}\r\n\r\n.home-items {\r\n    box-sizing: border-box;\r\n    height: 85%;\r\n    margin: auto;\r\n    padding: 3px;\r\n    overflow: auto; \r\n    border: 5px solid red;\r\n    border-radius: 5px;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.home-items-list {\r\n    box-sizing: inherit;\r\n    width: 100%;\r\n    margin: auto;\r\n    overflow: auto; \r\n    border: 5px solid purple;\r\n    border-radius: inherit;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: flex-start;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.home-items-list > div {\r\n    margin: 3px;\r\n    width: 45%;\r\n}\r\n","",{version:3,sources:["webpack://./src/view/components/home.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,cAAc;IACd,wBAAwB;IACxB,kBAAkB;IAClB,aAAa;IACb,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,cAAc;IACd,qBAAqB;IACrB,kBAAkB;IAClB,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,mBAAmB;IACnB,WAAW;IACX,YAAY;IACZ,cAAc;IACd,wBAAwB;IACxB,sBAAsB;IACtB,aAAa;IACb,6BAA6B;IAC7B,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,WAAW;IACX,UAAU;AACd",sourcesContent:["#home {\r\n    width: 80vw;\r\n    height: 100%;\r\n    margin: auto;\r\n}\r\n\r\n.home-controls {\r\n    box-sizing: border-box;\r\n    height: 10%;\r\n    margin: auto;\r\n    margin-bottom: 5px;\r\n    overflow: auto; \r\n    border: 5px solid orange;\r\n    border-radius: 5px;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n}\r\n\r\n.home-items {\r\n    box-sizing: border-box;\r\n    height: 85%;\r\n    margin: auto;\r\n    padding: 3px;\r\n    overflow: auto; \r\n    border: 5px solid red;\r\n    border-radius: 5px;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.home-items-list {\r\n    box-sizing: inherit;\r\n    width: 100%;\r\n    margin: auto;\r\n    overflow: auto; \r\n    border: 5px solid purple;\r\n    border-radius: inherit;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: flex-start;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.home-items-list > div {\r\n    margin: 3px;\r\n    width: 45%;\r\n}\r\n"],sourceRoot:""}]);const a=o},86:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),i=n.n(r),s=n(645),o=n.n(s)()(i());o.push([t.id,'.item {\r\n  box-sizing: border-box;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n}\r\n  \r\n.item > div {\r\n  padding: 1%;\r\n}\r\n  \r\n.item-title {\r\n  background-color: #eee;\r\n  color: #444;\r\n  text-align: left;\r\n  cursor: pointer;\r\n  outline: none;\r\n  margin: 1%;\r\n}\r\n  \r\n.title-active, .item-title:hover {\r\n  background-color: #ccc;\r\n}\r\n  \r\n.item-title:after {\r\n  content: \'\\02795\'; /* Unicode character for "plus" sign (+) */\r\n  font-size: 13px;\r\n  color: white;\r\n  float: right;\r\n  margin-left: 5px;\r\n}\r\n  \r\n.title-active:after {\r\n  content: "\\2796"; /* Unicode character for "minus" sign (-) */\r\n}\r\n  \r\n.item-content {\r\n  display: none;\r\n  background-color: #f1f1f1;\r\n  max-height: 0;\r\n  overflow: hidden;\r\n  transition: max-height 0.2s ease-out;\r\n}\r\n  \r\n.item-details, .item-controls {\r\n  width: 100%;\r\n  height: 20%;\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n  \r\n.item-controls {\r\n  justify-content: flex-end;\r\n}\r\n  \r\n.item-details > div, .item-controls > div {\r\n  width: 50%;\r\n  height: 100%;\r\n  text-align: center;\r\n}\r\n  \r\n.item-controls > div {\r\n  width: calc(100%/3/3);\r\n}\r\n  \r\n.overdue {\r\n  -webkit-animation: overdue linear 1.5s infinite;\r\n  animation: overdue linear 1.5s infinite;\r\n}\r\n@-webkit-keyframes overdue {\r\n  50% { border-color: red; } \r\n}\r\n@keyframes overdue {\r\n  50% { border-color: red; } \r\n}\r\n\r\n.hasOverdue {\r\n  -webkit-animation: hasOverdue linear 1.5s infinite;\r\n  animation: hasOverdue linear 1.5s infinite;\r\n}\r\n@-webkit-keyframes hasOverdue {\r\n  50% { border-color: orange; } \r\n}\r\n@keyframes hasOverdue {\r\n  50% { border-color: orange; } \r\n}\r\n\r\n.done {\r\n  opacity: 0.3;\r\n}\r\n\r\n',"",{version:3,sources:["webpack://./src/view/components/item.css"],names:[],mappings:"AAAA;EACE,sBAAsB;EACtB,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,6BAA6B;AAC/B;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,sBAAsB;EACtB,WAAW;EACX,gBAAgB;EAChB,eAAe;EACf,aAAa;EACb,UAAU;AACZ;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,iBAAiB,EAAE,0CAA0C;EAC7D,eAAe;EACf,YAAY;EACZ,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,gBAAgB,EAAE,2CAA2C;AAC/D;;AAEA;EACE,aAAa;EACb,yBAAyB;EACzB,aAAa;EACb,gBAAgB;EAChB,oCAAoC;AACtC;;AAEA;EACE,WAAW;EACX,WAAW;EACX,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,UAAU;EACV,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,+CAA+C;EAC/C,uCAAuC;AACzC;AACA;EACE,MAAM,iBAAiB,EAAE;AAC3B;AACA;EACE,MAAM,iBAAiB,EAAE;AAC3B;;AAEA;EACE,kDAAkD;EAClD,0CAA0C;AAC5C;AACA;EACE,MAAM,oBAAoB,EAAE;AAC9B;AACA;EACE,MAAM,oBAAoB,EAAE;AAC9B;;AAEA;EACE,YAAY;AACd",sourcesContent:['.item {\r\n  box-sizing: border-box;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n}\r\n  \r\n.item > div {\r\n  padding: 1%;\r\n}\r\n  \r\n.item-title {\r\n  background-color: #eee;\r\n  color: #444;\r\n  text-align: left;\r\n  cursor: pointer;\r\n  outline: none;\r\n  margin: 1%;\r\n}\r\n  \r\n.title-active, .item-title:hover {\r\n  background-color: #ccc;\r\n}\r\n  \r\n.item-title:after {\r\n  content: \'\\02795\'; /* Unicode character for "plus" sign (+) */\r\n  font-size: 13px;\r\n  color: white;\r\n  float: right;\r\n  margin-left: 5px;\r\n}\r\n  \r\n.title-active:after {\r\n  content: "\\2796"; /* Unicode character for "minus" sign (-) */\r\n}\r\n  \r\n.item-content {\r\n  display: none;\r\n  background-color: #f1f1f1;\r\n  max-height: 0;\r\n  overflow: hidden;\r\n  transition: max-height 0.2s ease-out;\r\n}\r\n  \r\n.item-details, .item-controls {\r\n  width: 100%;\r\n  height: 20%;\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n  \r\n.item-controls {\r\n  justify-content: flex-end;\r\n}\r\n  \r\n.item-details > div, .item-controls > div {\r\n  width: 50%;\r\n  height: 100%;\r\n  text-align: center;\r\n}\r\n  \r\n.item-controls > div {\r\n  width: calc(100%/3/3);\r\n}\r\n  \r\n.overdue {\r\n  -webkit-animation: overdue linear 1.5s infinite;\r\n  animation: overdue linear 1.5s infinite;\r\n}\r\n@-webkit-keyframes overdue {\r\n  50% { border-color: red; } \r\n}\r\n@keyframes overdue {\r\n  50% { border-color: red; } \r\n}\r\n\r\n.hasOverdue {\r\n  -webkit-animation: hasOverdue linear 1.5s infinite;\r\n  animation: hasOverdue linear 1.5s infinite;\r\n}\r\n@-webkit-keyframes hasOverdue {\r\n  50% { border-color: orange; } \r\n}\r\n@keyframes hasOverdue {\r\n  50% { border-color: orange; } \r\n}\r\n\r\n.done {\r\n  opacity: 0.3;\r\n}\r\n\r\n'],sourceRoot:""}]);const a=o},912:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),i=n.n(r),s=n(645),o=n.n(s)()(i());o.push([t.id,".project {\r\n  border: 3px solid green;\r\n}\r\n","",{version:3,sources:["webpack://./src/view/components/project.css"],names:[],mappings:"AAAA;EACE,uBAAuB;AACzB",sourcesContent:[".project {\r\n  border: 3px solid green;\r\n}\r\n"],sourceRoot:""}]);const a=o},808:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),i=n.n(r),s=n(645),o=n.n(s)()(i());o.push([t.id,".form-add {\r\n    box-sizing: border-box;\r\n    margin: auto;\r\n    margin-top: 3px;\r\n    margin-bottom: 3px;\r\n    height: 90%;\r\n    border: 3px solid indianred;\r\n    border-radius: 10px;\r\n    background-color: #eee;\r\n    padding: 10px;\r\n}\r\n\r\n.form-add-project {\r\n    width: calc(100%/3);\r\n}\r\n\r\n.form-add-todo {\r\n    width: 100%;\r\n}\r\n\r\n::placeholder {\r\n    color: inherit;\r\n    font: inherit;\r\n  }\r\n\r\n.form-add div, .form-add input {\r\n    box-sizing: border-box;\r\n    position: relative;\r\n    margin: auto;\r\n    margin-top: 5px;\r\n    margin-bottom: 5px;\r\n    width: 100%;\r\n    height: calc(100%/4);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n}\r\n\r\n\r\n\r\n.form-edit {\r\n    box-sizing: border-box;\r\n    margin: auto;\r\n    margin-top: 3px;\r\n    margin-bottom: 3px;\r\n    height: 90%;\r\n    border: 3px solid indianred;\r\n    border-radius: 10px;\r\n    background-color: #eee;\r\n    padding: 10px;\r\n}\r\n\r\n.form-edit-home {\r\n    width: calc(100%/3);\r\n}\r\n\r\n.form-edit-todo {\r\n    width: 100%;\r\n}\r\n\r\n::placeholder {\r\n    color: inherit;\r\n    font: inherit;\r\n  }\r\n\r\n.form-edit div, .form-edit input {\r\n    box-sizing: border-box;\r\n    position: relative;\r\n    margin: auto;\r\n    margin-top: 5px;\r\n    margin-bottom: 5px;\r\n    width: 100%;\r\n    height: calc(100%/4);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n}\r\n\r\nlabel {\r\n    /* float: left; */\r\n    width: 20%;\r\n}\r\n\r\nselect {\r\n    float: right;\r\n    width: 80%;\r\n}\r\n","",{version:3,sources:["webpack://./src/view/forms/forms.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,YAAY;IACZ,eAAe;IACf,kBAAkB;IAClB,WAAW;IACX,2BAA2B;IAC3B,mBAAmB;IACnB,sBAAsB;IACtB,aAAa;AACjB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,cAAc;IACd,aAAa;EACf;;AAEF;IACI,sBAAsB;IACtB,kBAAkB;IAClB,YAAY;IACZ,eAAe;IACf,kBAAkB;IAClB,WAAW;IACX,oBAAoB;IACpB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,kBAAkB;AACtB;;;;AAIA;IACI,sBAAsB;IACtB,YAAY;IACZ,eAAe;IACf,kBAAkB;IAClB,WAAW;IACX,2BAA2B;IAC3B,mBAAmB;IACnB,sBAAsB;IACtB,aAAa;AACjB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,cAAc;IACd,aAAa;EACf;;AAEF;IACI,sBAAsB;IACtB,kBAAkB;IAClB,YAAY;IACZ,eAAe;IACf,kBAAkB;IAClB,WAAW;IACX,oBAAoB;IACpB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;IACjB,UAAU;AACd;;AAEA;IACI,YAAY;IACZ,UAAU;AACd",sourcesContent:[".form-add {\r\n    box-sizing: border-box;\r\n    margin: auto;\r\n    margin-top: 3px;\r\n    margin-bottom: 3px;\r\n    height: 90%;\r\n    border: 3px solid indianred;\r\n    border-radius: 10px;\r\n    background-color: #eee;\r\n    padding: 10px;\r\n}\r\n\r\n.form-add-project {\r\n    width: calc(100%/3);\r\n}\r\n\r\n.form-add-todo {\r\n    width: 100%;\r\n}\r\n\r\n::placeholder {\r\n    color: inherit;\r\n    font: inherit;\r\n  }\r\n\r\n.form-add div, .form-add input {\r\n    box-sizing: border-box;\r\n    position: relative;\r\n    margin: auto;\r\n    margin-top: 5px;\r\n    margin-bottom: 5px;\r\n    width: 100%;\r\n    height: calc(100%/4);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n}\r\n\r\n\r\n\r\n.form-edit {\r\n    box-sizing: border-box;\r\n    margin: auto;\r\n    margin-top: 3px;\r\n    margin-bottom: 3px;\r\n    height: 90%;\r\n    border: 3px solid indianred;\r\n    border-radius: 10px;\r\n    background-color: #eee;\r\n    padding: 10px;\r\n}\r\n\r\n.form-edit-home {\r\n    width: calc(100%/3);\r\n}\r\n\r\n.form-edit-todo {\r\n    width: 100%;\r\n}\r\n\r\n::placeholder {\r\n    color: inherit;\r\n    font: inherit;\r\n  }\r\n\r\n.form-edit div, .form-edit input {\r\n    box-sizing: border-box;\r\n    position: relative;\r\n    margin: auto;\r\n    margin-top: 5px;\r\n    margin-bottom: 5px;\r\n    width: 100%;\r\n    height: calc(100%/4);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n}\r\n\r\nlabel {\r\n    /* float: left; */\r\n    width: 20%;\r\n}\r\n\r\nselect {\r\n    float: right;\r\n    width: 80%;\r\n}\r\n"],sourceRoot:""}]);const a=o},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,s){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(o[c]=!0)}for(var u=0;u<t.length;u++){var l=[].concat(t[u]);r&&o[l[0]]||(void 0!==s&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=s),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),e.push(l))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(i," */"),o=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(o).concat([s]).join("\n")}return[e].join("\n")}},882:(t,e,n)=>{function r(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}n.d(e,{Z:()=>r})},946:(t,e,n)=>{function r(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}n.d(e,{Z:()=>r})},562:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(946),i=n(13),s=n(882);function o(t,e){(0,s.Z)(2,arguments);var n=(0,i.Z)(t),o=(0,r.Z)(e);if(isNaN(o))return new Date(NaN);if(!o)return n;var a=n.getDate(),c=new Date(n.getTime());c.setMonth(n.getMonth()+o+1,0);var u=c.getDate();return a>=u?c:(n.setFullYear(c.getFullYear(),c.getMonth(),a),n)}function a(t,e){(0,s.Z)(2,arguments);var n=(0,r.Z)(e);return o(t,12*n)}},598:(t,e,n)=>{n.d(e,{Z:()=>rt});var r=n(882);function i(t){return(0,r.Z)(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}var s=n(13);function o(t){if((0,r.Z)(1,arguments),!i(t)&&"number"!=typeof t)return!1;var e=(0,s.Z)(t);return!isNaN(Number(e))}var a={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function c(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}var u,l={date:c({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:c({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:c({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},h={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function d(t){return function(e,n){var r,i=n||{};if("formatting"===(i.context?String(i.context):"standalone")&&t.formattingValues){var s=t.defaultFormattingWidth||t.defaultWidth,o=i.width?String(i.width):s;r=t.formattingValues[o]||t.formattingValues[s]}else{var a=t.defaultWidth,c=i.width?String(i.width):t.defaultWidth;r=t.values[c]||t.values[a]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function f(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,i=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],s=e.match(i);if(!s)return null;var o,a=s[0],c=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],u=Array.isArray(c)?p(c,(function(t){return t.test(a)})):m(c,(function(t){return t.test(a)}));o=t.valueCallback?t.valueCallback(u):u,o=n.valueCallback?n.valueCallback(o):o;var l=e.slice(a.length);return{value:o,rest:l}}}function m(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function p(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}const g={code:"en-US",formatDistance:function(t,e,n){var r,i=a[t];return r="string"==typeof i?i:1===e?i.one:i.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:l,formatRelative:function(t,e,n,r){return h[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:d({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:d({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:d({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:d({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:d({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(u={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(u.matchPattern);if(!n)return null;var r=n[0],i=t.match(u.parsePattern);if(!i)return null;var s=u.valueCallback?u.valueCallback(i[0]):i[0];s=e.valueCallback?e.valueCallback(s):s;var o=t.slice(r.length);return{value:s,rest:o}}),era:f({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:f({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:f({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:f({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:f({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var y=n(946);function v(t,e){(0,r.Z)(2,arguments);var n=(0,s.Z)(t).getTime(),i=(0,y.Z)(e);return new Date(n+i)}function w(t,e){(0,r.Z)(2,arguments);var n=(0,y.Z)(e);return v(t,-n)}function A(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const b=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return A("yy"===e?r%100:r,e.length)},E=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):A(n+1,2)},T=function(t,e){return A(t.getUTCDate(),e.length)},I=function(t,e){return A(t.getUTCHours()%12||12,e.length)},C=function(t,e){return A(t.getUTCHours(),e.length)},S=function(t,e){return A(t.getUTCMinutes(),e.length)},k=function(t,e){return A(t.getUTCSeconds(),e.length)},D=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return A(Math.floor(r*Math.pow(10,n-3)),e.length)};var N=864e5;function x(t){(0,r.Z)(1,arguments);var e=1,n=(0,s.Z)(t),i=n.getUTCDay(),o=(i<e?7:0)+i-e;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function _(t){(0,r.Z)(1,arguments);var e=(0,s.Z)(t),n=e.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(n+1,0,4),i.setUTCHours(0,0,0,0);var o=x(i),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var c=x(a);return e.getTime()>=o.getTime()?n+1:e.getTime()>=c.getTime()?n:n-1}function L(t){(0,r.Z)(1,arguments);var e=_(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var i=x(n);return i}var P=6048e5;function M(t,e){(0,r.Z)(1,arguments);var n=e||{},i=n.locale,o=i&&i.options&&i.options.weekStartsOn,a=null==o?0:(0,y.Z)(o),c=null==n.weekStartsOn?a:(0,y.Z)(n.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=(0,s.Z)(t),l=u.getUTCDay(),h=(l<c?7:0)+l-c;return u.setUTCDate(u.getUTCDate()-h),u.setUTCHours(0,0,0,0),u}function R(t,e){(0,r.Z)(1,arguments);var n=(0,s.Z)(t,e),i=n.getUTCFullYear(),o=e||{},a=o.locale,c=a&&a.options&&a.options.firstWeekContainsDate,u=null==c?1:(0,y.Z)(c),l=null==o.firstWeekContainsDate?u:(0,y.Z)(o.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(i+1,0,l),h.setUTCHours(0,0,0,0);var d=M(h,e),f=new Date(0);f.setUTCFullYear(i,0,l),f.setUTCHours(0,0,0,0);var m=M(f,e);return n.getTime()>=d.getTime()?i+1:n.getTime()>=m.getTime()?i:i-1}function B(t,e){(0,r.Z)(1,arguments);var n=e||{},i=n.locale,s=i&&i.options&&i.options.firstWeekContainsDate,o=null==s?1:(0,y.Z)(s),a=null==n.firstWeekContainsDate?o:(0,y.Z)(n.firstWeekContainsDate),c=R(t,e),u=new Date(0);u.setUTCFullYear(c,0,a),u.setUTCHours(0,0,0,0);var l=M(u,e);return l}var O=6048e5;function j(t,e){var n=t>0?"-":"+",r=Math.abs(t),i=Math.floor(r/60),s=r%60;if(0===s)return n+String(i);var o=e||"";return n+String(i)+o+A(s,2)}function U(t,e){return t%60==0?(t>0?"-":"+")+A(Math.abs(t)/60,2):F(t,e)}function F(t,e){var n=e||"",r=t>0?"-":"+",i=Math.abs(t);return r+A(Math.floor(i/60),2)+n+A(i%60,2)}const V={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),i=r>0?r:1-r;return n.ordinalNumber(i,{unit:"year"})}return b(t,e)},Y:function(t,e,n,r){var i=R(t,r),s=i>0?i:1-i;return"YY"===e?A(s%100,2):"Yo"===e?n.ordinalNumber(s,{unit:"year"}):A(s,e.length)},R:function(t,e){return A(_(t),e.length)},u:function(t,e){return A(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return A(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return A(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return E(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return A(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,i){var o=function(t,e){(0,r.Z)(1,arguments);var n=(0,s.Z)(t),i=M(n,e).getTime()-B(n,e).getTime();return Math.round(i/O)+1}(t,i);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):A(o,e.length)},I:function(t,e,n){var i=function(t){(0,r.Z)(1,arguments);var e=(0,s.Z)(t),n=x(e).getTime()-L(e).getTime();return Math.round(n/P)+1}(t);return"Io"===e?n.ordinalNumber(i,{unit:"week"}):A(i,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):T(t,e)},D:function(t,e,n){var i=function(t){(0,r.Z)(1,arguments);var e=(0,s.Z)(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var i=e.getTime(),o=n-i;return Math.floor(o/N)+1}(t);return"Do"===e?n.ordinalNumber(i,{unit:"dayOfYear"}):A(i,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var i=t.getUTCDay(),s=(i-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(s);case"ee":return A(s,2);case"eo":return n.ordinalNumber(s,{unit:"day"});case"eee":return n.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var i=t.getUTCDay(),s=(i-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(s);case"cc":return A(s,e.length);case"co":return n.ordinalNumber(s,{unit:"day"});case"ccc":return n.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(i,{width:"narrow",context:"standalone"});case"cccccc":return n.day(i,{width:"short",context:"standalone"});default:return n.day(i,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),i=0===r?7:r;switch(e){case"i":return String(i);case"ii":return A(i,e.length);case"io":return n.ordinalNumber(i,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,i=t.getUTCHours();switch(r=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,i=t.getUTCHours();switch(r=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return I(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):C(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):A(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):A(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):S(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):k(t,e)},S:function(t,e){return D(t,e)},X:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();if(0===i)return"Z";switch(e){case"X":return U(i);case"XXXX":case"XX":return F(i);default:return F(i,":")}},x:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return U(i);case"xxxx":case"xx":return F(i);default:return F(i,":")}},O:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+j(i,":");default:return"GMT"+F(i,":")}},z:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+j(i,":");default:return"GMT"+F(i,":")}},t:function(t,e,n,r){var i=r._originalDate||t;return A(Math.floor(i.getTime()/1e3),e.length)},T:function(t,e,n,r){return A((r._originalDate||t).getTime(),e.length)}};function q(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function $(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}var H={p:$,P:function(t,e){var n,r=t.match(/(P+)(p+)?/),i=r[1],s=r[2];if(!s)return q(t,e);switch(i){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",q(i,e)).replace("{{time}}",$(s,e))}};const z=H;function W(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var K=["D","DD"],G=["YY","YYYY"];function Y(t){return-1!==K.indexOf(t)}function Z(t){return-1!==G.indexOf(t)}function Q(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var X=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,J=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,tt=/^'([^]*?)'?$/,et=/''/g,nt=/[a-zA-Z]/;function rt(t,e,n){(0,r.Z)(2,arguments);var i=String(e),a=n||{},c=a.locale||g,u=c.options&&c.options.firstWeekContainsDate,l=null==u?1:(0,y.Z)(u),h=null==a.firstWeekContainsDate?l:(0,y.Z)(a.firstWeekContainsDate);if(!(h>=1&&h<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=c.options&&c.options.weekStartsOn,f=null==d?0:(0,y.Z)(d),m=null==a.weekStartsOn?f:(0,y.Z)(a.weekStartsOn);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!c.localize)throw new RangeError("locale must contain localize property");if(!c.formatLong)throw new RangeError("locale must contain formatLong property");var p=(0,s.Z)(t);if(!o(p))throw new RangeError("Invalid time value");var v=W(p),A=w(p,v),b={firstWeekContainsDate:h,weekStartsOn:m,locale:c,_originalDate:p},E=i.match(J).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,z[e])(t,c.formatLong,b):t})).join("").match(X).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return it(n);var i=V[r];if(i)return!a.useAdditionalWeekYearTokens&&Z(n)&&Q(n,e,t),!a.useAdditionalDayOfYearTokens&&Y(n)&&Q(n,e,t),i(A,n,c.localize,b);if(r.match(nt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return E}function it(t){return t.match(tt)[1].replace(et,"'")}},13:(t,e,n)=>{n.d(e,{Z:()=>i});var r=n(882);function i(t){(0,r.Z)(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}},503:(t,e,n)=>{n.d(e,{ZF:()=>r.ZF});var r=n(258);(0,r.KN)("firebase","9.2.0","app")},591:(t,e,n)=>{n.d(e,{EK:()=>$r,ET:()=>gl,hJ:()=>Eu,oe:()=>pl,JU:()=>Tu,PL:()=>dl,ad:()=>Su,IO:()=>al,pl:()=>fl,r7:()=>ml,qs:()=>vl});var r,i=n(258),s=n(552),o=n(934),a=n(444),c="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{},u={},l=l||{},h=c||self;function d(){}function f(t){var e=typeof t;return"array"==(e="object"!=e?e:t?Array.isArray(t)?"array":e:"null")||"object"==e&&"number"==typeof t.length}function m(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var p="closure_uid_"+(1e9*Math.random()>>>0),g=0;function y(t,e,n){return t.call.apply(t.bind,arguments)}function v(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function w(t,e,n){return(w=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?y:v).apply(null,arguments)}function A(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}function b(t,e){function n(){}n.prototype=e.prototype,t.Z=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.Vb=function(t,n,r){for(var i=Array(arguments.length-2),s=2;s<arguments.length;s++)i[s-2]=arguments[s];return e.prototype[n].apply(t,i)}}function E(){this.s=this.s,this.o=this.o}var T={};E.prototype.s=!1,E.prototype.na=function(){if(!this.s&&(this.s=!0,this.M(),0)){var t=function(t){return Object.prototype.hasOwnProperty.call(t,p)&&t[p]||(t[p]=++g)}(this);delete T[t]}},E.prototype.M=function(){if(this.o)for(;this.o.length;)this.o.shift()()};const I=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(let n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},C=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){const r=t.length,i="string"==typeof t?t.split(""):t;for(let s=0;s<r;s++)s in i&&e.call(n,i[s],s,t)};function S(t){return Array.prototype.concat.apply([],arguments)}function k(t){const e=t.length;if(0<e){const n=Array(e);for(let r=0;r<e;r++)n[r]=t[r];return n}return[]}function D(t){return/^[\s\xa0]*$/.test(t)}var N,x=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]};function _(t,e){return-1!=t.indexOf(e)}function L(t,e){return t<e?-1:t>e?1:0}t:{var P=h.navigator;if(P){var M=P.userAgent;if(M){N=M;break t}}N=""}function R(t,e,n){for(const r in t)e.call(n,t[r],r,t)}function B(t){const e={};for(const n in t)e[n]=t[n];return e}var O="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function j(t,e){let n,r;for(let e=1;e<arguments.length;e++){for(n in r=arguments[e],r)t[n]=r[n];for(let e=0;e<O.length;e++)n=O[e],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function U(t){return U[" "](t),t}U[" "]=d;var F,V,q=_(N,"Opera"),$=_(N,"Trident")||_(N,"MSIE"),H=_(N,"Edge"),z=H||$,W=_(N,"Gecko")&&!(_(N.toLowerCase(),"webkit")&&!_(N,"Edge"))&&!(_(N,"Trident")||_(N,"MSIE"))&&!_(N,"Edge"),K=_(N.toLowerCase(),"webkit")&&!_(N,"Edge");function G(){var t=h.document;return t?t.documentMode:void 0}t:{var Y="",Z=(V=N,W?/rv:([^\);]+)(\)|;)/.exec(V):H?/Edge\/([\d\.]+)/.exec(V):$?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(V):K?/WebKit\/(\S+)/.exec(V):q?/(?:Version)[ \/]?(\S+)/.exec(V):void 0);if(Z&&(Y=Z?Z[1]:""),$){var Q=G();if(null!=Q&&Q>parseFloat(Y)){F=String(Q);break t}}F=Y}var X,J={};function tt(){return t=J,Object.prototype.hasOwnProperty.call(t,9)?t[9]:t[9]=function(){let t=0;const e=x(String(F)).split("."),n=x("9").split("."),r=Math.max(e.length,n.length);for(let o=0;0==t&&o<r;o++){var i=e[o]||"",s=n[o]||"";do{if(i=/(\d*)(\D*)(.*)/.exec(i)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==i[0].length&&0==s[0].length)break;t=L(0==i[1].length?0:parseInt(i[1],10),0==s[1].length?0:parseInt(s[1],10))||L(0==i[2].length,0==s[2].length)||L(i[2],s[2]),i=i[3],s=s[3]}while(0==t)}return 0<=t}();var t}h.document&&$?X=G()||parseInt(F,10)||void 0:X=void 0;var et=X,nt=function(){if(!h.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{h.addEventListener("test",d,e),h.removeEventListener("test",d,e)}catch(t){}return t}();function rt(t,e){this.type=t,this.g=this.target=e,this.defaultPrevented=!1}function it(t,e){if(rt.call(this,t?t.type:""),this.relatedTarget=this.g=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.state=null,this.pointerId=0,this.pointerType="",this.i=null,t){var n=this.type=t.type,r=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.g=e,e=t.relatedTarget){if(W){t:{try{U(e.nodeName);var i=!0;break t}catch(t){}i=!1}i||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:st[t.pointerType]||"",this.state=t.state,this.i=t,t.defaultPrevented&&it.Z.h.call(this)}}rt.prototype.h=function(){this.defaultPrevented=!0},b(it,rt);var st={2:"touch",3:"pen",4:"mouse"};it.prototype.h=function(){it.Z.h.call(this);var t=this.i;t.preventDefault?t.preventDefault():t.returnValue=!1};var ot="closure_listenable_"+(1e6*Math.random()|0),at=0;function ct(t,e,n,r,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.ia=i,this.key=++at,this.ca=this.fa=!1}function ut(t){t.ca=!0,t.listener=null,t.proxy=null,t.src=null,t.ia=null}function lt(t){this.src=t,this.g={},this.h=0}function ht(t,e){var n=e.type;if(n in t.g){var r,i=t.g[n],s=I(i,e);(r=0<=s)&&Array.prototype.splice.call(i,s,1),r&&(ut(e),0==t.g[n].length&&(delete t.g[n],t.h--))}}function dt(t,e,n,r){for(var i=0;i<t.length;++i){var s=t[i];if(!s.ca&&s.listener==e&&s.capture==!!n&&s.ia==r)return i}return-1}lt.prototype.add=function(t,e,n,r,i){var s=t.toString();(t=this.g[s])||(t=this.g[s]=[],this.h++);var o=dt(t,e,r,i);return-1<o?(e=t[o],n||(e.fa=!1)):((e=new ct(e,this.src,s,!!r,i)).fa=n,t.push(e)),e};var ft="closure_lm_"+(1e6*Math.random()|0),mt={};function pt(t,e,n,r,i){if(r&&r.once)return yt(t,e,n,r,i);if(Array.isArray(e)){for(var s=0;s<e.length;s++)pt(t,e[s],n,r,i);return null}return n=It(n),t&&t[ot]?t.N(e,n,m(r)?!!r.capture:!!r,i):gt(t,e,n,!1,r,i)}function gt(t,e,n,r,i,s){if(!e)throw Error("Invalid event type");var o=m(i)?!!i.capture:!!i,a=Et(t);if(a||(t[ft]=a=new lt(t)),(n=a.add(e,n,r,o,s)).proxy)return n;if(r=function(){var t=bt;return function e(n){return t.call(e.src,e.listener,n)}}(),n.proxy=r,r.src=t,r.listener=n,t.addEventListener)nt||(i=o),void 0===i&&(i=!1),t.addEventListener(e.toString(),r,i);else if(t.attachEvent)t.attachEvent(At(e.toString()),r);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(r)}return n}function yt(t,e,n,r,i){if(Array.isArray(e)){for(var s=0;s<e.length;s++)yt(t,e[s],n,r,i);return null}return n=It(n),t&&t[ot]?t.O(e,n,m(r)?!!r.capture:!!r,i):gt(t,e,n,!0,r,i)}function vt(t,e,n,r,i){if(Array.isArray(e))for(var s=0;s<e.length;s++)vt(t,e[s],n,r,i);else r=m(r)?!!r.capture:!!r,n=It(n),t&&t[ot]?(t=t.i,(e=String(e).toString())in t.g&&-1<(n=dt(s=t.g[e],n,r,i))&&(ut(s[n]),Array.prototype.splice.call(s,n,1),0==s.length&&(delete t.g[e],t.h--))):t&&(t=Et(t))&&(e=t.g[e.toString()],t=-1,e&&(t=dt(e,n,r,i)),(n=-1<t?e[t]:null)&&wt(n))}function wt(t){if("number"!=typeof t&&t&&!t.ca){var e=t.src;if(e&&e[ot])ht(e.i,t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(At(n),r):e.addListener&&e.removeListener&&e.removeListener(r),(n=Et(e))?(ht(n,t),0==n.h&&(n.src=null,e[ft]=null)):ut(t)}}}function At(t){return t in mt?mt[t]:mt[t]="on"+t}function bt(t,e){if(t.ca)t=!0;else{e=new it(e,this);var n=t.listener,r=t.ia||t.src;t.fa&&wt(t),t=n.call(r,e)}return t}function Et(t){return(t=t[ft])instanceof lt?t:null}var Tt="__closure_events_fn_"+(1e9*Math.random()>>>0);function It(t){return"function"==typeof t?t:(t[Tt]||(t[Tt]=function(e){return t.handleEvent(e)}),t[Tt])}function Ct(){E.call(this),this.i=new lt(this),this.P=this,this.I=null}function St(t,e){var n,r=t.I;if(r)for(n=[];r;r=r.I)n.push(r);if(t=t.P,r=e.type||e,"string"==typeof e)e=new rt(e,t);else if(e instanceof rt)e.target=e.target||t;else{var i=e;j(e=new rt(r,t),i)}if(i=!0,n)for(var s=n.length-1;0<=s;s--){var o=e.g=n[s];i=kt(o,r,!0,e)&&i}if(i=kt(o=e.g=t,r,!0,e)&&i,i=kt(o,r,!1,e)&&i,n)for(s=0;s<n.length;s++)i=kt(o=e.g=n[s],r,!1,e)&&i}function kt(t,e,n,r){if(!(e=t.i.g[String(e)]))return!0;e=e.concat();for(var i=!0,s=0;s<e.length;++s){var o=e[s];if(o&&!o.ca&&o.capture==n){var a=o.listener,c=o.ia||o.src;o.fa&&ht(t.i,o),i=!1!==a.call(c,r)&&i}}return i&&!r.defaultPrevented}b(Ct,E),Ct.prototype[ot]=!0,Ct.prototype.removeEventListener=function(t,e,n,r){vt(this,t,e,n,r)},Ct.prototype.M=function(){if(Ct.Z.M.call(this),this.i){var t,e=this.i;for(t in e.g){for(var n=e.g[t],r=0;r<n.length;r++)ut(n[r]);delete e.g[t],e.h--}}this.I=null},Ct.prototype.N=function(t,e,n,r){return this.i.add(String(t),e,!1,n,r)},Ct.prototype.O=function(t,e,n,r){return this.i.add(String(t),e,!0,n,r)};var Dt=h.JSON.stringify;function Nt(){var t=Bt;let e=null;return t.g&&(e=t.g,t.g=t.g.next,t.g||(t.h=null),e.next=null),e}var xt,_t=new class{constructor(t,e){this.i=t,this.j=e,this.h=0,this.g=null}get(){let t;return 0<this.h?(this.h--,t=this.g,this.g=t.next,t.next=null):t=this.i(),t}}((()=>new Lt),(t=>t.reset()));class Lt{constructor(){this.next=this.g=this.h=null}set(t,e){this.h=t,this.g=e,this.next=null}reset(){this.next=this.g=this.h=null}}function Pt(t){h.setTimeout((()=>{throw t}),0)}function Mt(t,e){xt||function(){var t=h.Promise.resolve(void 0);xt=function(){t.then(Ot)}}(),Rt||(xt(),Rt=!0),Bt.add(t,e)}var Rt=!1,Bt=new class{constructor(){this.h=this.g=null}add(t,e){const n=_t.get();n.set(t,e),this.h?this.h.next=n:this.g=n,this.h=n}};function Ot(){for(var t;t=Nt();){try{t.h.call(t.g)}catch(t){Pt(t)}var e=_t;e.j(t),100>e.h&&(e.h++,t.next=e.g,e.g=t)}Rt=!1}function jt(t,e){Ct.call(this),this.h=t||1,this.g=e||h,this.j=w(this.kb,this),this.l=Date.now()}function Ut(t){t.da=!1,t.S&&(t.g.clearTimeout(t.S),t.S=null)}function Ft(t,e,n){if("function"==typeof t)n&&(t=w(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=w(t.handleEvent,t)}return 2147483647<Number(e)?-1:h.setTimeout(t,e||0)}function Vt(t){t.g=Ft((()=>{t.g=null,t.i&&(t.i=!1,Vt(t))}),t.j);const e=t.h;t.h=null,t.m.apply(null,e)}b(jt,Ct),(r=jt.prototype).da=!1,r.S=null,r.kb=function(){if(this.da){var t=Date.now()-this.l;0<t&&t<.8*this.h?this.S=this.g.setTimeout(this.j,this.h-t):(this.S&&(this.g.clearTimeout(this.S),this.S=null),St(this,"tick"),this.da&&(Ut(this),this.start()))}},r.start=function(){this.da=!0,this.S||(this.S=this.g.setTimeout(this.j,this.h),this.l=Date.now())},r.M=function(){jt.Z.M.call(this),Ut(this),delete this.g};class qt extends E{constructor(t,e){super(),this.m=t,this.j=e,this.h=null,this.i=!1,this.g=null}l(t){this.h=arguments,this.g?this.i=!0:Vt(this)}M(){super.M(),this.g&&(h.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null)}}function $t(t){E.call(this),this.h=t,this.g={}}b($t,E);var Ht=[];function zt(t,e,n,r){Array.isArray(n)||(n&&(Ht[0]=n.toString()),n=Ht);for(var i=0;i<n.length;i++){var s=pt(e,n[i],r||t.handleEvent,!1,t.h||t);if(!s)break;t.g[s.key]=s}}function Wt(t){R(t.g,(function(t,e){this.g.hasOwnProperty(e)&&wt(t)}),t),t.g={}}function Kt(){this.g=!0}function Gt(t,e,n,r){t.info((function(){return"XMLHTTP TEXT ("+e+"): "+function(t,e){if(!t.g)return e;if(!e)return null;try{var n=JSON.parse(e);if(n)for(t=0;t<n.length;t++)if(Array.isArray(n[t])){var r=n[t];if(!(2>r.length)){var i=r[1];if(Array.isArray(i)&&!(1>i.length)){var s=i[0];if("noop"!=s&&"stop"!=s&&"close"!=s)for(var o=1;o<i.length;o++)i[o]=""}}}return Dt(n)}catch(t){return e}}(t,n)+(r?" "+r:"")}))}$t.prototype.M=function(){$t.Z.M.call(this),Wt(this)},$t.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},Kt.prototype.Aa=function(){this.g=!1},Kt.prototype.info=function(){};var Yt={},Zt=null;function Qt(){return Zt=Zt||new Ct}function Xt(t){rt.call(this,Yt.Ma,t)}function Jt(t){const e=Qt();St(e,new Xt(e,t))}function te(t,e){rt.call(this,Yt.STAT_EVENT,t),this.stat=e}function ee(t){const e=Qt();St(e,new te(e,t))}function ne(t,e){rt.call(this,Yt.Na,t),this.size=e}function re(t,e){if("function"!=typeof t)throw Error("Fn must not be null and must be a function");return h.setTimeout((function(){t()}),e)}Yt.Ma="serverreachability",b(Xt,rt),Yt.STAT_EVENT="statevent",b(te,rt),Yt.Na="timingevent",b(ne,rt);var ie={NO_ERROR:0,lb:1,yb:2,xb:3,sb:4,wb:5,zb:6,Ja:7,TIMEOUT:8,Cb:9},se={qb:"complete",Mb:"success",Ka:"error",Ja:"abort",Eb:"ready",Fb:"readystatechange",TIMEOUT:"timeout",Ab:"incrementaldata",Db:"progress",tb:"downloadprogress",Ub:"uploadprogress"};function oe(){}function ae(t){return t.h||(t.h=t.i())}function ce(){}oe.prototype.h=null;var ue,le={OPEN:"a",pb:"b",Ka:"c",Bb:"d"};function he(){rt.call(this,"d")}function de(){rt.call(this,"c")}function fe(){}function me(t,e,n,r){this.l=t,this.j=e,this.m=n,this.X=r||1,this.V=new $t(this),this.P=ge,t=z?125:void 0,this.W=new jt(t),this.H=null,this.i=!1,this.s=this.A=this.v=this.K=this.F=this.Y=this.B=null,this.D=[],this.g=null,this.C=0,this.o=this.u=null,this.N=-1,this.I=!1,this.O=0,this.L=null,this.aa=this.J=this.$=this.U=!1,this.h=new pe}function pe(){this.i=null,this.g="",this.h=!1}b(he,rt),b(de,rt),b(fe,oe),fe.prototype.g=function(){return new XMLHttpRequest},fe.prototype.i=function(){return{}},ue=new fe;var ge=45e3,ye={},ve={};function we(t,e,n){t.K=1,t.v=qe(Be(e)),t.s=n,t.U=!0,Ae(t,null)}function Ae(t,e){t.F=Date.now(),Ie(t),t.A=Be(t.v);var n=t.A,r=t.X;Array.isArray(r)||(r=[String(r)]),en(n.h,"t",r),t.C=0,n=t.l.H,t.h=new pe,t.g=nr(t.l,n?e:null,!t.s),0<t.O&&(t.L=new qt(w(t.Ia,t,t.g),t.O)),zt(t.V,t.g,"readystatechange",t.gb),e=t.H?B(t.H):{},t.s?(t.u||(t.u="POST"),e["Content-Type"]="application/x-www-form-urlencoded",t.g.ea(t.A,t.u,t.s,e)):(t.u="GET",t.g.ea(t.A,t.u,null,e)),Jt(1),function(t,e,n,r,i,s){t.info((function(){if(t.g)if(s)for(var o="",a=s.split("&"),c=0;c<a.length;c++){var u=a[c].split("=");if(1<u.length){var l=u[0];u=u[1];var h=l.split("_");o=2<=h.length&&"type"==h[1]?o+(l+"=")+u+"&":o+(l+"=redacted&")}}else o=null;else o=s;return"XMLHTTP REQ ("+r+") [attempt "+i+"]: "+e+"\n"+n+"\n"+o}))}(t.j,t.u,t.A,t.m,t.X,t.s)}function be(t){return!!t.g&&"GET"==t.u&&2!=t.K&&t.l.Ba}function Ee(t,e,n){let r,i=!0;for(;!t.I&&t.C<n.length;){if(r=Te(t,n),r==ve){4==e&&(t.o=4,ee(14),i=!1),Gt(t.j,t.m,null,"[Incomplete Response]");break}if(r==ye){t.o=4,ee(15),Gt(t.j,t.m,n,"[Invalid Chunk]"),i=!1;break}Gt(t.j,t.m,r,null),Ne(t,r)}be(t)&&r!=ve&&r!=ye&&(t.h.g="",t.C=0),4!=e||0!=n.length||t.h.h||(t.o=1,ee(16),i=!1),t.i=t.i&&i,i?0<n.length&&!t.aa&&(t.aa=!0,(e=t.l).g==t&&e.$&&!e.L&&(e.h.info("Great, no buffering proxy detected. Bytes received: "+n.length),Gn(e),e.L=!0,ee(11))):(Gt(t.j,t.m,n,"[Invalid Chunked Response]"),De(t),ke(t))}function Te(t,e){var n=t.C,r=e.indexOf("\n",n);return-1==r?ve:(n=Number(e.substring(n,r)),isNaN(n)?ye:(r+=1)+n>e.length?ve:(e=e.substr(r,n),t.C=r+n,e))}function Ie(t){t.Y=Date.now()+t.P,Ce(t,t.P)}function Ce(t,e){if(null!=t.B)throw Error("WatchDog timer not null");t.B=re(w(t.eb,t),e)}function Se(t){t.B&&(h.clearTimeout(t.B),t.B=null)}function ke(t){0==t.l.G||t.I||Qn(t.l,t)}function De(t){Se(t);var e=t.L;e&&"function"==typeof e.na&&e.na(),t.L=null,Ut(t.W),Wt(t.V),t.g&&(e=t.g,t.g=null,e.abort(),e.na())}function Ne(t,e){try{var n=t.l;if(0!=n.G&&(n.g==t||cn(n.i,t)))if(n.I=t.N,!t.J&&cn(n.i,t)&&3==n.G){try{var r=n.Ca.g.parse(e)}catch(t){r=null}if(Array.isArray(r)&&3==r.length){var i=r;if(0==i[0]){t:if(!n.u){if(n.g){if(!(n.g.F+3e3<t.F))break t;Zn(n),Un(n)}Kn(n),ee(18)}}else n.ta=i[1],0<n.ta-n.U&&37500>i[2]&&n.N&&0==n.A&&!n.v&&(n.v=re(w(n.ab,n),6e3));if(1>=an(n.i)&&n.ka){try{n.ka()}catch(t){}n.ka=void 0}}else Jn(n,11)}else if((t.J||n.g==t)&&Zn(n),!D(e))for(i=n.Ca.g.parse(e),e=0;e<i.length;e++){let u=i[e];if(n.U=u[0],u=u[1],2==n.G)if("c"==u[0]){n.J=u[1],n.la=u[2];const e=u[3];null!=e&&(n.ma=e,n.h.info("VER="+n.ma));const i=u[4];null!=i&&(n.za=i,n.h.info("SVER="+n.za));const l=u[5];null!=l&&"number"==typeof l&&0<l&&(r=1.5*l,n.K=r,n.h.info("backChannelRequestTimeoutMs_="+r)),r=n;const h=t.g;if(h){const t=h.g?h.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(t){var s=r.i;!s.g&&(_(t,"spdy")||_(t,"quic")||_(t,"h2"))&&(s.j=s.l,s.g=new Set,s.h&&(un(s,s.h),s.h=null))}if(r.D){const t=h.g?h.g.getResponseHeader("X-HTTP-Session-Id"):null;t&&(r.sa=t,Ve(r.F,r.D,t))}}n.G=3,n.j&&n.j.xa(),n.$&&(n.O=Date.now()-t.F,n.h.info("Handshake RTT: "+n.O+"ms"));var o=t;if((r=n).oa=er(r,r.H?r.la:null,r.W),o.J){ln(r.i,o);var a=o,c=r.K;c&&a.setTimeout(c),a.B&&(Se(a),Ie(a)),r.g=o}else Wn(r);0<n.l.length&&qn(n)}else"stop"!=u[0]&&"close"!=u[0]||Jn(n,7);else 3==n.G&&("stop"==u[0]||"close"==u[0]?"stop"==u[0]?Jn(n,7):jn(n):"noop"!=u[0]&&n.j&&n.j.wa(u),n.A=0)}Jt(4)}catch(t){}}function xe(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(f(t)||"string"==typeof t)C(t,e,void 0);else{if(t.T&&"function"==typeof t.T)var n=t.T();else if(t.R&&"function"==typeof t.R)n=void 0;else if(f(t)||"string"==typeof t){n=[];for(var r=t.length,i=0;i<r;i++)n.push(i)}else for(i in n=[],r=0,t)n[r++]=i;r=function(t){if(t.R&&"function"==typeof t.R)return t.R();if("string"==typeof t)return t.split("");if(f(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}for(r in e=[],n=0,t)e[n++]=t[r];return e}(t),i=r.length;for(var s=0;s<i;s++)e.call(void 0,r[s],n&&n[s],t)}}function _e(t,e){this.h={},this.g=[],this.i=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(t)if(t instanceof _e)for(n=t.T(),r=0;r<n.length;r++)this.set(n[r],t.get(n[r]));else for(r in t)this.set(r,t[r])}function Le(t){if(t.i!=t.g.length){for(var e=0,n=0;e<t.g.length;){var r=t.g[e];Pe(t.h,r)&&(t.g[n++]=r),e++}t.g.length=n}if(t.i!=t.g.length){var i={};for(n=e=0;e<t.g.length;)Pe(i,r=t.g[e])||(t.g[n++]=r,i[r]=1),e++;t.g.length=n}}function Pe(t,e){return Object.prototype.hasOwnProperty.call(t,e)}(r=me.prototype).setTimeout=function(t){this.P=t},r.gb=function(t){t=t.target;const e=this.L;e&&3==Pn(t)?e.l():this.Ia(t)},r.Ia=function(t){try{if(t==this.g)t:{const l=Pn(this.g);var e=this.g.Da();const d=this.g.ba();if(!(3>l)&&(3!=l||z||this.g&&(this.h.h||this.g.ga()||Mn(this.g)))){this.I||4!=l||7==e||Jt(8==e||0>=d?3:2),Se(this);var n=this.g.ba();this.N=n;e:if(be(this)){var r=Mn(this.g);t="";var i=r.length,s=4==Pn(this.g);if(!this.h.i){if("undefined"==typeof TextDecoder){De(this),ke(this);var o="";break e}this.h.i=new h.TextDecoder}for(e=0;e<i;e++)this.h.h=!0,t+=this.h.i.decode(r[e],{stream:s&&e==i-1});r.splice(0,i),this.h.g+=t,this.C=0,o=this.h.g}else o=this.g.ga();if(this.i=200==n,function(t,e,n,r,i,s,o){t.info((function(){return"XMLHTTP RESP ("+r+") [ attempt "+i+"]: "+e+"\n"+n+"\n"+s+" "+o}))}(this.j,this.u,this.A,this.m,this.X,l,n),this.i){if(this.$&&!this.J){e:{if(this.g){var a,c=this.g;if((a=c.g?c.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!D(a)){var u=a;break e}}u=null}if(!(n=u)){this.i=!1,this.o=3,ee(12),De(this),ke(this);break t}Gt(this.j,this.m,n,"Initial handshake response via X-HTTP-Initial-Response"),this.J=!0,Ne(this,n)}this.U?(Ee(this,l,o),z&&this.i&&3==l&&(zt(this.V,this.W,"tick",this.fb),this.W.start())):(Gt(this.j,this.m,o,null),Ne(this,o)),4==l&&De(this),this.i&&!this.I&&(4==l?Qn(this.l,this):(this.i=!1,Ie(this)))}else 400==n&&0<o.indexOf("Unknown SID")?(this.o=3,ee(12)):(this.o=0,ee(13)),De(this),ke(this)}}}catch(t){}},r.fb=function(){if(this.g){var t=Pn(this.g),e=this.g.ga();this.C<e.length&&(Se(this),Ee(this,t,e),this.i&&4!=t&&Ie(this))}},r.cancel=function(){this.I=!0,De(this)},r.eb=function(){this.B=null;const t=Date.now();0<=t-this.Y?(function(t,e){t.info((function(){return"TIMEOUT: "+e}))}(this.j,this.A),2!=this.K&&(Jt(3),ee(17)),De(this),this.o=2,ke(this)):Ce(this,this.Y-t)},(r=_e.prototype).R=function(){Le(this);for(var t=[],e=0;e<this.g.length;e++)t.push(this.h[this.g[e]]);return t},r.T=function(){return Le(this),this.g.concat()},r.get=function(t,e){return Pe(this.h,t)?this.h[t]:e},r.set=function(t,e){Pe(this.h,t)||(this.i++,this.g.push(t)),this.h[t]=e},r.forEach=function(t,e){for(var n=this.T(),r=0;r<n.length;r++){var i=n[r],s=this.get(i);t.call(e,s,i,this)}};var Me=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Re(t,e){if(this.i=this.s=this.j="",this.m=null,this.o=this.l="",this.g=!1,t instanceof Re){this.g=void 0!==e?e:t.g,Oe(this,t.j),this.s=t.s,je(this,t.i),Ue(this,t.m),this.l=t.l,e=t.h;var n=new Qe;n.i=e.i,e.g&&(n.g=new _e(e.g),n.h=e.h),Fe(this,n),this.o=t.o}else t&&(n=String(t).match(Me))?(this.g=!!e,Oe(this,n[1]||"",!0),this.s=$e(n[2]||""),je(this,n[3]||"",!0),Ue(this,n[4]),this.l=$e(n[5]||"",!0),Fe(this,n[6]||"",!0),this.o=$e(n[7]||"")):(this.g=!!e,this.h=new Qe(null,this.g))}function Be(t){return new Re(t)}function Oe(t,e,n){t.j=n?$e(e,!0):e,t.j&&(t.j=t.j.replace(/:$/,""))}function je(t,e,n){t.i=n?$e(e,!0):e}function Ue(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.m=e}else t.m=null}function Fe(t,e,n){e instanceof Qe?(t.h=e,function(t,e){e&&!t.j&&(Xe(t),t.i=null,t.g.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(Je(this,e),en(this,n,t))}),t)),t.j=e}(t.h,t.g)):(n||(e=He(e,Ye)),t.h=new Qe(e,t.g))}function Ve(t,e,n){t.h.set(e,n)}function qe(t){return Ve(t,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36)),t}function $e(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function He(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,ze),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function ze(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Re.prototype.toString=function(){var t=[],e=this.j;e&&t.push(He(e,We,!0),":");var n=this.i;return(n||"file"==e)&&(t.push("//"),(e=this.s)&&t.push(He(e,We,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.m)&&t.push(":",String(n))),(n=this.l)&&(this.i&&"/"!=n.charAt(0)&&t.push("/"),t.push(He(n,"/"==n.charAt(0)?Ge:Ke,!0))),(n=this.h.toString())&&t.push("?",n),(n=this.o)&&t.push("#",He(n,Ze)),t.join("")};var We=/[#\/\?@]/g,Ke=/[#\?:]/g,Ge=/[#\?]/g,Ye=/[#\?@]/g,Ze=/#/g;function Qe(t,e){this.h=this.g=null,this.i=t||null,this.j=!!e}function Xe(t){t.g||(t.g=new _e,t.h=0,t.i&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),i=null;if(0<=r){var s=t[n].substring(0,r);i=t[n].substring(r+1)}else s=t[n];e(s,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(t.i,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function Je(t,e){Xe(t),e=nn(t,e),Pe(t.g.h,e)&&(t.i=null,t.h-=t.g.get(e).length,Pe((t=t.g).h,e)&&(delete t.h[e],t.i--,t.g.length>2*t.i&&Le(t)))}function tn(t,e){return Xe(t),e=nn(t,e),Pe(t.g.h,e)}function en(t,e,n){Je(t,e),0<n.length&&(t.i=null,t.g.set(nn(t,e),k(n)),t.h+=n.length)}function nn(t,e){return e=String(e),t.j&&(e=e.toLowerCase()),e}function rn(t){this.l=t||sn,t=h.PerformanceNavigationTiming?0<(t=h.performance.getEntriesByType("navigation")).length&&("hq"==t[0].nextHopProtocol||"h2"==t[0].nextHopProtocol):!!(h.g&&h.g.Ea&&h.g.Ea()&&h.g.Ea().Zb),this.j=t?this.l:1,this.g=null,1<this.j&&(this.g=new Set),this.h=null,this.i=[]}(r=Qe.prototype).add=function(t,e){Xe(this),this.i=null,t=nn(this,t);var n=this.g.get(t);return n||this.g.set(t,n=[]),n.push(e),this.h+=1,this},r.forEach=function(t,e){Xe(this),this.g.forEach((function(n,r){C(n,(function(n){t.call(e,n,r,this)}),this)}),this)},r.T=function(){Xe(this);for(var t=this.g.R(),e=this.g.T(),n=[],r=0;r<e.length;r++)for(var i=t[r],s=0;s<i.length;s++)n.push(e[r]);return n},r.R=function(t){Xe(this);var e=[];if("string"==typeof t)tn(this,t)&&(e=S(e,this.g.get(nn(this,t))));else{t=this.g.R();for(var n=0;n<t.length;n++)e=S(e,t[n])}return e},r.set=function(t,e){return Xe(this),this.i=null,tn(this,t=nn(this,t))&&(this.h-=this.g.get(t).length),this.g.set(t,[e]),this.h+=1,this},r.get=function(t,e){return t&&0<(t=this.R(t)).length?String(t[0]):e},r.toString=function(){if(this.i)return this.i;if(!this.g)return"";for(var t=[],e=this.g.T(),n=0;n<e.length;n++){var r=e[n],i=encodeURIComponent(String(r));r=this.R(r);for(var s=0;s<r.length;s++){var o=i;""!==r[s]&&(o+="="+encodeURIComponent(String(r[s]))),t.push(o)}}return this.i=t.join("&")};var sn=10;function on(t){return!!t.h||!!t.g&&t.g.size>=t.j}function an(t){return t.h?1:t.g?t.g.size:0}function cn(t,e){return t.h?t.h==e:!!t.g&&t.g.has(e)}function un(t,e){t.g?t.g.add(e):t.h=e}function ln(t,e){t.h&&t.h==e?t.h=null:t.g&&t.g.has(e)&&t.g.delete(e)}function hn(t){if(null!=t.h)return t.i.concat(t.h.D);if(null!=t.g&&0!==t.g.size){let e=t.i;for(const n of t.g.values())e=e.concat(n.D);return e}return k(t.i)}function dn(){}function fn(){this.g=new dn}function mn(t,e,n){const r=n||"";try{xe(t,(function(t,n){let i=t;m(t)&&(i=Dt(t)),e.push(r+n+"="+encodeURIComponent(i))}))}catch(t){throw e.push(r+"type="+encodeURIComponent("_badmap")),t}}function pn(t,e,n,r,i){try{e.onload=null,e.onerror=null,e.onabort=null,e.ontimeout=null,i(r)}catch(t){}}function gn(t){this.l=t.$b||null,this.j=t.ib||!1}function yn(t,e){Ct.call(this),this.D=t,this.u=e,this.m=void 0,this.readyState=vn,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.v=new Headers,this.h=null,this.C="GET",this.B="",this.g=!1,this.A=this.j=this.l=null}rn.prototype.cancel=function(){if(this.i=hn(this),this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){for(const t of this.g.values())t.cancel();this.g.clear()}},dn.prototype.stringify=function(t){return h.JSON.stringify(t,void 0)},dn.prototype.parse=function(t){return h.JSON.parse(t,void 0)},b(gn,oe),gn.prototype.g=function(){return new yn(this.l,this.j)},gn.prototype.i=function(t){return function(){return t}}({}),b(yn,Ct);var vn=0;function wn(t){t.j.read().then(t.Sa.bind(t)).catch(t.ha.bind(t))}function An(t){t.readyState=4,t.l=null,t.j=null,t.A=null,bn(t)}function bn(t){t.onreadystatechange&&t.onreadystatechange.call(t)}(r=yn.prototype).open=function(t,e){if(this.readyState!=vn)throw this.abort(),Error("Error reopening a connection");this.C=t,this.B=e,this.readyState=1,bn(this)},r.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;const e={headers:this.v,method:this.C,credentials:this.m,cache:void 0};t&&(e.body=t),(this.D||h).fetch(new Request(this.B,e)).then(this.Va.bind(this),this.ha.bind(this))},r.abort=function(){this.response=this.responseText="",this.v=new Headers,this.status=0,this.j&&this.j.cancel("Request was aborted."),1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,An(this)),this.readyState=vn},r.Va=function(t){if(this.g&&(this.l=t,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=t.headers,this.readyState=2,bn(this)),this.g&&(this.readyState=3,bn(this),this.g)))if("arraybuffer"===this.responseType)t.arrayBuffer().then(this.Ta.bind(this),this.ha.bind(this));else if(void 0!==h.ReadableStream&&"body"in t){if(this.j=t.body.getReader(),this.u){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=[]}else this.response=this.responseText="",this.A=new TextDecoder;wn(this)}else t.text().then(this.Ua.bind(this),this.ha.bind(this))},r.Sa=function(t){if(this.g){if(this.u&&t.value)this.response.push(t.value);else if(!this.u){var e=t.value?t.value:new Uint8Array(0);(e=this.A.decode(e,{stream:!t.done}))&&(this.response=this.responseText+=e)}t.done?An(this):bn(this),3==this.readyState&&wn(this)}},r.Ua=function(t){this.g&&(this.response=this.responseText=t,An(this))},r.Ta=function(t){this.g&&(this.response=t,An(this))},r.ha=function(){this.g&&An(this)},r.setRequestHeader=function(t,e){this.v.append(t,e)},r.getResponseHeader=function(t){return this.h&&this.h.get(t.toLowerCase())||""},r.getAllResponseHeaders=function(){if(!this.h)return"";const t=[],e=this.h.entries();for(var n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},Object.defineProperty(yn.prototype,"withCredentials",{get:function(){return"include"===this.m},set:function(t){this.m=t?"include":"same-origin"}});var En=h.JSON.parse;function Tn(t){Ct.call(this),this.headers=new _e,this.u=t||null,this.h=!1,this.C=this.g=null,this.H="",this.m=0,this.j="",this.l=this.F=this.v=this.D=!1,this.B=0,this.A=null,this.J=In,this.K=this.L=!1}b(Tn,Ct);var In="",Cn=/^https?$/i,Sn=["POST","PUT"];function kn(t){return"content-type"==t.toLowerCase()}function Dn(t,e){t.h=!1,t.g&&(t.l=!0,t.g.abort(),t.l=!1),t.j=e,t.m=5,Nn(t),_n(t)}function Nn(t){t.D||(t.D=!0,St(t,"complete"),St(t,"error"))}function xn(t){if(t.h&&void 0!==l&&(!t.C[1]||4!=Pn(t)||2!=t.ba()))if(t.v&&4==Pn(t))Ft(t.Fa,0,t);else if(St(t,"readystatechange"),4==Pn(t)){t.h=!1;try{const a=t.ba();t:switch(a){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var e=!0;break t;default:e=!1}var n;if(!(n=e)){var r;if(r=0===a){var i=String(t.H).match(Me)[1]||null;if(!i&&h.self&&h.self.location){var s=h.self.location.protocol;i=s.substr(0,s.length-1)}r=!Cn.test(i?i.toLowerCase():"")}n=r}if(n)St(t,"complete"),St(t,"success");else{t.m=6;try{var o=2<Pn(t)?t.g.statusText:""}catch(t){o=""}t.j=o+" ["+t.ba()+"]",Nn(t)}}finally{_n(t)}}}function _n(t,e){if(t.g){Ln(t);const n=t.g,r=t.C[0]?d:null;t.g=null,t.C=null,e||St(t,"ready");try{n.onreadystatechange=r}catch(t){}}}function Ln(t){t.g&&t.K&&(t.g.ontimeout=null),t.A&&(h.clearTimeout(t.A),t.A=null)}function Pn(t){return t.g?t.g.readyState:0}function Mn(t){try{if(!t.g)return null;if("response"in t.g)return t.g.response;switch(t.J){case In:case"text":return t.g.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in t.g)return t.g.mozResponseArrayBuffer}return null}catch(t){return null}}function Rn(t,e,n){t:{for(r in n){var r=!1;break t}r=!0}r||(n=function(t){let e="";return R(t,(function(t,n){e+=n,e+=":",e+=t,e+="\r\n"})),e}(n),"string"==typeof t?null!=n&&encodeURIComponent(String(n)):Ve(t,e,n))}function Bn(t,e,n){return n&&n.internalChannelParams&&n.internalChannelParams[t]||e}function On(t){this.za=0,this.l=[],this.h=new Kt,this.la=this.oa=this.F=this.W=this.g=this.sa=this.D=this.aa=this.o=this.P=this.s=null,this.Za=this.V=0,this.Xa=Bn("failFast",!1,t),this.N=this.v=this.u=this.m=this.j=null,this.X=!0,this.I=this.ta=this.U=-1,this.Y=this.A=this.C=0,this.Pa=Bn("baseRetryDelayMs",5e3,t),this.$a=Bn("retryDelaySeedMs",1e4,t),this.Ya=Bn("forwardChannelMaxRetries",2,t),this.ra=Bn("forwardChannelRequestTimeoutMs",2e4,t),this.qa=t&&t.xmlHttpFactory||void 0,this.Ba=t&&t.Yb||!1,this.K=void 0,this.H=t&&t.supportsCrossDomainXhr||!1,this.J="",this.i=new rn(t&&t.concurrentRequestLimit),this.Ca=new fn,this.ja=t&&t.fastHandshake||!1,this.Ra=t&&t.Wb||!1,t&&t.Aa&&this.h.Aa(),t&&t.forceLongPolling&&(this.X=!1),this.$=!this.ja&&this.X&&t&&t.detectBufferingProxy||!1,this.ka=void 0,this.O=0,this.L=!1,this.B=null,this.Wa=!t||!1!==t.Xb}function jn(t){if(Fn(t),3==t.G){var e=t.V++,n=Be(t.F);Ve(n,"SID",t.J),Ve(n,"RID",e),Ve(n,"TYPE","terminate"),Hn(t,n),(e=new me(t,t.h,e,void 0)).K=2,e.v=qe(Be(n)),n=!1,h.navigator&&h.navigator.sendBeacon&&(n=h.navigator.sendBeacon(e.v.toString(),"")),!n&&h.Image&&((new Image).src=e.v,n=!0),n||(e.g=nr(e.l,null),e.g.ea(e.v)),e.F=Date.now(),Ie(e)}tr(t)}function Un(t){t.g&&(Gn(t),t.g.cancel(),t.g=null)}function Fn(t){Un(t),t.u&&(h.clearTimeout(t.u),t.u=null),Zn(t),t.i.cancel(),t.m&&("number"==typeof t.m&&h.clearTimeout(t.m),t.m=null)}function Vn(t,e){t.l.push(new class{constructor(t,e){this.h=t,this.g=e}}(t.Za++,e)),3==t.G&&qn(t)}function qn(t){on(t.i)||t.m||(t.m=!0,Mt(t.Ha,t),t.C=0)}function $n(t,e){var n;n=e?e.m:t.V++;const r=Be(t.F);Ve(r,"SID",t.J),Ve(r,"RID",n),Ve(r,"AID",t.U),Hn(t,r),t.o&&t.s&&Rn(r,t.o,t.s),n=new me(t,t.h,n,t.C+1),null===t.o&&(n.H=t.s),e&&(t.l=e.D.concat(t.l)),e=zn(t,n,1e3),n.setTimeout(Math.round(.5*t.ra)+Math.round(.5*t.ra*Math.random())),un(t.i,n),we(n,r,e)}function Hn(t,e){t.j&&xe({},(function(t,n){Ve(e,n,t)}))}function zn(t,e,n){n=Math.min(t.l.length,n);var r=t.j?w(t.j.Oa,t.j,t):null;t:{var i=t.l;let e=-1;for(;;){const t=["count="+n];-1==e?0<n?(e=i[0].h,t.push("ofs="+e)):e=0:t.push("ofs="+e);let s=!0;for(let o=0;o<n;o++){let n=i[o].h;const a=i[o].g;if(n-=e,0>n)e=Math.max(0,i[o].h-100),s=!1;else try{mn(a,t,"req"+n+"_")}catch(t){r&&r(a)}}if(s){r=t.join("&");break t}}}return t=t.l.splice(0,n),e.D=t,r}function Wn(t){t.g||t.u||(t.Y=1,Mt(t.Ga,t),t.A=0)}function Kn(t){return!(t.g||t.u||3<=t.A||(t.Y++,t.u=re(w(t.Ga,t),Xn(t,t.A)),t.A++,0))}function Gn(t){null!=t.B&&(h.clearTimeout(t.B),t.B=null)}function Yn(t){t.g=new me(t,t.h,"rpc",t.Y),null===t.o&&(t.g.H=t.s),t.g.O=0;var e=Be(t.oa);Ve(e,"RID","rpc"),Ve(e,"SID",t.J),Ve(e,"CI",t.N?"0":"1"),Ve(e,"AID",t.U),Hn(t,e),Ve(e,"TYPE","xmlhttp"),t.o&&t.s&&Rn(e,t.o,t.s),t.K&&t.g.setTimeout(t.K);var n=t.g;t=t.la,n.K=1,n.v=qe(Be(e)),n.s=null,n.U=!0,Ae(n,t)}function Zn(t){null!=t.v&&(h.clearTimeout(t.v),t.v=null)}function Qn(t,e){var n=null;if(t.g==e){Zn(t),Gn(t),t.g=null;var r=2}else{if(!cn(t.i,e))return;n=e.D,ln(t.i,e),r=1}if(t.I=e.N,0!=t.G)if(e.i)if(1==r){n=e.s?e.s.length:0,e=Date.now()-e.F;var i=t.C;St(r=Qt(),new ne(r,n,e,i)),qn(t)}else Wn(t);else if(3==(i=e.o)||0==i&&0<t.I||!(1==r&&function(t,e){return!(an(t.i)>=t.i.j-(t.m?1:0)||(t.m?(t.l=e.D.concat(t.l),0):1==t.G||2==t.G||t.C>=(t.Xa?0:t.Ya)||(t.m=re(w(t.Ha,t,e),Xn(t,t.C)),t.C++,0)))}(t,e)||2==r&&Kn(t)))switch(n&&0<n.length&&(e=t.i,e.i=e.i.concat(n)),i){case 1:Jn(t,5);break;case 4:Jn(t,10);break;case 3:Jn(t,6);break;default:Jn(t,2)}}function Xn(t,e){let n=t.Pa+Math.floor(Math.random()*t.$a);return t.j||(n*=2),n*e}function Jn(t,e){if(t.h.info("Error code "+e),2==e){var n=null;t.j&&(n=null);var r=w(t.jb,t);n||(n=new Re("//www.google.com/images/cleardot.gif"),h.location&&"http"==h.location.protocol||Oe(n,"https"),qe(n)),function(t,e){const n=new Kt;if(h.Image){const r=new Image;r.onload=A(pn,n,r,"TestLoadImage: loaded",!0,e),r.onerror=A(pn,n,r,"TestLoadImage: error",!1,e),r.onabort=A(pn,n,r,"TestLoadImage: abort",!1,e),r.ontimeout=A(pn,n,r,"TestLoadImage: timeout",!1,e),h.setTimeout((function(){r.ontimeout&&r.ontimeout()}),1e4),r.src=t}else e(!1)}(n.toString(),r)}else ee(2);t.G=0,t.j&&t.j.va(e),tr(t),Fn(t)}function tr(t){t.G=0,t.I=-1,t.j&&(0==hn(t.i).length&&0==t.l.length||(t.i.i.length=0,k(t.l),t.l.length=0),t.j.ua())}function er(t,e,n){let r=function(t){return t instanceof Re?Be(t):new Re(t,void 0)}(n);if(""!=r.i)e&&je(r,e+"."+r.i),Ue(r,r.m);else{const t=h.location;r=function(t,e,n,r){var i=new Re(null,void 0);return t&&Oe(i,t),e&&je(i,e),n&&Ue(i,n),r&&(i.l=r),i}(t.protocol,e?e+"."+t.hostname:t.hostname,+t.port,n)}return t.aa&&R(t.aa,(function(t,e){Ve(r,e,t)})),e=t.D,n=t.sa,e&&n&&Ve(r,e,n),Ve(r,"VER",t.ma),Hn(t,r),r}function nr(t,e,n){if(e&&!t.H)throw Error("Can't create secondary domain capable XhrIo object.");return(e=n&&t.Ba&&!t.qa?new Tn(new gn({ib:!0})):new Tn(t.qa)).L=t.H,e}function rr(){}function ir(){if($&&!(10<=Number(et)))throw Error("Environmental error: no available transport.")}function sr(t,e){Ct.call(this),this.g=new On(e),this.l=t,this.h=e&&e.messageUrlParams||null,t=e&&e.messageHeaders||null,e&&e.clientProtocolHeaderRequired&&(t?t["X-Client-Protocol"]="webchannel":t={"X-Client-Protocol":"webchannel"}),this.g.s=t,t=e&&e.initMessageHeaders||null,e&&e.messageContentType&&(t?t["X-WebChannel-Content-Type"]=e.messageContentType:t={"X-WebChannel-Content-Type":e.messageContentType}),e&&e.ya&&(t?t["X-WebChannel-Client-Profile"]=e.ya:t={"X-WebChannel-Client-Profile":e.ya}),this.g.P=t,(t=e&&e.httpHeadersOverwriteParam)&&!D(t)&&(this.g.o=t),this.A=e&&e.supportsCrossDomainXhr||!1,this.v=e&&e.sendRawJson||!1,(e=e&&e.httpSessionIdParam)&&!D(e)&&(this.g.D=e,null!==(t=this.h)&&e in t&&e in(t=this.h)&&delete t[e]),this.j=new cr(this)}function or(t){he.call(this);var e=t.__sm__;if(e){t:{for(const n in e){t=n;break t}t=void 0}(this.i=t)&&(t=this.i,e=null!==e&&t in e?e[t]:void 0),this.data=e}else this.data=t}function ar(){de.call(this),this.status=1}function cr(t){this.g=t}(r=Tn.prototype).ea=function(t,e,n,r){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.H+"; newUri="+t);e=e?e.toUpperCase():"GET",this.H=t,this.j="",this.m=0,this.D=!1,this.h=!0,this.g=this.u?this.u.g():ue.g(),this.C=this.u?ae(this.u):ae(ue),this.g.onreadystatechange=w(this.Fa,this);try{this.F=!0,this.g.open(e,String(t),!0),this.F=!1}catch(t){return void Dn(this,t)}t=n||"";const i=new _e(this.headers);r&&xe(r,(function(t,e){i.set(e,t)})),r=function(t){t:{var e=kn;const n=t.length,r="string"==typeof t?t.split(""):t;for(let i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t)){e=i;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(i.T()),n=h.FormData&&t instanceof h.FormData,!(0<=I(Sn,e))||r||n||i.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),i.forEach((function(t,e){this.g.setRequestHeader(e,t)}),this),this.J&&(this.g.responseType=this.J),"withCredentials"in this.g&&this.g.withCredentials!==this.L&&(this.g.withCredentials=this.L);try{Ln(this),0<this.B&&((this.K=function(t){return $&&tt()&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(this.g))?(this.g.timeout=this.B,this.g.ontimeout=w(this.pa,this)):this.A=Ft(this.pa,this.B,this)),this.v=!0,this.g.send(t),this.v=!1}catch(t){Dn(this,t)}},r.pa=function(){void 0!==l&&this.g&&(this.j="Timed out after "+this.B+"ms, aborting",this.m=8,St(this,"timeout"),this.abort(8))},r.abort=function(t){this.g&&this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1,this.m=t||7,St(this,"complete"),St(this,"abort"),_n(this))},r.M=function(){this.g&&(this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1),_n(this,!0)),Tn.Z.M.call(this)},r.Fa=function(){this.s||(this.F||this.v||this.l?xn(this):this.cb())},r.cb=function(){xn(this)},r.ba=function(){try{return 2<Pn(this)?this.g.status:-1}catch(t){return-1}},r.ga=function(){try{return this.g?this.g.responseText:""}catch(t){return""}},r.Qa=function(t){if(this.g){var e=this.g.responseText;return t&&0==e.indexOf(t)&&(e=e.substring(t.length)),En(e)}},r.Da=function(){return this.m},r.La=function(){return"string"==typeof this.j?this.j:String(this.j)},(r=On.prototype).ma=8,r.G=1,r.hb=function(t){try{this.h.info("Origin Trials invoked: "+t)}catch(t){}},r.Ha=function(t){if(this.m)if(this.m=null,1==this.G){if(!t){this.V=Math.floor(1e5*Math.random()),t=this.V++;const i=new me(this,this.h,t,void 0);let s=this.s;if(this.P&&(s?(s=B(s),j(s,this.P)):s=this.P),null===this.o&&(i.H=s),this.ja)t:{for(var e=0,n=0;n<this.l.length;n++){var r=this.l[n];if(void 0===(r="__data__"in r.g&&"string"==typeof(r=r.g.__data__)?r.length:void 0))break;if(4096<(e+=r)){e=n;break t}if(4096===e||n===this.l.length-1){e=n+1;break t}}e=1e3}else e=1e3;e=zn(this,i,e),Ve(n=Be(this.F),"RID",t),Ve(n,"CVER",22),this.D&&Ve(n,"X-HTTP-Session-Id",this.D),Hn(this,n),this.o&&s&&Rn(n,this.o,s),un(this.i,i),this.Ra&&Ve(n,"TYPE","init"),this.ja?(Ve(n,"$req",e),Ve(n,"SID","null"),i.$=!0,we(i,n,null)):we(i,n,e),this.G=2}}else 3==this.G&&(t?$n(this,t):0==this.l.length||on(this.i)||$n(this))},r.Ga=function(){if(this.u=null,Yn(this),this.$&&!(this.L||null==this.g||0>=this.O)){var t=2*this.O;this.h.info("BP detection timer enabled: "+t),this.B=re(w(this.bb,this),t)}},r.bb=function(){this.B&&(this.B=null,this.h.info("BP detection timeout reached."),this.h.info("Buffering proxy detected and switch to long-polling!"),this.N=!1,this.L=!0,ee(10),Un(this),Yn(this))},r.ab=function(){null!=this.v&&(this.v=null,Un(this),Kn(this),ee(19))},r.jb=function(t){t?(this.h.info("Successfully pinged google.com"),ee(2)):(this.h.info("Failed to ping google.com"),ee(1))},(r=rr.prototype).xa=function(){},r.wa=function(){},r.va=function(){},r.ua=function(){},r.Oa=function(){},ir.prototype.g=function(t,e){return new sr(t,e)},b(sr,Ct),sr.prototype.m=function(){this.g.j=this.j,this.A&&(this.g.H=!0);var t=this.g,e=this.l,n=this.h||void 0;t.Wa&&(t.h.info("Origin Trials enabled."),Mt(w(t.hb,t,e))),ee(0),t.W=e,t.aa=n||{},t.N=t.X,t.F=er(t,null,t.W),qn(t)},sr.prototype.close=function(){jn(this.g)},sr.prototype.u=function(t){if("string"==typeof t){var e={};e.__data__=t,Vn(this.g,e)}else this.v?((e={}).__data__=Dt(t),Vn(this.g,e)):Vn(this.g,t)},sr.prototype.M=function(){this.g.j=null,delete this.j,jn(this.g),delete this.g,sr.Z.M.call(this)},b(or,he),b(ar,de),b(cr,rr),cr.prototype.xa=function(){St(this.g,"a")},cr.prototype.wa=function(t){St(this.g,new or(t))},cr.prototype.va=function(t){St(this.g,new ar(t))},cr.prototype.ua=function(){St(this.g,"b")},ir.prototype.createWebChannel=ir.prototype.g,sr.prototype.send=sr.prototype.u,sr.prototype.open=sr.prototype.m,sr.prototype.close=sr.prototype.close,ie.NO_ERROR=0,ie.TIMEOUT=8,ie.HTTP_ERROR=6,se.COMPLETE="complete",ce.EventType=le,le.OPEN="a",le.CLOSE="b",le.ERROR="c",le.MESSAGE="d",Ct.prototype.listen=Ct.prototype.N,Tn.prototype.listenOnce=Tn.prototype.O,Tn.prototype.getLastError=Tn.prototype.La,Tn.prototype.getLastErrorCode=Tn.prototype.Da,Tn.prototype.getStatus=Tn.prototype.ba,Tn.prototype.getResponseJson=Tn.prototype.Qa,Tn.prototype.getResponseText=Tn.prototype.ga,Tn.prototype.send=Tn.prototype.ea;var ur=u.createWebChannelTransport=function(){return new ir},lr=u.getStatEventTarget=function(){return Qt()},hr=u.ErrorCode=ie,dr=u.EventType=se,fr=u.Event=Yt,mr=u.Stat={rb:0,ub:1,vb:2,Ob:3,Tb:4,Qb:5,Rb:6,Pb:7,Nb:8,Sb:9,PROXY:10,NOPROXY:11,Lb:12,Hb:13,Ib:14,Gb:15,Jb:16,Kb:17,nb:18,mb:19,ob:20},pr=u.FetchXmlHttpFactory=gn,gr=u.WebChannel=ce,yr=u.XhrIo=Tn;const vr="@firebase/firestore";class wr{constructor(t){this.uid=t}isAuthenticated(){return null!=this.uid}toKey(){return this.isAuthenticated()?"uid:"+this.uid:"anonymous-user"}isEqual(t){return t.uid===this.uid}}wr.UNAUTHENTICATED=new wr(null),wr.GOOGLE_CREDENTIALS=new wr("google-credentials-uid"),wr.FIRST_PARTY=new wr("first-party-uid"),wr.MOCK_USER=new wr("mock-user");let Ar="9.2.0";const br=new o.Yd("@firebase/firestore");function Er(){return br.logLevel}function Tr(t,...e){if(br.logLevel<=o.in.DEBUG){const n=e.map(Sr);br.debug(`Firestore (${Ar}): ${t}`,...n)}}function Ir(t,...e){if(br.logLevel<=o.in.ERROR){const n=e.map(Sr);br.error(`Firestore (${Ar}): ${t}`,...n)}}function Cr(t,...e){if(br.logLevel<=o.in.WARN){const n=e.map(Sr);br.warn(`Firestore (${Ar}): ${t}`,...n)}}function Sr(t){if("string"==typeof t)return t;try{return e=t,JSON.stringify(e)}catch(e){return t}var e}function kr(t="Unexpected state"){const e=`FIRESTORE (${Ar}) INTERNAL ASSERTION FAILED: `+t;throw Ir(e),new Error(e)}function Dr(t,e){t||kr()}function Nr(t,e){return t}const xr={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"};class _r extends Error{constructor(t,e){super(e),this.code=t,this.message=e,this.name="FirebaseError",this.toString=()=>`${this.name}: [code=${this.code}]: ${this.message}`}}class Lr{constructor(){this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}}class Pr{constructor(t,e){this.user=e,this.type="OAuth",this.authHeaders={},this.authHeaders.Authorization=`Bearer ${t}`}}class Mr{getToken(){return Promise.resolve(null)}invalidateToken(){}start(t,e){t.enqueueRetryable((()=>e(wr.UNAUTHENTICATED)))}shutdown(){}}class Rr{constructor(t){this.t=t,this.currentUser=wr.UNAUTHENTICATED,this.i=0,this.forceRefresh=!1,this.auth=null}start(t,e){let n=this.i;const r=t=>this.i!==n?(n=this.i,e(t)):Promise.resolve();let i=new Lr;this.o=()=>{this.i++,this.currentUser=this.u(),i.resolve(),i=new Lr,t.enqueueRetryable((()=>r(this.currentUser)))};const s=()=>{const e=i;t.enqueueRetryable((async()=>{await e.promise,await r(this.currentUser)}))},o=t=>{Tr("FirebaseCredentialsProvider","Auth detected"),this.auth=t,this.auth.addAuthTokenListener(this.o),s()};this.t.onInit((t=>o(t))),setTimeout((()=>{if(!this.auth){const t=this.t.getImmediate({optional:!0});t?o(t):(Tr("FirebaseCredentialsProvider","Auth not yet detected"),i.resolve(),i=new Lr)}}),0),s()}getToken(){const t=this.i,e=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(e).then((e=>this.i!==t?(Tr("FirebaseCredentialsProvider","getToken aborted due to token change."),this.getToken()):e?(Dr("string"==typeof e.accessToken),new Pr(e.accessToken,this.currentUser)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.auth&&this.auth.removeAuthTokenListener(this.o)}u(){const t=this.auth&&this.auth.getUid();return Dr(null===t||"string"==typeof t),new wr(t)}}class Br{constructor(t,e,n){this.h=t,this.l=e,this.m=n,this.type="FirstParty",this.user=wr.FIRST_PARTY}get authHeaders(){const t={"X-Goog-AuthUser":this.l},e=this.h.auth.getAuthHeaderValueForFirstParty([]);return e&&(t.Authorization=e),this.m&&(t["X-Goog-Iam-Authorization-Token"]=this.m),t}}class Or{constructor(t,e,n){this.h=t,this.l=e,this.m=n}getToken(){return Promise.resolve(new Br(this.h,this.l,this.m))}start(t,e){t.enqueueRetryable((()=>e(wr.FIRST_PARTY)))}shutdown(){}invalidateToken(){}}class jr{constructor(t,e){this.previousValue=t,e&&(e.sequenceNumberHandler=t=>this.g(t),this.p=t=>e.writeSequenceNumber(t))}g(t){return this.previousValue=Math.max(t,this.previousValue),this.previousValue}next(){const t=++this.previousValue;return this.p&&this.p(t),t}}function Ur(t){const e="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(t);if(e&&"function"==typeof e.getRandomValues)e.getRandomValues(n);else for(let e=0;e<t;e++)n[e]=Math.floor(256*Math.random());return n}jr.T=-1;class Fr{static I(){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",e=Math.floor(256/t.length)*t.length;let n="";for(;n.length<20;){const r=Ur(40);for(let i=0;i<r.length;++i)n.length<20&&r[i]<e&&(n+=t.charAt(r[i]%t.length))}return n}}function Vr(t,e){return t<e?-1:t>e?1:0}function qr(t,e,n){return t.length===e.length&&t.every(((t,r)=>n(t,e[r])))}class $r{constructor(t,e){if(this.seconds=t,this.nanoseconds=e,e<0)throw new _r(xr.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(e>=1e9)throw new _r(xr.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(t<-62135596800)throw new _r(xr.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t);if(t>=253402300800)throw new _r(xr.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t)}static now(){return $r.fromMillis(Date.now())}static fromDate(t){return $r.fromMillis(t.getTime())}static fromMillis(t){const e=Math.floor(t/1e3),n=Math.floor(1e6*(t-1e3*e));return new $r(e,n)}toDate(){return new Date(this.toMillis())}toMillis(){return 1e3*this.seconds+this.nanoseconds/1e6}_compareTo(t){return this.seconds===t.seconds?Vr(this.nanoseconds,t.nanoseconds):Vr(this.seconds,t.seconds)}isEqual(t){return t.seconds===this.seconds&&t.nanoseconds===this.nanoseconds}toString(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"}toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}}valueOf(){const t=this.seconds- -62135596800;return String(t).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")}}class Hr{constructor(t){this.timestamp=t}static fromTimestamp(t){return new Hr(t)}static min(){return new Hr(new $r(0,0))}compareTo(t){return this.timestamp._compareTo(t.timestamp)}isEqual(t){return this.timestamp.isEqual(t.timestamp)}toMicroseconds(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3}toString(){return"SnapshotVersion("+this.timestamp.toString()+")"}toTimestamp(){return this.timestamp}}function zr(t){let e=0;for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e++;return e}function Wr(t,e){for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])}function Kr(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}class Gr{constructor(t,e,n){void 0===e?e=0:e>t.length&&kr(),void 0===n?n=t.length-e:n>t.length-e&&kr(),this.segments=t,this.offset=e,this.len=n}get length(){return this.len}isEqual(t){return 0===Gr.comparator(this,t)}child(t){const e=this.segments.slice(this.offset,this.limit());return t instanceof Gr?t.forEach((t=>{e.push(t)})):e.push(t),this.construct(e)}limit(){return this.offset+this.length}popFirst(t){return t=void 0===t?1:t,this.construct(this.segments,this.offset+t,this.length-t)}popLast(){return this.construct(this.segments,this.offset,this.length-1)}firstSegment(){return this.segments[this.offset]}lastSegment(){return this.get(this.length-1)}get(t){return this.segments[this.offset+t]}isEmpty(){return 0===this.length}isPrefixOf(t){if(t.length<this.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}isImmediateParentOf(t){if(this.length+1!==t.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}forEach(t){for(let e=this.offset,n=this.limit();e<n;e++)t(this.segments[e])}toArray(){return this.segments.slice(this.offset,this.limit())}static comparator(t,e){const n=Math.min(t.length,e.length);for(let r=0;r<n;r++){const n=t.get(r),i=e.get(r);if(n<i)return-1;if(n>i)return 1}return t.length<e.length?-1:t.length>e.length?1:0}}class Yr extends Gr{construct(t,e,n){return new Yr(t,e,n)}canonicalString(){return this.toArray().join("/")}toString(){return this.canonicalString()}static fromString(...t){const e=[];for(const n of t){if(n.indexOf("//")>=0)throw new _r(xr.INVALID_ARGUMENT,`Invalid segment (${n}). Paths must not contain // in them.`);e.push(...n.split("/").filter((t=>t.length>0)))}return new Yr(e)}static emptyPath(){return new Yr([])}}const Zr=/^[_a-zA-Z][_a-zA-Z0-9]*$/;class Qr extends Gr{construct(t,e,n){return new Qr(t,e,n)}static isValidIdentifier(t){return Zr.test(t)}canonicalString(){return this.toArray().map((t=>(t=t.replace(/\\/g,"\\\\").replace(/`/g,"\\`"),Qr.isValidIdentifier(t)||(t="`"+t+"`"),t))).join(".")}toString(){return this.canonicalString()}isKeyField(){return 1===this.length&&"__name__"===this.get(0)}static keyField(){return new Qr(["__name__"])}static fromServerFormat(t){const e=[];let n="",r=0;const i=()=>{if(0===n.length)throw new _r(xr.INVALID_ARGUMENT,`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);e.push(n),n=""};let s=!1;for(;r<t.length;){const e=t[r];if("\\"===e){if(r+1===t.length)throw new _r(xr.INVALID_ARGUMENT,"Path has trailing escape character: "+t);const e=t[r+1];if("\\"!==e&&"."!==e&&"`"!==e)throw new _r(xr.INVALID_ARGUMENT,"Path has invalid escape sequence: "+t);n+=e,r+=2}else"`"===e?(s=!s,r++):"."!==e||s?(n+=e,r++):(i(),r++)}if(i(),s)throw new _r(xr.INVALID_ARGUMENT,"Unterminated ` in path: "+t);return new Qr(e)}static emptyPath(){return new Qr([])}}class Xr{constructor(t){this.fields=t,t.sort(Qr.comparator)}covers(t){for(const e of this.fields)if(e.isPrefixOf(t))return!0;return!1}isEqual(t){return qr(this.fields,t.fields,((t,e)=>t.isEqual(e)))}}class Jr{constructor(t){this.binaryString=t}static fromBase64String(t){const e=atob(t);return new Jr(e)}static fromUint8Array(t){const e=function(t){let e="";for(let n=0;n<t.length;++n)e+=String.fromCharCode(t[n]);return e}(t);return new Jr(e)}toBase64(){return t=this.binaryString,btoa(t);var t}toUint8Array(){return function(t){const e=new Uint8Array(t.length);for(let n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}(this.binaryString)}approximateByteSize(){return 2*this.binaryString.length}compareTo(t){return Vr(this.binaryString,t.binaryString)}isEqual(t){return this.binaryString===t.binaryString}}Jr.EMPTY_BYTE_STRING=new Jr("");const ti=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function ei(t){if(Dr(!!t),"string"==typeof t){let e=0;const n=ti.exec(t);if(Dr(!!n),n[1]){let t=n[1];t=(t+"000000000").substr(0,9),e=Number(t)}const r=new Date(t);return{seconds:Math.floor(r.getTime()/1e3),nanos:e}}return{seconds:ni(t.seconds),nanos:ni(t.nanos)}}function ni(t){return"number"==typeof t?t:"string"==typeof t?Number(t):0}function ri(t){return"string"==typeof t?Jr.fromBase64String(t):Jr.fromUint8Array(t)}function ii(t){var e,n;return"server_timestamp"===(null===(n=((null===(e=null==t?void 0:t.mapValue)||void 0===e?void 0:e.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}function si(t){const e=t.mapValue.fields.__previous_value__;return ii(e)?si(e):e}function oi(t){const e=ei(t.mapValue.fields.__local_write_time__.timestampValue);return new $r(e.seconds,e.nanos)}function ai(t){return null==t}function ci(t){return 0===t&&1/t==-1/0}class ui{constructor(t){this.path=t}static fromPath(t){return new ui(Yr.fromString(t))}static fromName(t){return new ui(Yr.fromString(t).popFirst(5))}hasCollectionId(t){return this.path.length>=2&&this.path.get(this.path.length-2)===t}isEqual(t){return null!==t&&0===Yr.comparator(this.path,t.path)}toString(){return this.path.toString()}static comparator(t,e){return Yr.comparator(t.path,e.path)}static isDocumentKey(t){return t.length%2==0}static fromSegments(t){return new ui(new Yr(t.slice()))}}function li(t){return"nullValue"in t?0:"booleanValue"in t?1:"integerValue"in t||"doubleValue"in t?2:"timestampValue"in t?3:"stringValue"in t?5:"bytesValue"in t?6:"referenceValue"in t?7:"geoPointValue"in t?8:"arrayValue"in t?9:"mapValue"in t?ii(t)?4:10:kr()}function hi(t,e){const n=li(t);if(n!==li(e))return!1;switch(n){case 0:return!0;case 1:return t.booleanValue===e.booleanValue;case 4:return oi(t).isEqual(oi(e));case 3:return function(t,e){if("string"==typeof t.timestampValue&&"string"==typeof e.timestampValue&&t.timestampValue.length===e.timestampValue.length)return t.timestampValue===e.timestampValue;const n=ei(t.timestampValue),r=ei(e.timestampValue);return n.seconds===r.seconds&&n.nanos===r.nanos}(t,e);case 5:return t.stringValue===e.stringValue;case 6:return function(t,e){return ri(t.bytesValue).isEqual(ri(e.bytesValue))}(t,e);case 7:return t.referenceValue===e.referenceValue;case 8:return function(t,e){return ni(t.geoPointValue.latitude)===ni(e.geoPointValue.latitude)&&ni(t.geoPointValue.longitude)===ni(e.geoPointValue.longitude)}(t,e);case 2:return function(t,e){if("integerValue"in t&&"integerValue"in e)return ni(t.integerValue)===ni(e.integerValue);if("doubleValue"in t&&"doubleValue"in e){const n=ni(t.doubleValue),r=ni(e.doubleValue);return n===r?ci(n)===ci(r):isNaN(n)&&isNaN(r)}return!1}(t,e);case 9:return qr(t.arrayValue.values||[],e.arrayValue.values||[],hi);case 10:return function(t,e){const n=t.mapValue.fields||{},r=e.mapValue.fields||{};if(zr(n)!==zr(r))return!1;for(const t in n)if(n.hasOwnProperty(t)&&(void 0===r[t]||!hi(n[t],r[t])))return!1;return!0}(t,e);default:return kr()}}function di(t,e){return void 0!==(t.values||[]).find((t=>hi(t,e)))}function fi(t,e){const n=li(t),r=li(e);if(n!==r)return Vr(n,r);switch(n){case 0:return 0;case 1:return Vr(t.booleanValue,e.booleanValue);case 2:return function(t,e){const n=ni(t.integerValue||t.doubleValue),r=ni(e.integerValue||e.doubleValue);return n<r?-1:n>r?1:n===r?0:isNaN(n)?isNaN(r)?0:-1:1}(t,e);case 3:return mi(t.timestampValue,e.timestampValue);case 4:return mi(oi(t),oi(e));case 5:return Vr(t.stringValue,e.stringValue);case 6:return function(t,e){const n=ri(t),r=ri(e);return n.compareTo(r)}(t.bytesValue,e.bytesValue);case 7:return function(t,e){const n=t.split("/"),r=e.split("/");for(let t=0;t<n.length&&t<r.length;t++){const e=Vr(n[t],r[t]);if(0!==e)return e}return Vr(n.length,r.length)}(t.referenceValue,e.referenceValue);case 8:return function(t,e){const n=Vr(ni(t.latitude),ni(e.latitude));return 0!==n?n:Vr(ni(t.longitude),ni(e.longitude))}(t.geoPointValue,e.geoPointValue);case 9:return function(t,e){const n=t.values||[],r=e.values||[];for(let t=0;t<n.length&&t<r.length;++t){const e=fi(n[t],r[t]);if(e)return e}return Vr(n.length,r.length)}(t.arrayValue,e.arrayValue);case 10:return function(t,e){const n=t.fields||{},r=Object.keys(n),i=e.fields||{},s=Object.keys(i);r.sort(),s.sort();for(let t=0;t<r.length&&t<s.length;++t){const e=Vr(r[t],s[t]);if(0!==e)return e;const o=fi(n[r[t]],i[s[t]]);if(0!==o)return o}return Vr(r.length,s.length)}(t.mapValue,e.mapValue);default:throw kr()}}function mi(t,e){if("string"==typeof t&&"string"==typeof e&&t.length===e.length)return Vr(t,e);const n=ei(t),r=ei(e),i=Vr(n.seconds,r.seconds);return 0!==i?i:Vr(n.nanos,r.nanos)}function pi(t){return gi(t)}function gi(t){return"nullValue"in t?"null":"booleanValue"in t?""+t.booleanValue:"integerValue"in t?""+t.integerValue:"doubleValue"in t?""+t.doubleValue:"timestampValue"in t?function(t){const e=ei(t);return`time(${e.seconds},${e.nanos})`}(t.timestampValue):"stringValue"in t?t.stringValue:"bytesValue"in t?ri(t.bytesValue).toBase64():"referenceValue"in t?(n=t.referenceValue,ui.fromName(n).toString()):"geoPointValue"in t?`geo(${(e=t.geoPointValue).latitude},${e.longitude})`:"arrayValue"in t?function(t){let e="[",n=!0;for(const r of t.values||[])n?n=!1:e+=",",e+=gi(r);return e+"]"}(t.arrayValue):"mapValue"in t?function(t){const e=Object.keys(t.fields||{}).sort();let n="{",r=!0;for(const i of e)r?r=!1:n+=",",n+=`${i}:${gi(t.fields[i])}`;return n+"}"}(t.mapValue):kr();var e,n}function yi(t){return!!t&&"integerValue"in t}function vi(t){return!!t&&"arrayValue"in t}function wi(t){return!!t&&"nullValue"in t}function Ai(t){return!!t&&"doubleValue"in t&&isNaN(Number(t.doubleValue))}function bi(t){return!!t&&"mapValue"in t}function Ei(t){if(t.geoPointValue)return{geoPointValue:Object.assign({},t.geoPointValue)};if(t.timestampValue&&"object"==typeof t.timestampValue)return{timestampValue:Object.assign({},t.timestampValue)};if(t.mapValue){const e={mapValue:{fields:{}}};return Wr(t.mapValue.fields,((t,n)=>e.mapValue.fields[t]=Ei(n))),e}if(t.arrayValue){const e={arrayValue:{values:[]}};for(let n=0;n<(t.arrayValue.values||[]).length;++n)e.arrayValue.values[n]=Ei(t.arrayValue.values[n]);return e}return Object.assign({},t)}class Ti{constructor(t){this.value=t}static empty(){return new Ti({mapValue:{}})}field(t){if(t.isEmpty())return this.value;{let e=this.value;for(let n=0;n<t.length-1;++n)if(e=(e.mapValue.fields||{})[t.get(n)],!bi(e))return null;return e=(e.mapValue.fields||{})[t.lastSegment()],e||null}}set(t,e){this.getFieldsMap(t.popLast())[t.lastSegment()]=Ei(e)}setAll(t){let e=Qr.emptyPath(),n={},r=[];t.forEach(((t,i)=>{if(!e.isImmediateParentOf(i)){const t=this.getFieldsMap(e);this.applyChanges(t,n,r),n={},r=[],e=i.popLast()}t?n[i.lastSegment()]=Ei(t):r.push(i.lastSegment())}));const i=this.getFieldsMap(e);this.applyChanges(i,n,r)}delete(t){const e=this.field(t.popLast());bi(e)&&e.mapValue.fields&&delete e.mapValue.fields[t.lastSegment()]}isEqual(t){return hi(this.value,t.value)}getFieldsMap(t){let e=this.value;e.mapValue.fields||(e.mapValue={fields:{}});for(let n=0;n<t.length;++n){let r=e.mapValue.fields[t.get(n)];bi(r)&&r.mapValue.fields||(r={mapValue:{fields:{}}},e.mapValue.fields[t.get(n)]=r),e=r}return e.mapValue.fields}applyChanges(t,e,n){Wr(e,((e,n)=>t[e]=n));for(const e of n)delete t[e]}clone(){return new Ti(Ei(this.value))}}function Ii(t){const e=[];return Wr(t.fields,((t,n)=>{const r=new Qr([t]);if(bi(n)){const t=Ii(n.mapValue).fields;if(0===t.length)e.push(r);else for(const n of t)e.push(r.child(n))}else e.push(r)})),new Xr(e)}class Ci{constructor(t,e,n,r,i){this.key=t,this.documentType=e,this.version=n,this.data=r,this.documentState=i}static newInvalidDocument(t){return new Ci(t,0,Hr.min(),Ti.empty(),0)}static newFoundDocument(t,e,n){return new Ci(t,1,e,n,0)}static newNoDocument(t,e){return new Ci(t,2,e,Ti.empty(),0)}static newUnknownDocument(t,e){return new Ci(t,3,e,Ti.empty(),2)}convertToFoundDocument(t,e){return this.version=t,this.documentType=1,this.data=e,this.documentState=0,this}convertToNoDocument(t){return this.version=t,this.documentType=2,this.data=Ti.empty(),this.documentState=0,this}convertToUnknownDocument(t){return this.version=t,this.documentType=3,this.data=Ti.empty(),this.documentState=2,this}setHasCommittedMutations(){return this.documentState=2,this}setHasLocalMutations(){return this.documentState=1,this}get hasLocalMutations(){return 1===this.documentState}get hasCommittedMutations(){return 2===this.documentState}get hasPendingWrites(){return this.hasLocalMutations||this.hasCommittedMutations}isValidDocument(){return 0!==this.documentType}isFoundDocument(){return 1===this.documentType}isNoDocument(){return 2===this.documentType}isUnknownDocument(){return 3===this.documentType}isEqual(t){return t instanceof Ci&&this.key.isEqual(t.key)&&this.version.isEqual(t.version)&&this.documentType===t.documentType&&this.documentState===t.documentState&&this.data.isEqual(t.data)}clone(){return new Ci(this.key,this.documentType,this.version,this.data.clone(),this.documentState)}toString(){return`Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`}}class Si{constructor(t,e=null,n=[],r=[],i=null,s=null,o=null){this.path=t,this.collectionGroup=e,this.orderBy=n,this.filters=r,this.limit=i,this.startAt=s,this.endAt=o,this.A=null}}function ki(t,e=null,n=[],r=[],i=null,s=null,o=null){return new Si(t,e,n,r,i,s,o)}function Di(t){const e=Nr(t);if(null===e.A){let t=e.path.canonicalString();null!==e.collectionGroup&&(t+="|cg:"+e.collectionGroup),t+="|f:",t+=e.filters.map((t=>function(t){return t.field.canonicalString()+t.op.toString()+pi(t.value)}(t))).join(","),t+="|ob:",t+=e.orderBy.map((t=>function(t){return t.field.canonicalString()+t.dir}(t))).join(","),ai(e.limit)||(t+="|l:",t+=e.limit),e.startAt&&(t+="|lb:",t+=Vi(e.startAt)),e.endAt&&(t+="|ub:",t+=Vi(e.endAt)),e.A=t}return e.A}function Ni(t,e){if(t.limit!==e.limit)return!1;if(t.orderBy.length!==e.orderBy.length)return!1;for(let n=0;n<t.orderBy.length;n++)if(!$i(t.orderBy[n],e.orderBy[n]))return!1;if(t.filters.length!==e.filters.length)return!1;for(let i=0;i<t.filters.length;i++)if(n=t.filters[i],r=e.filters[i],n.op!==r.op||!n.field.isEqual(r.field)||!hi(n.value,r.value))return!1;var n,r;return t.collectionGroup===e.collectionGroup&&!!t.path.isEqual(e.path)&&!!zi(t.startAt,e.startAt)&&zi(t.endAt,e.endAt)}function xi(t){return ui.isDocumentKey(t.path)&&null===t.collectionGroup&&0===t.filters.length}class _i extends class{}{constructor(t,e,n){super(),this.field=t,this.op=e,this.value=n}static create(t,e,n){return t.isKeyField()?"in"===e||"not-in"===e?this.R(t,e,n):new Li(t,e,n):"array-contains"===e?new Bi(t,n):"in"===e?new Oi(t,n):"not-in"===e?new ji(t,n):"array-contains-any"===e?new Ui(t,n):new _i(t,e,n)}static R(t,e,n){return"in"===e?new Pi(t,n):new Mi(t,n)}matches(t){const e=t.data.field(this.field);return"!="===this.op?null!==e&&this.P(fi(e,this.value)):null!==e&&li(this.value)===li(e)&&this.P(fi(e,this.value))}P(t){switch(this.op){case"<":return t<0;case"<=":return t<=0;case"==":return 0===t;case"!=":return 0!==t;case">":return t>0;case">=":return t>=0;default:return kr()}}v(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0}}class Li extends _i{constructor(t,e,n){super(t,e,n),this.key=ui.fromName(n.referenceValue)}matches(t){const e=ui.comparator(t.key,this.key);return this.P(e)}}class Pi extends _i{constructor(t,e){super(t,"in",e),this.keys=Ri(0,e)}matches(t){return this.keys.some((e=>e.isEqual(t.key)))}}class Mi extends _i{constructor(t,e){super(t,"not-in",e),this.keys=Ri(0,e)}matches(t){return!this.keys.some((e=>e.isEqual(t.key)))}}function Ri(t,e){var n;return((null===(n=e.arrayValue)||void 0===n?void 0:n.values)||[]).map((t=>ui.fromName(t.referenceValue)))}class Bi extends _i{constructor(t,e){super(t,"array-contains",e)}matches(t){const e=t.data.field(this.field);return vi(e)&&di(e.arrayValue,this.value)}}class Oi extends _i{constructor(t,e){super(t,"in",e)}matches(t){const e=t.data.field(this.field);return null!==e&&di(this.value.arrayValue,e)}}class ji extends _i{constructor(t,e){super(t,"not-in",e)}matches(t){if(di(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;const e=t.data.field(this.field);return null!==e&&!di(this.value.arrayValue,e)}}class Ui extends _i{constructor(t,e){super(t,"array-contains-any",e)}matches(t){const e=t.data.field(this.field);return!(!vi(e)||!e.arrayValue.values)&&e.arrayValue.values.some((t=>di(this.value.arrayValue,t)))}}class Fi{constructor(t,e){this.position=t,this.before=e}}function Vi(t){return`${t.before?"b":"a"}:${t.position.map((t=>pi(t))).join(",")}`}class qi{constructor(t,e="asc"){this.field=t,this.dir=e}}function $i(t,e){return t.dir===e.dir&&t.field.isEqual(e.field)}function Hi(t,e,n){let r=0;for(let i=0;i<t.position.length;i++){const s=e[i],o=t.position[i];if(r=s.field.isKeyField()?ui.comparator(ui.fromName(o.referenceValue),n.key):fi(o,n.data.field(s.field)),"desc"===s.dir&&(r*=-1),0!==r)break}return t.before?r<=0:r<0}function zi(t,e){if(null===t)return null===e;if(null===e)return!1;if(t.before!==e.before||t.position.length!==e.position.length)return!1;for(let n=0;n<t.position.length;n++)if(!hi(t.position[n],e.position[n]))return!1;return!0}class Wi{constructor(t,e=null,n=[],r=[],i=null,s="F",o=null,a=null){this.path=t,this.collectionGroup=e,this.explicitOrderBy=n,this.filters=r,this.limit=i,this.limitType=s,this.startAt=o,this.endAt=a,this.V=null,this.S=null,this.startAt,this.endAt}}function Ki(t){return new Wi(t)}function Gi(t){return!ai(t.limit)&&"F"===t.limitType}function Yi(t){return!ai(t.limit)&&"L"===t.limitType}function Zi(t){const e=Nr(t);if(null===e.V){e.V=[];const t=function(t){for(const e of t.filters)if(e.v())return e.field;return null}(e),n=function(t){return t.explicitOrderBy.length>0?t.explicitOrderBy[0].field:null}(e);if(null!==t&&null===n)t.isKeyField()||e.V.push(new qi(t)),e.V.push(new qi(Qr.keyField(),"asc"));else{let t=!1;for(const n of e.explicitOrderBy)e.V.push(n),n.field.isKeyField()&&(t=!0);if(!t){const t=e.explicitOrderBy.length>0?e.explicitOrderBy[e.explicitOrderBy.length-1].dir:"asc";e.V.push(new qi(Qr.keyField(),t))}}}return e.V}function Qi(t){const e=Nr(t);if(!e.S)if("F"===e.limitType)e.S=ki(e.path,e.collectionGroup,Zi(e),e.filters,e.limit,e.startAt,e.endAt);else{const t=[];for(const n of Zi(e)){const e="desc"===n.dir?"asc":"desc";t.push(new qi(n.field,e))}const n=e.endAt?new Fi(e.endAt.position,!e.endAt.before):null,r=e.startAt?new Fi(e.startAt.position,!e.startAt.before):null;e.S=ki(e.path,e.collectionGroup,t,e.filters,e.limit,n,r)}return e.S}function Xi(t,e){return Ni(Qi(t),Qi(e))&&t.limitType===e.limitType}function Ji(t){return`${Di(Qi(t))}|lt:${t.limitType}`}function ts(t){return`Query(target=${function(t){let e=t.path.canonicalString();return null!==t.collectionGroup&&(e+=" collectionGroup="+t.collectionGroup),t.filters.length>0&&(e+=`, filters: [${t.filters.map((t=>{return`${(e=t).field.canonicalString()} ${e.op} ${pi(e.value)}`;var e})).join(", ")}]`),ai(t.limit)||(e+=", limit: "+t.limit),t.orderBy.length>0&&(e+=`, orderBy: [${t.orderBy.map((t=>function(t){return`${t.field.canonicalString()} (${t.dir})`}(t))).join(", ")}]`),t.startAt&&(e+=", startAt: "+Vi(t.startAt)),t.endAt&&(e+=", endAt: "+Vi(t.endAt)),`Target(${e})`}(Qi(t))}; limitType=${t.limitType})`}function es(t,e){return e.isFoundDocument()&&function(t,e){const n=e.key.path;return null!==t.collectionGroup?e.key.hasCollectionId(t.collectionGroup)&&t.path.isPrefixOf(n):ui.isDocumentKey(t.path)?t.path.isEqual(n):t.path.isImmediateParentOf(n)}(t,e)&&function(t,e){for(const n of t.explicitOrderBy)if(!n.field.isKeyField()&&null===e.data.field(n.field))return!1;return!0}(t,e)&&function(t,e){for(const n of t.filters)if(!n.matches(e))return!1;return!0}(t,e)&&function(t,e){return!(t.startAt&&!Hi(t.startAt,Zi(t),e)||t.endAt&&Hi(t.endAt,Zi(t),e))}(t,e)}function ns(t){return(e,n)=>{let r=!1;for(const i of Zi(t)){const t=rs(i,e,n);if(0!==t)return t;r=r||i.field.isKeyField()}return 0}}function rs(t,e,n){const r=t.field.isKeyField()?ui.comparator(e.key,n.key):function(t,e,n){const r=e.data.field(t),i=n.data.field(t);return null!==r&&null!==i?fi(r,i):kr()}(t.field,e,n);switch(t.dir){case"asc":return r;case"desc":return-1*r;default:return kr()}}function is(t,e){if(t.D){if(isNaN(e))return{doubleValue:"NaN"};if(e===1/0)return{doubleValue:"Infinity"};if(e===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:ci(e)?"-0":e}}function ss(t){return{integerValue:""+t}}function os(t,e){return function(t){return"number"==typeof t&&Number.isInteger(t)&&!ci(t)&&t<=Number.MAX_SAFE_INTEGER&&t>=Number.MIN_SAFE_INTEGER}(e)?ss(e):is(t,e)}class as{constructor(){this._=void 0}}function cs(t,e,n){return t instanceof hs?function(t,e){const n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:t.seconds,nanos:t.nanoseconds}}}};return e&&(n.fields.__previous_value__=e),{mapValue:n}}(n,e):t instanceof ds?fs(t,e):t instanceof ms?ps(t,e):function(t,e){const n=ls(t,e),r=ys(n)+ys(t.C);return yi(n)&&yi(t.C)?ss(r):is(t.N,r)}(t,e)}function us(t,e,n){return t instanceof ds?fs(t,e):t instanceof ms?ps(t,e):n}function ls(t,e){return t instanceof gs?yi(n=e)||function(t){return!!t&&"doubleValue"in t}(n)?e:{integerValue:0}:null;var n}class hs extends as{}class ds extends as{constructor(t){super(),this.elements=t}}function fs(t,e){const n=vs(e);for(const e of t.elements)n.some((t=>hi(t,e)))||n.push(e);return{arrayValue:{values:n}}}class ms extends as{constructor(t){super(),this.elements=t}}function ps(t,e){let n=vs(e);for(const e of t.elements)n=n.filter((t=>!hi(t,e)));return{arrayValue:{values:n}}}class gs extends as{constructor(t,e){super(),this.N=t,this.C=e}}function ys(t){return ni(t.integerValue||t.doubleValue)}function vs(t){return vi(t)&&t.arrayValue.values?t.arrayValue.values.slice():[]}class ws{constructor(t,e){this.version=t,this.transformResults=e}}class As{constructor(t,e){this.updateTime=t,this.exists=e}static none(){return new As}static exists(t){return new As(void 0,t)}static updateTime(t){return new As(t)}get isNone(){return void 0===this.updateTime&&void 0===this.exists}isEqual(t){return this.exists===t.exists&&(this.updateTime?!!t.updateTime&&this.updateTime.isEqual(t.updateTime):!t.updateTime)}}function bs(t,e){return void 0!==t.updateTime?e.isFoundDocument()&&e.version.isEqual(t.updateTime):void 0===t.exists||t.exists===e.isFoundDocument()}class Es{}function Ts(t,e,n){t instanceof Ds?function(t,e,n){const r=t.value.clone(),i=_s(t.fieldTransforms,e,n.transformResults);r.setAll(i),e.convertToFoundDocument(n.version,r).setHasCommittedMutations()}(t,e,n):t instanceof Ns?function(t,e,n){if(!bs(t.precondition,e))return void e.convertToUnknownDocument(n.version);const r=_s(t.fieldTransforms,e,n.transformResults),i=e.data;i.setAll(xs(t)),i.setAll(r),e.convertToFoundDocument(n.version,i).setHasCommittedMutations()}(t,e,n):function(t,e,n){e.convertToNoDocument(n.version).setHasCommittedMutations()}(0,e,n)}function Is(t,e,n){t instanceof Ds?function(t,e,n){if(!bs(t.precondition,e))return;const r=t.value.clone(),i=Ls(t.fieldTransforms,n,e);r.setAll(i),e.convertToFoundDocument(ks(e),r).setHasLocalMutations()}(t,e,n):t instanceof Ns?function(t,e,n){if(!bs(t.precondition,e))return;const r=Ls(t.fieldTransforms,n,e),i=e.data;i.setAll(xs(t)),i.setAll(r),e.convertToFoundDocument(ks(e),i).setHasLocalMutations()}(t,e,n):function(t,e){bs(t.precondition,e)&&e.convertToNoDocument(Hr.min())}(t,e)}function Cs(t,e){let n=null;for(const r of t.fieldTransforms){const t=e.data.field(r.field),i=ls(r.transform,t||null);null!=i&&(null==n&&(n=Ti.empty()),n.set(r.field,i))}return n||null}function Ss(t,e){return t.type===e.type&&!!t.key.isEqual(e.key)&&!!t.precondition.isEqual(e.precondition)&&!!function(t,e){return void 0===t&&void 0===e||!(!t||!e)&&qr(t,e,((t,e)=>function(t,e){return t.field.isEqual(e.field)&&function(t,e){return t instanceof ds&&e instanceof ds||t instanceof ms&&e instanceof ms?qr(t.elements,e.elements,hi):t instanceof gs&&e instanceof gs?hi(t.C,e.C):t instanceof hs&&e instanceof hs}(t.transform,e.transform)}(t,e)))}(t.fieldTransforms,e.fieldTransforms)&&(0===t.type?t.value.isEqual(e.value):1!==t.type||t.data.isEqual(e.data)&&t.fieldMask.isEqual(e.fieldMask))}function ks(t){return t.isFoundDocument()?t.version:Hr.min()}class Ds extends Es{constructor(t,e,n,r=[]){super(),this.key=t,this.value=e,this.precondition=n,this.fieldTransforms=r,this.type=0}}class Ns extends Es{constructor(t,e,n,r,i=[]){super(),this.key=t,this.data=e,this.fieldMask=n,this.precondition=r,this.fieldTransforms=i,this.type=1}}function xs(t){const e=new Map;return t.fieldMask.fields.forEach((n=>{if(!n.isEmpty()){const r=t.data.field(n);e.set(n,r)}})),e}function _s(t,e,n){const r=new Map;Dr(t.length===n.length);for(let i=0;i<n.length;i++){const s=t[i],o=s.transform,a=e.data.field(s.field);r.set(s.field,us(o,a,n[i]))}return r}function Ls(t,e,n){const r=new Map;for(const i of t){const t=i.transform,s=n.data.field(i.field);r.set(i.field,cs(t,s,e))}return r}class Ps extends Es{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=2,this.fieldTransforms=[]}}class Ms extends Es{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=3,this.fieldTransforms=[]}}class Rs{constructor(t){this.count=t}}var Bs,Os;function js(t){if(void 0===t)return Ir("GRPC error has no .code"),xr.UNKNOWN;switch(t){case Bs.OK:return xr.OK;case Bs.CANCELLED:return xr.CANCELLED;case Bs.UNKNOWN:return xr.UNKNOWN;case Bs.DEADLINE_EXCEEDED:return xr.DEADLINE_EXCEEDED;case Bs.RESOURCE_EXHAUSTED:return xr.RESOURCE_EXHAUSTED;case Bs.INTERNAL:return xr.INTERNAL;case Bs.UNAVAILABLE:return xr.UNAVAILABLE;case Bs.UNAUTHENTICATED:return xr.UNAUTHENTICATED;case Bs.INVALID_ARGUMENT:return xr.INVALID_ARGUMENT;case Bs.NOT_FOUND:return xr.NOT_FOUND;case Bs.ALREADY_EXISTS:return xr.ALREADY_EXISTS;case Bs.PERMISSION_DENIED:return xr.PERMISSION_DENIED;case Bs.FAILED_PRECONDITION:return xr.FAILED_PRECONDITION;case Bs.ABORTED:return xr.ABORTED;case Bs.OUT_OF_RANGE:return xr.OUT_OF_RANGE;case Bs.UNIMPLEMENTED:return xr.UNIMPLEMENTED;case Bs.DATA_LOSS:return xr.DATA_LOSS;default:return kr()}}(Os=Bs||(Bs={}))[Os.OK=0]="OK",Os[Os.CANCELLED=1]="CANCELLED",Os[Os.UNKNOWN=2]="UNKNOWN",Os[Os.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",Os[Os.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",Os[Os.NOT_FOUND=5]="NOT_FOUND",Os[Os.ALREADY_EXISTS=6]="ALREADY_EXISTS",Os[Os.PERMISSION_DENIED=7]="PERMISSION_DENIED",Os[Os.UNAUTHENTICATED=16]="UNAUTHENTICATED",Os[Os.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",Os[Os.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",Os[Os.ABORTED=10]="ABORTED",Os[Os.OUT_OF_RANGE=11]="OUT_OF_RANGE",Os[Os.UNIMPLEMENTED=12]="UNIMPLEMENTED",Os[Os.INTERNAL=13]="INTERNAL",Os[Os.UNAVAILABLE=14]="UNAVAILABLE",Os[Os.DATA_LOSS=15]="DATA_LOSS";class Us{constructor(t,e){this.comparator=t,this.root=e||Vs.EMPTY}insert(t,e){return new Us(this.comparator,this.root.insert(t,e,this.comparator).copy(null,null,Vs.BLACK,null,null))}remove(t){return new Us(this.comparator,this.root.remove(t,this.comparator).copy(null,null,Vs.BLACK,null,null))}get(t){let e=this.root;for(;!e.isEmpty();){const n=this.comparator(t,e.key);if(0===n)return e.value;n<0?e=e.left:n>0&&(e=e.right)}return null}indexOf(t){let e=0,n=this.root;for(;!n.isEmpty();){const r=this.comparator(t,n.key);if(0===r)return e+n.left.size;r<0?n=n.left:(e+=n.left.size+1,n=n.right)}return-1}isEmpty(){return this.root.isEmpty()}get size(){return this.root.size}minKey(){return this.root.minKey()}maxKey(){return this.root.maxKey()}inorderTraversal(t){return this.root.inorderTraversal(t)}forEach(t){this.inorderTraversal(((e,n)=>(t(e,n),!1)))}toString(){const t=[];return this.inorderTraversal(((e,n)=>(t.push(`${e}:${n}`),!1))),`{${t.join(", ")}}`}reverseTraversal(t){return this.root.reverseTraversal(t)}getIterator(){return new Fs(this.root,null,this.comparator,!1)}getIteratorFrom(t){return new Fs(this.root,t,this.comparator,!1)}getReverseIterator(){return new Fs(this.root,null,this.comparator,!0)}getReverseIteratorFrom(t){return new Fs(this.root,t,this.comparator,!0)}}class Fs{constructor(t,e,n,r){this.isReverse=r,this.nodeStack=[];let i=1;for(;!t.isEmpty();)if(i=e?n(t.key,e):1,r&&(i*=-1),i<0)t=this.isReverse?t.left:t.right;else{if(0===i){this.nodeStack.push(t);break}this.nodeStack.push(t),t=this.isReverse?t.right:t.left}}getNext(){let t=this.nodeStack.pop();const e={key:t.key,value:t.value};if(this.isReverse)for(t=t.left;!t.isEmpty();)this.nodeStack.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack.push(t),t=t.left;return e}hasNext(){return this.nodeStack.length>0}peek(){if(0===this.nodeStack.length)return null;const t=this.nodeStack[this.nodeStack.length-1];return{key:t.key,value:t.value}}}class Vs{constructor(t,e,n,r,i){this.key=t,this.value=e,this.color=null!=n?n:Vs.RED,this.left=null!=r?r:Vs.EMPTY,this.right=null!=i?i:Vs.EMPTY,this.size=this.left.size+1+this.right.size}copy(t,e,n,r,i){return new Vs(null!=t?t:this.key,null!=e?e:this.value,null!=n?n:this.color,null!=r?r:this.left,null!=i?i:this.right)}isEmpty(){return!1}inorderTraversal(t){return this.left.inorderTraversal(t)||t(this.key,this.value)||this.right.inorderTraversal(t)}reverseTraversal(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)}min(){return this.left.isEmpty()?this:this.left.min()}minKey(){return this.min().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(t,e,n){let r=this;const i=n(t,r.key);return r=i<0?r.copy(null,null,null,r.left.insert(t,e,n),null):0===i?r.copy(null,e,null,null,null):r.copy(null,null,null,null,r.right.insert(t,e,n)),r.fixUp()}removeMin(){if(this.left.isEmpty())return Vs.EMPTY;let t=this;return t.left.isRed()||t.left.left.isRed()||(t=t.moveRedLeft()),t=t.copy(null,null,null,t.left.removeMin(),null),t.fixUp()}remove(t,e){let n,r=this;if(e(t,r.key)<0)r.left.isEmpty()||r.left.isRed()||r.left.left.isRed()||(r=r.moveRedLeft()),r=r.copy(null,null,null,r.left.remove(t,e),null);else{if(r.left.isRed()&&(r=r.rotateRight()),r.right.isEmpty()||r.right.isRed()||r.right.left.isRed()||(r=r.moveRedRight()),0===e(t,r.key)){if(r.right.isEmpty())return Vs.EMPTY;n=r.right.min(),r=r.copy(n.key,n.value,null,null,r.right.removeMin())}r=r.copy(null,null,null,null,r.right.remove(t,e))}return r.fixUp()}isRed(){return this.color}fixUp(){let t=this;return t.right.isRed()&&!t.left.isRed()&&(t=t.rotateLeft()),t.left.isRed()&&t.left.left.isRed()&&(t=t.rotateRight()),t.left.isRed()&&t.right.isRed()&&(t=t.colorFlip()),t}moveRedLeft(){let t=this.colorFlip();return t.right.left.isRed()&&(t=t.copy(null,null,null,null,t.right.rotateRight()),t=t.rotateLeft(),t=t.colorFlip()),t}moveRedRight(){let t=this.colorFlip();return t.left.left.isRed()&&(t=t.rotateRight(),t=t.colorFlip()),t}rotateLeft(){const t=this.copy(null,null,Vs.RED,null,this.right.left);return this.right.copy(null,null,this.color,t,null)}rotateRight(){const t=this.copy(null,null,Vs.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,t)}colorFlip(){const t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)}checkMaxDepth(){const t=this.check();return Math.pow(2,t)<=this.size+1}check(){if(this.isRed()&&this.left.isRed())throw kr();if(this.right.isRed())throw kr();const t=this.left.check();if(t!==this.right.check())throw kr();return t+(this.isRed()?0:1)}}Vs.EMPTY=null,Vs.RED=!0,Vs.BLACK=!1,Vs.EMPTY=new class{constructor(){this.size=0}get key(){throw kr()}get value(){throw kr()}get color(){throw kr()}get left(){throw kr()}get right(){throw kr()}copy(t,e,n,r,i){return this}insert(t,e,n){return new Vs(t,e)}remove(t,e){return this}isEmpty(){return!0}inorderTraversal(t){return!1}reverseTraversal(t){return!1}minKey(){return null}maxKey(){return null}isRed(){return!1}checkMaxDepth(){return!0}check(){return 0}};class qs{constructor(t){this.comparator=t,this.data=new Us(this.comparator)}has(t){return null!==this.data.get(t)}first(){return this.data.minKey()}last(){return this.data.maxKey()}get size(){return this.data.size}indexOf(t){return this.data.indexOf(t)}forEach(t){this.data.inorderTraversal(((e,n)=>(t(e),!1)))}forEachInRange(t,e){const n=this.data.getIteratorFrom(t[0]);for(;n.hasNext();){const r=n.getNext();if(this.comparator(r.key,t[1])>=0)return;e(r.key)}}forEachWhile(t,e){let n;for(n=void 0!==e?this.data.getIteratorFrom(e):this.data.getIterator();n.hasNext();)if(!t(n.getNext().key))return}firstAfterOrEqual(t){const e=this.data.getIteratorFrom(t);return e.hasNext()?e.getNext().key:null}getIterator(){return new $s(this.data.getIterator())}getIteratorFrom(t){return new $s(this.data.getIteratorFrom(t))}add(t){return this.copy(this.data.remove(t).insert(t,!0))}delete(t){return this.has(t)?this.copy(this.data.remove(t)):this}isEmpty(){return this.data.isEmpty()}unionWith(t){let e=this;return e.size<t.size&&(e=t,t=this),t.forEach((t=>{e=e.add(t)})),e}isEqual(t){if(!(t instanceof qs))return!1;if(this.size!==t.size)return!1;const e=this.data.getIterator(),n=t.data.getIterator();for(;e.hasNext();){const t=e.getNext().key,r=n.getNext().key;if(0!==this.comparator(t,r))return!1}return!0}toArray(){const t=[];return this.forEach((e=>{t.push(e)})),t}toString(){const t=[];return this.forEach((e=>t.push(e))),"SortedSet("+t.toString()+")"}copy(t){const e=new qs(this.comparator);return e.data=t,e}}class $s{constructor(t){this.iter=t}getNext(){return this.iter.getNext().key}hasNext(){return this.iter.hasNext()}}const Hs=new Us(ui.comparator);function zs(){return Hs}const Ws=new Us(ui.comparator);function Ks(){return Ws}const Gs=new Us(ui.comparator);const Ys=new qs(ui.comparator);function Zs(...t){let e=Ys;for(const n of t)e=e.add(n);return e}const Qs=new qs(Vr);function Xs(){return Qs}class Js{constructor(t,e,n,r,i){this.snapshotVersion=t,this.targetChanges=e,this.targetMismatches=n,this.documentUpdates=r,this.resolvedLimboDocuments=i}static createSynthesizedRemoteEventForCurrentChange(t,e){const n=new Map;return n.set(t,to.createSynthesizedTargetChangeForCurrentChange(t,e)),new Js(Hr.min(),n,Xs(),zs(),Zs())}}class to{constructor(t,e,n,r,i){this.resumeToken=t,this.current=e,this.addedDocuments=n,this.modifiedDocuments=r,this.removedDocuments=i}static createSynthesizedTargetChangeForCurrentChange(t,e){return new to(Jr.EMPTY_BYTE_STRING,e,Zs(),Zs(),Zs())}}class eo{constructor(t,e,n,r){this.k=t,this.removedTargetIds=e,this.key=n,this.$=r}}class no{constructor(t,e){this.targetId=t,this.O=e}}class ro{constructor(t,e,n=Jr.EMPTY_BYTE_STRING,r=null){this.state=t,this.targetIds=e,this.resumeToken=n,this.cause=r}}class io{constructor(){this.F=0,this.M=ao(),this.L=Jr.EMPTY_BYTE_STRING,this.B=!1,this.U=!0}get current(){return this.B}get resumeToken(){return this.L}get q(){return 0!==this.F}get K(){return this.U}j(t){t.approximateByteSize()>0&&(this.U=!0,this.L=t)}W(){let t=Zs(),e=Zs(),n=Zs();return this.M.forEach(((r,i)=>{switch(i){case 0:t=t.add(r);break;case 2:e=e.add(r);break;case 1:n=n.add(r);break;default:kr()}})),new to(this.L,this.B,t,e,n)}G(){this.U=!1,this.M=ao()}H(t,e){this.U=!0,this.M=this.M.insert(t,e)}J(t){this.U=!0,this.M=this.M.remove(t)}Y(){this.F+=1}X(){this.F-=1}Z(){this.U=!0,this.B=!0}}class so{constructor(t){this.tt=t,this.et=new Map,this.nt=zs(),this.st=oo(),this.it=new qs(Vr)}rt(t){for(const e of t.k)t.$&&t.$.isFoundDocument()?this.ot(e,t.$):this.ct(e,t.key,t.$);for(const e of t.removedTargetIds)this.ct(e,t.key,t.$)}at(t){this.forEachTarget(t,(e=>{const n=this.ut(e);switch(t.state){case 0:this.ht(e)&&n.j(t.resumeToken);break;case 1:n.X(),n.q||n.G(),n.j(t.resumeToken);break;case 2:n.X(),n.q||this.removeTarget(e);break;case 3:this.ht(e)&&(n.Z(),n.j(t.resumeToken));break;case 4:this.ht(e)&&(this.lt(e),n.j(t.resumeToken));break;default:kr()}}))}forEachTarget(t,e){t.targetIds.length>0?t.targetIds.forEach(e):this.et.forEach(((t,n)=>{this.ht(n)&&e(n)}))}ft(t){const e=t.targetId,n=t.O.count,r=this.dt(e);if(r){const t=r.target;if(xi(t))if(0===n){const n=new ui(t.path);this.ct(e,n,Ci.newNoDocument(n,Hr.min()))}else Dr(1===n);else this.wt(e)!==n&&(this.lt(e),this.it=this.it.add(e))}}_t(t){const e=new Map;this.et.forEach(((n,r)=>{const i=this.dt(r);if(i){if(n.current&&xi(i.target)){const e=new ui(i.target.path);null!==this.nt.get(e)||this.gt(r,e)||this.ct(r,e,Ci.newNoDocument(e,t))}n.K&&(e.set(r,n.W()),n.G())}}));let n=Zs();this.st.forEach(((t,e)=>{let r=!0;e.forEachWhile((t=>{const e=this.dt(t);return!e||2===e.purpose||(r=!1,!1)})),r&&(n=n.add(t))}));const r=new Js(t,e,this.it,this.nt,n);return this.nt=zs(),this.st=oo(),this.it=new qs(Vr),r}ot(t,e){if(!this.ht(t))return;const n=this.gt(t,e.key)?2:0;this.ut(t).H(e.key,n),this.nt=this.nt.insert(e.key,e),this.st=this.st.insert(e.key,this.yt(e.key).add(t))}ct(t,e,n){if(!this.ht(t))return;const r=this.ut(t);this.gt(t,e)?r.H(e,1):r.J(e),this.st=this.st.insert(e,this.yt(e).delete(t)),n&&(this.nt=this.nt.insert(e,n))}removeTarget(t){this.et.delete(t)}wt(t){const e=this.ut(t).W();return this.tt.getRemoteKeysForTarget(t).size+e.addedDocuments.size-e.removedDocuments.size}Y(t){this.ut(t).Y()}ut(t){let e=this.et.get(t);return e||(e=new io,this.et.set(t,e)),e}yt(t){let e=this.st.get(t);return e||(e=new qs(Vr),this.st=this.st.insert(t,e)),e}ht(t){const e=null!==this.dt(t);return e||Tr("WatchChangeAggregator","Detected inactive target",t),e}dt(t){const e=this.et.get(t);return e&&e.q?null:this.tt.Tt(t)}lt(t){this.et.set(t,new io),this.tt.getRemoteKeysForTarget(t).forEach((e=>{this.ct(t,e,null)}))}gt(t,e){return this.tt.getRemoteKeysForTarget(t).has(e)}}function oo(){return new Us(ui.comparator)}function ao(){return new Us(ui.comparator)}const co={asc:"ASCENDING",desc:"DESCENDING"},uo={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","!=":"NOT_EQUAL","array-contains":"ARRAY_CONTAINS",in:"IN","not-in":"NOT_IN","array-contains-any":"ARRAY_CONTAINS_ANY"};class lo{constructor(t,e){this.databaseId=t,this.D=e}}function ho(t,e){return t.D?`${new Date(1e3*e.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")}.${("000000000"+e.nanoseconds).slice(-9)}Z`:{seconds:""+e.seconds,nanos:e.nanoseconds}}function fo(t,e){return t.D?e.toBase64():e.toUint8Array()}function mo(t,e){return ho(t,e.toTimestamp())}function po(t){return Dr(!!t),Hr.fromTimestamp(function(t){const e=ei(t);return new $r(e.seconds,e.nanos)}(t))}function go(t,e){return function(t){return new Yr(["projects",t.projectId,"databases",t.database])}(t).child("documents").child(e).canonicalString()}function yo(t){const e=Yr.fromString(t);return Dr(Oo(e)),e}function vo(t,e){return go(t.databaseId,e.path)}function wo(t,e){const n=yo(e);if(n.get(1)!==t.databaseId.projectId)throw new _r(xr.INVALID_ARGUMENT,"Tried to deserialize key from different project: "+n.get(1)+" vs "+t.databaseId.projectId);if(n.get(3)!==t.databaseId.database)throw new _r(xr.INVALID_ARGUMENT,"Tried to deserialize key from different database: "+n.get(3)+" vs "+t.databaseId.database);return new ui(Eo(n))}function Ao(t,e){return go(t.databaseId,e)}function bo(t){return new Yr(["projects",t.databaseId.projectId,"databases",t.databaseId.database]).canonicalString()}function Eo(t){return Dr(t.length>4&&"documents"===t.get(4)),t.popFirst(5)}function To(t,e,n){return{name:vo(t,e),fields:n.value.mapValue.fields}}function Io(t,e){return{documents:[Ao(t,e.path)]}}function Co(t,e){const n={structuredQuery:{}},r=e.path;null!==e.collectionGroup?(n.parent=Ao(t,r),n.structuredQuery.from=[{collectionId:e.collectionGroup,allDescendants:!0}]):(n.parent=Ao(t,r.popLast()),n.structuredQuery.from=[{collectionId:r.lastSegment()}]);const i=function(t){if(0===t.length)return;const e=t.map((t=>function(t){if("=="===t.op){if(Ai(t.value))return{unaryFilter:{field:Lo(t.field),op:"IS_NAN"}};if(wi(t.value))return{unaryFilter:{field:Lo(t.field),op:"IS_NULL"}}}else if("!="===t.op){if(Ai(t.value))return{unaryFilter:{field:Lo(t.field),op:"IS_NOT_NAN"}};if(wi(t.value))return{unaryFilter:{field:Lo(t.field),op:"IS_NOT_NULL"}}}return{fieldFilter:{field:Lo(t.field),op:_o(t.op),value:t.value}}}(t)));return 1===e.length?e[0]:{compositeFilter:{op:"AND",filters:e}}}(e.filters);i&&(n.structuredQuery.where=i);const s=function(t){if(0!==t.length)return t.map((t=>function(t){return{field:Lo(t.field),direction:xo(t.dir)}}(t)))}(e.orderBy);s&&(n.structuredQuery.orderBy=s);const o=function(t,e){return t.D||ai(e)?e:{value:e}}(t,e.limit);return null!==o&&(n.structuredQuery.limit=o),e.startAt&&(n.structuredQuery.startAt=Do(e.startAt)),e.endAt&&(n.structuredQuery.endAt=Do(e.endAt)),n}function So(t){let e=function(t){const e=yo(t);return 4===e.length?Yr.emptyPath():Eo(e)}(t.parent);const n=t.structuredQuery,r=n.from?n.from.length:0;let i=null;if(r>0){Dr(1===r);const t=n.from[0];t.allDescendants?i=t.collectionId:e=e.child(t.collectionId)}let s=[];n.where&&(s=ko(n.where));let o=[];n.orderBy&&(o=n.orderBy.map((t=>function(t){return new qi(Po(t.field),function(t){switch(t){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(t.direction))}(t))));let a=null;n.limit&&(a=function(t){let e;return e="object"==typeof t?t.value:t,ai(e)?null:e}(n.limit));let c=null;n.startAt&&(c=No(n.startAt));let u=null;return n.endAt&&(u=No(n.endAt)),function(t,e,n,r,i,s,o,a){return new Wi(t,e,n,r,i,s,o,a)}(e,i,o,s,a,"F",c,u)}function ko(t){return t?void 0!==t.unaryFilter?[Ro(t)]:void 0!==t.fieldFilter?[Mo(t)]:void 0!==t.compositeFilter?t.compositeFilter.filters.map((t=>ko(t))).reduce(((t,e)=>t.concat(e))):kr():[]}function Do(t){return{before:t.before,values:t.position}}function No(t){const e=!!t.before,n=t.values||[];return new Fi(n,e)}function xo(t){return co[t]}function _o(t){return uo[t]}function Lo(t){return{fieldPath:t.canonicalString()}}function Po(t){return Qr.fromServerFormat(t.fieldPath)}function Mo(t){return _i.create(Po(t.fieldFilter.field),function(t){switch(t){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";default:return kr()}}(t.fieldFilter.op),t.fieldFilter.value)}function Ro(t){switch(t.unaryFilter.op){case"IS_NAN":const e=Po(t.unaryFilter.field);return _i.create(e,"==",{doubleValue:NaN});case"IS_NULL":const n=Po(t.unaryFilter.field);return _i.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":const r=Po(t.unaryFilter.field);return _i.create(r,"!=",{doubleValue:NaN});case"IS_NOT_NULL":const i=Po(t.unaryFilter.field);return _i.create(i,"!=",{nullValue:"NULL_VALUE"});default:return kr()}}function Bo(t){const e=[];return t.fields.forEach((t=>e.push(t.canonicalString()))),{fieldPaths:e}}function Oo(t){return t.length>=4&&"projects"===t.get(0)&&"databases"===t.get(2)}function jo(t){let e="";for(let n=0;n<t.length;n++)e.length>0&&(e=Fo(e)),e=Uo(t.get(n),e);return Fo(e)}function Uo(t,e){let n=e;const r=t.length;for(let e=0;e<r;e++){const r=t.charAt(e);switch(r){case"\0":n+="";break;case"":n+="";break;default:n+=r}}return n}function Fo(t){return t+""}class Vo{constructor(t,e,n){this.ownerId=t,this.allowTabSynchronization=e,this.leaseTimestampMs=n}}Vo.store="owner",Vo.key="owner";class qo{constructor(t,e,n){this.userId=t,this.lastAcknowledgedBatchId=e,this.lastStreamToken=n}}qo.store="mutationQueues",qo.keyPath="userId";class $o{constructor(t,e,n,r,i){this.userId=t,this.batchId=e,this.localWriteTimeMs=n,this.baseMutations=r,this.mutations=i}}$o.store="mutations",$o.keyPath="batchId",$o.userMutationsIndex="userMutationsIndex",$o.userMutationsKeyPath=["userId","batchId"];class Ho{constructor(){}static prefixForUser(t){return[t]}static prefixForPath(t,e){return[t,jo(e)]}static key(t,e,n){return[t,jo(e),n]}}Ho.store="documentMutations",Ho.PLACEHOLDER=new Ho;class zo{constructor(t,e,n,r,i,s){this.unknownDocument=t,this.noDocument=e,this.document=n,this.hasCommittedMutations=r,this.readTime=i,this.parentPath=s}}zo.store="remoteDocuments",zo.readTimeIndex="readTimeIndex",zo.readTimeIndexPath="readTime",zo.collectionReadTimeIndex="collectionReadTimeIndex",zo.collectionReadTimeIndexPath=["parentPath","readTime"];class Wo{constructor(t){this.byteSize=t}}Wo.store="remoteDocumentGlobal",Wo.key="remoteDocumentGlobalKey";class Ko{constructor(t,e,n,r,i,s,o){this.targetId=t,this.canonicalId=e,this.readTime=n,this.resumeToken=r,this.lastListenSequenceNumber=i,this.lastLimboFreeSnapshotVersion=s,this.query=o}}Ko.store="targets",Ko.keyPath="targetId",Ko.queryTargetsIndexName="queryTargetsIndex",Ko.queryTargetsKeyPath=["canonicalId","targetId"];class Go{constructor(t,e,n){this.targetId=t,this.path=e,this.sequenceNumber=n}}Go.store="targetDocuments",Go.keyPath=["targetId","path"],Go.documentTargetsIndex="documentTargetsIndex",Go.documentTargetsKeyPath=["path","targetId"];class Yo{constructor(t,e,n,r){this.highestTargetId=t,this.highestListenSequenceNumber=e,this.lastRemoteSnapshotVersion=n,this.targetCount=r}}Yo.key="targetGlobalKey",Yo.store="targetGlobal";class Zo{constructor(t,e){this.collectionId=t,this.parent=e}}Zo.store="collectionParents",Zo.keyPath=["collectionId","parent"];class Qo{constructor(t,e,n,r){this.clientId=t,this.updateTimeMs=e,this.networkEnabled=n,this.inForeground=r}}Qo.store="clientMetadata",Qo.keyPath="clientId";class Xo{constructor(t,e,n){this.bundleId=t,this.createTime=e,this.version=n}}Xo.store="bundles",Xo.keyPath="bundleId";class Jo{constructor(t,e,n){this.name=t,this.readTime=e,this.bundledQuery=n}}Jo.store="namedQueries",Jo.keyPath="name",qo.store,$o.store,Ho.store,zo.store,Ko.store,Vo.store,Yo.store,Go.store,Qo.store,Wo.store,Zo.store,Xo.store,Jo.store;class ta{constructor(t){this.nextCallback=null,this.catchCallback=null,this.result=void 0,this.error=void 0,this.isDone=!1,this.callbackAttached=!1,t((t=>{this.isDone=!0,this.result=t,this.nextCallback&&this.nextCallback(t)}),(t=>{this.isDone=!0,this.error=t,this.catchCallback&&this.catchCallback(t)}))}catch(t){return this.next(void 0,t)}next(t,e){return this.callbackAttached&&kr(),this.callbackAttached=!0,this.isDone?this.error?this.wrapFailure(e,this.error):this.wrapSuccess(t,this.result):new ta(((n,r)=>{this.nextCallback=e=>{this.wrapSuccess(t,e).next(n,r)},this.catchCallback=t=>{this.wrapFailure(e,t).next(n,r)}}))}toPromise(){return new Promise(((t,e)=>{this.next(t,e)}))}wrapUserFunction(t){try{const e=t();return e instanceof ta?e:ta.resolve(e)}catch(t){return ta.reject(t)}}wrapSuccess(t,e){return t?this.wrapUserFunction((()=>t(e))):ta.resolve(e)}wrapFailure(t,e){return t?this.wrapUserFunction((()=>t(e))):ta.reject(e)}static resolve(t){return new ta(((e,n)=>{e(t)}))}static reject(t){return new ta(((e,n)=>{n(t)}))}static waitFor(t){return new ta(((e,n)=>{let r=0,i=0,s=!1;t.forEach((t=>{++r,t.next((()=>{++i,s&&i===r&&e()}),(t=>n(t)))})),s=!0,i===r&&e()}))}static or(t){let e=ta.resolve(!1);for(const n of t)e=e.next((t=>t?ta.resolve(t):n()));return e}static forEach(t,e){const n=[];return t.forEach(((t,r)=>{n.push(e.call(this,t,r))})),this.waitFor(n)}}function ea(t){return"IndexedDbTransactionError"===t.name}class na{constructor(t,e,n,r){this.batchId=t,this.localWriteTime=e,this.baseMutations=n,this.mutations=r}applyToRemoteDocument(t,e){const n=e.mutationResults;for(let e=0;e<this.mutations.length;e++){const r=this.mutations[e];r.key.isEqual(t.key)&&Ts(r,t,n[e])}}applyToLocalView(t){for(const e of this.baseMutations)e.key.isEqual(t.key)&&Is(e,t,this.localWriteTime);for(const e of this.mutations)e.key.isEqual(t.key)&&Is(e,t,this.localWriteTime)}applyToLocalDocumentSet(t){this.mutations.forEach((e=>{const n=t.get(e.key),r=n;this.applyToLocalView(r),n.isValidDocument()||r.convertToNoDocument(Hr.min())}))}keys(){return this.mutations.reduce(((t,e)=>t.add(e.key)),Zs())}isEqual(t){return this.batchId===t.batchId&&qr(this.mutations,t.mutations,((t,e)=>Ss(t,e)))&&qr(this.baseMutations,t.baseMutations,((t,e)=>Ss(t,e)))}}class ra{constructor(t,e,n,r){this.batch=t,this.commitVersion=e,this.mutationResults=n,this.docVersions=r}static from(t,e,n){Dr(t.mutations.length===n.length);let r=Gs;const i=t.mutations;for(let t=0;t<i.length;t++)r=r.insert(i[t].key,n[t].version);return new ra(t,e,n,r)}}class ia{constructor(t,e,n,r,i=Hr.min(),s=Hr.min(),o=Jr.EMPTY_BYTE_STRING){this.target=t,this.targetId=e,this.purpose=n,this.sequenceNumber=r,this.snapshotVersion=i,this.lastLimboFreeSnapshotVersion=s,this.resumeToken=o}withSequenceNumber(t){return new ia(this.target,this.targetId,this.purpose,t,this.snapshotVersion,this.lastLimboFreeSnapshotVersion,this.resumeToken)}withResumeToken(t,e){return new ia(this.target,this.targetId,this.purpose,this.sequenceNumber,e,this.lastLimboFreeSnapshotVersion,t)}withLastLimboFreeSnapshotVersion(t){return new ia(this.target,this.targetId,this.purpose,this.sequenceNumber,this.snapshotVersion,t,this.resumeToken)}}class sa{constructor(t){this.Wt=t}}function oa(t){const e=So({parent:t.parent,structuredQuery:t.structuredQuery});return"LAST"===t.limitType?function(t,e,n){return new Wi(t.path,t.collectionGroup,t.explicitOrderBy.slice(),t.filters.slice(),e,n,t.startAt,t.endAt)}(e,e.limit,"L"):e}class aa{constructor(){this.Gt=new ca}addToCollectionParentIndex(t,e){return this.Gt.add(e),ta.resolve()}getCollectionParents(t,e){return ta.resolve(this.Gt.getEntries(e))}}class ca{constructor(){this.index={}}add(t){const e=t.lastSegment(),n=t.popLast(),r=this.index[e]||new qs(Yr.comparator),i=!r.has(n);return this.index[e]=r.add(n),i}has(t){const e=t.lastSegment(),n=t.popLast(),r=this.index[e];return r&&r.has(n)}getEntries(t){return(this.index[t]||new qs(Yr.comparator)).toArray()}}class ua{constructor(t,e,n){this.cacheSizeCollectionThreshold=t,this.percentileToCollect=e,this.maximumSequenceNumbersToCollect=n}static withCacheSize(t){return new ua(t,ua.DEFAULT_COLLECTION_PERCENTILE,ua.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT)}}ua.DEFAULT_COLLECTION_PERCENTILE=10,ua.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT=1e3,ua.DEFAULT=new ua(41943040,ua.DEFAULT_COLLECTION_PERCENTILE,ua.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT),ua.DISABLED=new ua(-1,0,0);class la{constructor(t){this.ne=t}next(){return this.ne+=2,this.ne}static se(){return new la(0)}static ie(){return new la(-1)}}async function ha(t){if(t.code!==xr.FAILED_PRECONDITION||"The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab."!==t.message)throw t;Tr("LocalStore","Unexpectedly lost primary lease")}class da{constructor(t,e){this.mapKeyFn=t,this.equalsFn=e,this.inner={}}get(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0!==n)for(const[e,r]of n)if(this.equalsFn(e,t))return r}has(t){return void 0!==this.get(t)}set(t,e){const n=this.mapKeyFn(t),r=this.inner[n];if(void 0!==r){for(let n=0;n<r.length;n++)if(this.equalsFn(r[n][0],t))return void(r[n]=[t,e]);r.push([t,e])}else this.inner[n]=[[t,e]]}delete(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0===n)return!1;for(let r=0;r<n.length;r++)if(this.equalsFn(n[r][0],t))return 1===n.length?delete this.inner[e]:n.splice(r,1),!0;return!1}forEach(t){Wr(this.inner,((e,n)=>{for(const[e,r]of n)t(e,r)}))}isEmpty(){return Kr(this.inner)}}class fa{constructor(t,e,n){this.He=t,this.In=e,this.Ht=n}An(t,e){return this.In.getAllMutationBatchesAffectingDocumentKey(t,e).next((n=>this.Rn(t,e,n)))}Rn(t,e,n){return this.He.getEntry(t,e).next((t=>{for(const e of n)e.applyToLocalView(t);return t}))}bn(t,e){t.forEach(((t,n)=>{for(const t of e)t.applyToLocalView(n)}))}Pn(t,e){return this.He.getEntries(t,e).next((e=>this.vn(t,e).next((()=>e))))}vn(t,e){return this.In.getAllMutationBatchesAffectingDocumentKeys(t,e).next((t=>this.bn(e,t)))}getDocumentsMatchingQuery(t,e,n){return function(t){return ui.isDocumentKey(t.path)&&null===t.collectionGroup&&0===t.filters.length}(e)?this.Vn(t,e.path):function(t){return null!==t.collectionGroup}(e)?this.Sn(t,e,n):this.Dn(t,e,n)}Vn(t,e){return this.An(t,new ui(e)).next((t=>{let e=Ks();return t.isFoundDocument()&&(e=e.insert(t.key,t)),e}))}Sn(t,e,n){const r=e.collectionGroup;let i=Ks();return this.Ht.getCollectionParents(t,r).next((s=>ta.forEach(s,(s=>{const o=function(t,e){return new Wi(e,null,t.explicitOrderBy.slice(),t.filters.slice(),t.limit,t.limitType,t.startAt,t.endAt)}(e,s.child(r));return this.Dn(t,o,n).next((t=>{t.forEach(((t,e)=>{i=i.insert(t,e)}))}))})).next((()=>i))))}Dn(t,e,n){let r,i;return this.He.getDocumentsMatchingQuery(t,e,n).next((n=>(r=n,this.In.getAllMutationBatchesAffectingQuery(t,e)))).next((e=>(i=e,this.Cn(t,i,r).next((t=>{r=t;for(const t of i)for(const e of t.mutations){const n=e.key;let i=r.get(n);null==i&&(i=Ci.newInvalidDocument(n),r=r.insert(n,i)),Is(e,i,t.localWriteTime),i.isFoundDocument()||(r=r.remove(n))}}))))).next((()=>(r.forEach(((t,n)=>{es(e,n)||(r=r.remove(t))})),r)))}Cn(t,e,n){let r=Zs();for(const t of e)for(const e of t.mutations)e instanceof Ns&&null===n.get(e.key)&&(r=r.add(e.key));let i=n;return this.He.getEntries(t,r).next((t=>(t.forEach(((t,e)=>{e.isFoundDocument()&&(i=i.insert(t,e))})),i)))}}class ma{constructor(t,e,n,r){this.targetId=t,this.fromCache=e,this.Nn=n,this.xn=r}static kn(t,e){let n=Zs(),r=Zs();for(const t of e.docChanges)switch(t.type){case 0:n=n.add(t.doc.key);break;case 1:r=r.add(t.doc.key)}return new ma(t,e.fromCache,n,r)}}class pa{$n(t){this.On=t}getDocumentsMatchingQuery(t,e,n,r){return function(t){return 0===t.filters.length&&null===t.limit&&null==t.startAt&&null==t.endAt&&(0===t.explicitOrderBy.length||1===t.explicitOrderBy.length&&t.explicitOrderBy[0].field.isKeyField())}(e)||n.isEqual(Hr.min())?this.Fn(t,e):this.On.Pn(t,r).next((i=>{const s=this.Mn(e,i);return(Gi(e)||Yi(e))&&this.Ln(e.limitType,s,r,n)?this.Fn(t,e):(Er()<=o.in.DEBUG&&Tr("QueryEngine","Re-using previous result from %s to execute query: %s",n.toString(),ts(e)),this.On.getDocumentsMatchingQuery(t,e,n).next((t=>(s.forEach((e=>{t=t.insert(e.key,e)})),t))))}))}Mn(t,e){let n=new qs(ns(t));return e.forEach(((e,r)=>{es(t,r)&&(n=n.add(r))})),n}Ln(t,e,n,r){if(n.size!==e.size)return!0;const i="F"===t?e.last():e.first();return!!i&&(i.hasPendingWrites||i.version.compareTo(r)>0)}Fn(t,e){return Er()<=o.in.DEBUG&&Tr("QueryEngine","Using full collection scan to execute query:",ts(e)),this.On.getDocumentsMatchingQuery(t,e,Hr.min())}}class ga{constructor(t,e,n,r){this.persistence=t,this.Bn=e,this.N=r,this.Un=new Us(Vr),this.qn=new da((t=>Di(t)),Ni),this.Kn=Hr.min(),this.In=t.getMutationQueue(n),this.jn=t.getRemoteDocumentCache(),this.ze=t.getTargetCache(),this.Qn=new fa(this.jn,this.In,this.persistence.getIndexManager()),this.Je=t.getBundleCache(),this.Bn.$n(this.Qn)}collectGarbage(t){return this.persistence.runTransaction("Collect garbage","readwrite-primary",(e=>t.collect(e,this.Un)))}}async function ya(t,e){const n=Nr(t);let r=n.In,i=n.Qn;const s=await n.persistence.runTransaction("Handle user change","readonly",(t=>{let s;return n.In.getAllMutationBatches(t).next((o=>(s=o,r=n.persistence.getMutationQueue(e),i=new fa(n.jn,r,n.persistence.getIndexManager()),r.getAllMutationBatches(t)))).next((e=>{const n=[],r=[];let o=Zs();for(const t of s){n.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}for(const t of e){r.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}return i.Pn(t,o).next((t=>({Wn:t,removedBatchIds:n,addedBatchIds:r})))}))}));return n.In=r,n.Qn=i,n.Bn.$n(n.Qn),s}function va(t){const e=Nr(t);return e.persistence.runTransaction("Get last remote snapshot version","readonly",(t=>e.ze.getLastRemoteSnapshotVersion(t)))}function wa(t,e){const n=Nr(t);return n.persistence.runTransaction("Get next mutation batch","readonly",(t=>(void 0===e&&(e=-1),n.In.getNextMutationBatchAfterBatchId(t,e))))}async function Aa(t,e,n){const r=Nr(t),i=r.Un.get(e),s=n?"readwrite":"readwrite-primary";try{n||await r.persistence.runTransaction("Release target",s,(t=>r.persistence.referenceDelegate.removeTarget(t,i)))}catch(t){if(!ea(t))throw t;Tr("LocalStore",`Failed to update sequence numbers for target ${e}: ${t}`)}r.Un=r.Un.remove(e),r.qn.delete(i.target)}function ba(t,e,n){const r=Nr(t);let i=Hr.min(),s=Zs();return r.persistence.runTransaction("Execute query","readonly",(t=>function(t,e,n){const r=Nr(t),i=r.qn.get(n);return void 0!==i?ta.resolve(r.Un.get(i)):r.ze.getTargetData(e,n)}(r,t,Qi(e)).next((e=>{if(e)return i=e.lastLimboFreeSnapshotVersion,r.ze.getMatchingKeysForTargetId(t,e.targetId).next((t=>{s=t}))})).next((()=>r.Bn.getDocumentsMatchingQuery(t,e,n?i:Hr.min(),n?s:Zs()))).next((t=>({documents:t,Gn:s})))))}class Ea{constructor(t){this.N=t,this.Yn=new Map,this.Xn=new Map}getBundleMetadata(t,e){return ta.resolve(this.Yn.get(e))}saveBundleMetadata(t,e){var n;return this.Yn.set(e.id,{id:(n=e).id,version:n.version,createTime:po(n.createTime)}),ta.resolve()}getNamedQuery(t,e){return ta.resolve(this.Xn.get(e))}saveNamedQuery(t,e){return this.Xn.set(e.name,function(t){return{name:t.name,query:oa(t.bundledQuery),readTime:po(t.readTime)}}(e)),ta.resolve()}}class Ta{constructor(){this.Zn=new qs(Ia.ts),this.es=new qs(Ia.ns)}isEmpty(){return this.Zn.isEmpty()}addReference(t,e){const n=new Ia(t,e);this.Zn=this.Zn.add(n),this.es=this.es.add(n)}ss(t,e){t.forEach((t=>this.addReference(t,e)))}removeReference(t,e){this.rs(new Ia(t,e))}os(t,e){t.forEach((t=>this.removeReference(t,e)))}cs(t){const e=new ui(new Yr([])),n=new Ia(e,t),r=new Ia(e,t+1),i=[];return this.es.forEachInRange([n,r],(t=>{this.rs(t),i.push(t.key)})),i}us(){this.Zn.forEach((t=>this.rs(t)))}rs(t){this.Zn=this.Zn.delete(t),this.es=this.es.delete(t)}hs(t){const e=new ui(new Yr([])),n=new Ia(e,t),r=new Ia(e,t+1);let i=Zs();return this.es.forEachInRange([n,r],(t=>{i=i.add(t.key)})),i}containsKey(t){const e=new Ia(t,0),n=this.Zn.firstAfterOrEqual(e);return null!==n&&t.isEqual(n.key)}}class Ia{constructor(t,e){this.key=t,this.ls=e}static ts(t,e){return ui.comparator(t.key,e.key)||Vr(t.ls,e.ls)}static ns(t,e){return Vr(t.ls,e.ls)||ui.comparator(t.key,e.key)}}class Ca{constructor(t,e){this.Ht=t,this.referenceDelegate=e,this.In=[],this.fs=1,this.ds=new qs(Ia.ts)}checkEmpty(t){return ta.resolve(0===this.In.length)}addMutationBatch(t,e,n,r){const i=this.fs;this.fs++,this.In.length>0&&this.In[this.In.length-1];const s=new na(i,e,n,r);this.In.push(s);for(const e of r)this.ds=this.ds.add(new Ia(e.key,i)),this.Ht.addToCollectionParentIndex(t,e.key.path.popLast());return ta.resolve(s)}lookupMutationBatch(t,e){return ta.resolve(this.ws(e))}getNextMutationBatchAfterBatchId(t,e){const n=e+1,r=this._s(n),i=r<0?0:r;return ta.resolve(this.In.length>i?this.In[i]:null)}getHighestUnacknowledgedBatchId(){return ta.resolve(0===this.In.length?-1:this.fs-1)}getAllMutationBatches(t){return ta.resolve(this.In.slice())}getAllMutationBatchesAffectingDocumentKey(t,e){const n=new Ia(e,0),r=new Ia(e,Number.POSITIVE_INFINITY),i=[];return this.ds.forEachInRange([n,r],(t=>{const e=this.ws(t.ls);i.push(e)})),ta.resolve(i)}getAllMutationBatchesAffectingDocumentKeys(t,e){let n=new qs(Vr);return e.forEach((t=>{const e=new Ia(t,0),r=new Ia(t,Number.POSITIVE_INFINITY);this.ds.forEachInRange([e,r],(t=>{n=n.add(t.ls)}))})),ta.resolve(this.gs(n))}getAllMutationBatchesAffectingQuery(t,e){const n=e.path,r=n.length+1;let i=n;ui.isDocumentKey(i)||(i=i.child(""));const s=new Ia(new ui(i),0);let o=new qs(Vr);return this.ds.forEachWhile((t=>{const e=t.key.path;return!!n.isPrefixOf(e)&&(e.length===r&&(o=o.add(t.ls)),!0)}),s),ta.resolve(this.gs(o))}gs(t){const e=[];return t.forEach((t=>{const n=this.ws(t);null!==n&&e.push(n)})),e}removeMutationBatch(t,e){Dr(0===this.ys(e.batchId,"removed")),this.In.shift();let n=this.ds;return ta.forEach(e.mutations,(r=>{const i=new Ia(r.key,e.batchId);return n=n.delete(i),this.referenceDelegate.markPotentiallyOrphaned(t,r.key)})).next((()=>{this.ds=n}))}te(t){}containsKey(t,e){const n=new Ia(e,0),r=this.ds.firstAfterOrEqual(n);return ta.resolve(e.isEqual(r&&r.key))}performConsistencyCheck(t){return this.In.length,ta.resolve()}ys(t,e){return this._s(t)}_s(t){return 0===this.In.length?0:t-this.In[0].batchId}ws(t){const e=this._s(t);return e<0||e>=this.In.length?null:this.In[e]}}class Sa{constructor(t,e){this.Ht=t,this.ps=e,this.docs=new Us(ui.comparator),this.size=0}addEntry(t,e,n){const r=e.key,i=this.docs.get(r),s=i?i.size:0,o=this.ps(e);return this.docs=this.docs.insert(r,{document:e.clone(),size:o,readTime:n}),this.size+=o-s,this.Ht.addToCollectionParentIndex(t,r.path.popLast())}removeEntry(t){const e=this.docs.get(t);e&&(this.docs=this.docs.remove(t),this.size-=e.size)}getEntry(t,e){const n=this.docs.get(e);return ta.resolve(n?n.document.clone():Ci.newInvalidDocument(e))}getEntries(t,e){let n=zs();return e.forEach((t=>{const e=this.docs.get(t);n=n.insert(t,e?e.document.clone():Ci.newInvalidDocument(t))})),ta.resolve(n)}getDocumentsMatchingQuery(t,e,n){let r=zs();const i=new ui(e.path.child("")),s=this.docs.getIteratorFrom(i);for(;s.hasNext();){const{key:t,value:{document:i,readTime:o}}=s.getNext();if(!e.path.isPrefixOf(t.path))break;o.compareTo(n)<=0||es(e,i)&&(r=r.insert(i.key,i.clone()))}return ta.resolve(r)}Ts(t,e){return ta.forEach(this.docs,(t=>e(t)))}newChangeBuffer(t){return new ka(this)}getSize(t){return ta.resolve(this.size)}}class ka extends class{constructor(){this.changes=new da((t=>t.toString()),((t,e)=>t.isEqual(e))),this.changesApplied=!1}getReadTime(t){const e=this.changes.get(t);return e?e.readTime:Hr.min()}addEntry(t,e){this.assertNotApplied(),this.changes.set(t.key,{document:t,readTime:e})}removeEntry(t,e=null){this.assertNotApplied(),this.changes.set(t,{document:Ci.newInvalidDocument(t),readTime:e})}getEntry(t,e){this.assertNotApplied();const n=this.changes.get(e);return void 0!==n?ta.resolve(n.document):this.getFromCache(t,e)}getEntries(t,e){return this.getAllFromCache(t,e)}apply(t){return this.assertNotApplied(),this.changesApplied=!0,this.applyChanges(t)}assertNotApplied(){}}{constructor(t){super(),this.Se=t}applyChanges(t){const e=[];return this.changes.forEach(((n,r)=>{r.document.isValidDocument()?e.push(this.Se.addEntry(t,r.document,this.getReadTime(n))):this.Se.removeEntry(n)})),ta.waitFor(e)}getFromCache(t,e){return this.Se.getEntry(t,e)}getAllFromCache(t,e){return this.Se.getEntries(t,e)}}class Da{constructor(t){this.persistence=t,this.Es=new da((t=>Di(t)),Ni),this.lastRemoteSnapshotVersion=Hr.min(),this.highestTargetId=0,this.Is=0,this.As=new Ta,this.targetCount=0,this.Rs=la.se()}forEachTarget(t,e){return this.Es.forEach(((t,n)=>e(n))),ta.resolve()}getLastRemoteSnapshotVersion(t){return ta.resolve(this.lastRemoteSnapshotVersion)}getHighestSequenceNumber(t){return ta.resolve(this.Is)}allocateTargetId(t){return this.highestTargetId=this.Rs.next(),ta.resolve(this.highestTargetId)}setTargetsMetadata(t,e,n){return n&&(this.lastRemoteSnapshotVersion=n),e>this.Is&&(this.Is=e),ta.resolve()}ce(t){this.Es.set(t.target,t);const e=t.targetId;e>this.highestTargetId&&(this.Rs=new la(e),this.highestTargetId=e),t.sequenceNumber>this.Is&&(this.Is=t.sequenceNumber)}addTargetData(t,e){return this.ce(e),this.targetCount+=1,ta.resolve()}updateTargetData(t,e){return this.ce(e),ta.resolve()}removeTargetData(t,e){return this.Es.delete(e.target),this.As.cs(e.targetId),this.targetCount-=1,ta.resolve()}removeTargets(t,e,n){let r=0;const i=[];return this.Es.forEach(((s,o)=>{o.sequenceNumber<=e&&null===n.get(o.targetId)&&(this.Es.delete(s),i.push(this.removeMatchingKeysForTargetId(t,o.targetId)),r++)})),ta.waitFor(i).next((()=>r))}getTargetCount(t){return ta.resolve(this.targetCount)}getTargetData(t,e){const n=this.Es.get(e)||null;return ta.resolve(n)}addMatchingKeys(t,e,n){return this.As.ss(e,n),ta.resolve()}removeMatchingKeys(t,e,n){this.As.os(e,n);const r=this.persistence.referenceDelegate,i=[];return r&&e.forEach((e=>{i.push(r.markPotentiallyOrphaned(t,e))})),ta.waitFor(i)}removeMatchingKeysForTargetId(t,e){return this.As.cs(e),ta.resolve()}getMatchingKeysForTargetId(t,e){const n=this.As.hs(e);return ta.resolve(n)}containsKey(t,e){return ta.resolve(this.As.containsKey(e))}}class Na{constructor(t,e){this.bs={},this.Le=new jr(0),this.Be=!1,this.Be=!0,this.referenceDelegate=t(this),this.ze=new Da(this),this.Ht=new aa,this.He=function(t,e){return new Sa(t,e)}(this.Ht,(t=>this.referenceDelegate.Ps(t))),this.N=new sa(e),this.Je=new Ea(this.N)}start(){return Promise.resolve()}shutdown(){return this.Be=!1,Promise.resolve()}get started(){return this.Be}setDatabaseDeletedListener(){}setNetworkEnabled(){}getIndexManager(){return this.Ht}getMutationQueue(t){let e=this.bs[t.toKey()];return e||(e=new Ca(this.Ht,this.referenceDelegate),this.bs[t.toKey()]=e),e}getTargetCache(){return this.ze}getRemoteDocumentCache(){return this.He}getBundleCache(){return this.Je}runTransaction(t,e,n){Tr("MemoryPersistence","Starting transaction:",t);const r=new xa(this.Le.next());return this.referenceDelegate.vs(),n(r).next((t=>this.referenceDelegate.Vs(r).next((()=>t)))).toPromise().then((t=>(r.raiseOnCommittedEvent(),t)))}Ss(t,e){return ta.or(Object.values(this.bs).map((n=>()=>n.containsKey(t,e))))}}class xa extends class{constructor(){this.onCommittedListeners=[]}addOnCommittedListener(t){this.onCommittedListeners.push(t)}raiseOnCommittedEvent(){this.onCommittedListeners.forEach((t=>t()))}}{constructor(t){super(),this.currentSequenceNumber=t}}class _a{constructor(t){this.persistence=t,this.Ds=new Ta,this.Cs=null}static Ns(t){return new _a(t)}get xs(){if(this.Cs)return this.Cs;throw kr()}addReference(t,e,n){return this.Ds.addReference(n,e),this.xs.delete(n.toString()),ta.resolve()}removeReference(t,e,n){return this.Ds.removeReference(n,e),this.xs.add(n.toString()),ta.resolve()}markPotentiallyOrphaned(t,e){return this.xs.add(e.toString()),ta.resolve()}removeTarget(t,e){this.Ds.cs(e.targetId).forEach((t=>this.xs.add(t.toString())));const n=this.persistence.getTargetCache();return n.getMatchingKeysForTargetId(t,e.targetId).next((t=>{t.forEach((t=>this.xs.add(t.toString())))})).next((()=>n.removeTargetData(t,e)))}vs(){this.Cs=new Set}Vs(t){const e=this.persistence.getRemoteDocumentCache().newChangeBuffer();return ta.forEach(this.xs,(n=>{const r=ui.fromPath(n);return this.ks(t,r).next((t=>{t||e.removeEntry(r)}))})).next((()=>(this.Cs=null,e.apply(t))))}updateLimboDocument(t,e){return this.ks(t,e).next((t=>{t?this.xs.delete(e.toString()):this.xs.add(e.toString())}))}Ps(t){return 0}ks(t,e){return ta.or([()=>ta.resolve(this.Ds.containsKey(e)),()=>this.persistence.getTargetCache().containsKey(t,e),()=>this.persistence.Ss(t,e)])}}class La{constructor(){this.activeTargetIds=Xs()}Fs(t){this.activeTargetIds=this.activeTargetIds.add(t)}Ms(t){this.activeTargetIds=this.activeTargetIds.delete(t)}Os(){const t={activeTargetIds:this.activeTargetIds.toArray(),updateTimeMs:Date.now()};return JSON.stringify(t)}}class Pa{constructor(){this.yi=new La,this.pi={},this.onlineStateHandler=null,this.sequenceNumberHandler=null}addPendingMutation(t){}updateMutationState(t,e,n){}addLocalQueryTarget(t){return this.yi.Fs(t),this.pi[t]||"not-current"}updateQueryState(t,e,n){this.pi[t]=e}removeLocalQueryTarget(t){this.yi.Ms(t)}isLocalQueryTarget(t){return this.yi.activeTargetIds.has(t)}clearQueryState(t){delete this.pi[t]}getAllActiveQueryTargets(){return this.yi.activeTargetIds}isActiveQueryTarget(t){return this.yi.activeTargetIds.has(t)}start(){return this.yi=new La,Promise.resolve()}handleUserChange(t,e,n){}setOnlineState(t){}shutdown(){}writeSequenceNumber(t){}notifyBundleLoaded(){}}class Ma{Ti(t){}shutdown(){}}class Ra{constructor(){this.Ei=()=>this.Ii(),this.Ai=()=>this.Ri(),this.bi=[],this.Pi()}Ti(t){this.bi.push(t)}shutdown(){window.removeEventListener("online",this.Ei),window.removeEventListener("offline",this.Ai)}Pi(){window.addEventListener("online",this.Ei),window.addEventListener("offline",this.Ai)}Ii(){Tr("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(const t of this.bi)t(0)}Ri(){Tr("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(const t of this.bi)t(1)}static bt(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener}}const Ba={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery"};class Oa{constructor(t){this.vi=t.vi,this.Vi=t.Vi}Si(t){this.Di=t}Ci(t){this.Ni=t}onMessage(t){this.xi=t}close(){this.Vi()}send(t){this.vi(t)}ki(){this.Di()}$i(t){this.Ni(t)}Oi(t){this.xi(t)}}class ja extends class{constructor(t){this.databaseInfo=t,this.databaseId=t.databaseId;const e=t.ssl?"https":"http";this.Fi=e+"://"+t.host,this.Mi="projects/"+this.databaseId.projectId+"/databases/"+this.databaseId.database+"/documents"}Li(t,e,n,r){const i=this.Bi(t,e);Tr("RestConnection","Sending: ",i,n);const s={};return this.Ui(s,r),this.qi(t,i,s,n).then((t=>(Tr("RestConnection","Received: ",t),t)),(e=>{throw Cr("RestConnection",`${t} failed with error: `,e,"url: ",i,"request:",n),e}))}Ki(t,e,n,r){return this.Li(t,e,n,r)}Ui(t,e){if(t["X-Goog-Api-Client"]="gl-js/ fire/"+Ar,t["Content-Type"]="text/plain",this.databaseInfo.appId&&(t["X-Firebase-GMPID"]=this.databaseInfo.appId),e)for(const n in e.authHeaders)e.authHeaders.hasOwnProperty(n)&&(t[n]=e.authHeaders[n])}Bi(t,e){const n=Ba[t];return`${this.Fi}/v1/${e}:${n}`}}{constructor(t){super(t),this.forceLongPolling=t.forceLongPolling,this.autoDetectLongPolling=t.autoDetectLongPolling,this.useFetchStreams=t.useFetchStreams}qi(t,e,n,r){return new Promise(((i,s)=>{const o=new yr;o.listenOnce(dr.COMPLETE,(()=>{try{switch(o.getLastErrorCode()){case hr.NO_ERROR:const e=o.getResponseJson();Tr("Connection","XHR received:",JSON.stringify(e)),i(e);break;case hr.TIMEOUT:Tr("Connection",'RPC "'+t+'" timed out'),s(new _r(xr.DEADLINE_EXCEEDED,"Request time out"));break;case hr.HTTP_ERROR:const n=o.getStatus();if(Tr("Connection",'RPC "'+t+'" failed with status:',n,"response text:",o.getResponseText()),n>0){const t=o.getResponseJson().error;if(t&&t.status&&t.message){const e=function(t){const e=t.toLowerCase().replace(/_/g,"-");return Object.values(xr).indexOf(e)>=0?e:xr.UNKNOWN}(t.status);s(new _r(e,t.message))}else s(new _r(xr.UNKNOWN,"Server responded with status "+o.getStatus()))}else s(new _r(xr.UNAVAILABLE,"Connection failed."));break;default:kr()}}finally{Tr("Connection",'RPC "'+t+'" completed.')}}));const a=JSON.stringify(r);o.send(e,"POST",a,n,15)}))}ji(t,e){const n=[this.Fi,"/","google.firestore.v1.Firestore","/",t,"/channel"],r=ur(),i=lr(),s={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:`projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.autoDetectLongPolling};this.useFetchStreams&&(s.xmlHttpFactory=new pr({})),this.Ui(s.initMessageHeaders,e),(0,a.uI)()||(0,a.b$)()||(0,a.d)()||(0,a.w1)()||(0,a.Mn)()||(0,a.ru)()||(s.httpHeadersOverwriteParam="$httpHeaders");const o=n.join("");Tr("Connection","Creating WebChannel: "+o,s);const c=r.createWebChannel(o,s);let u=!1,l=!1;const h=new Oa({vi:t=>{l?Tr("Connection","Not sending because WebChannel is closed:",t):(u||(Tr("Connection","Opening WebChannel transport."),c.open(),u=!0),Tr("Connection","WebChannel sending:",t),c.send(t))},Vi:()=>c.close()}),d=(t,e,n)=>{t.listen(e,(t=>{try{n(t)}catch(t){setTimeout((()=>{throw t}),0)}}))};return d(c,gr.EventType.OPEN,(()=>{l||Tr("Connection","WebChannel transport opened.")})),d(c,gr.EventType.CLOSE,(()=>{l||(l=!0,Tr("Connection","WebChannel transport closed"),h.$i())})),d(c,gr.EventType.ERROR,(t=>{l||(l=!0,Cr("Connection","WebChannel transport errored:",t),h.$i(new _r(xr.UNAVAILABLE,"The operation could not be completed")))})),d(c,gr.EventType.MESSAGE,(t=>{var e;if(!l){const n=t.data[0];Dr(!!n);const r=n,i=r.error||(null===(e=r[0])||void 0===e?void 0:e.error);if(i){Tr("Connection","WebChannel received error:",i);const t=i.status;let e=function(t){const e=Bs[t];if(void 0!==e)return js(e)}(t),n=i.message;void 0===e&&(e=xr.INTERNAL,n="Unknown error status: "+t+" with message "+i.message),l=!0,h.$i(new _r(e,n)),c.close()}else Tr("Connection","WebChannel received:",n),h.Oi(n)}})),d(i,fr.STAT_EVENT,(t=>{t.stat===mr.PROXY?Tr("Connection","Detected buffering proxy"):t.stat===mr.NOPROXY&&Tr("Connection","Detected no buffering proxy")})),setTimeout((()=>{h.ki()}),0),h}}function Ua(){return"undefined"!=typeof document?document:null}function Fa(t){return new lo(t,!0)}class Va{constructor(t,e,n=1e3,r=1.5,i=6e4){this.Oe=t,this.timerId=e,this.Qi=n,this.Wi=r,this.Gi=i,this.zi=0,this.Hi=null,this.Ji=Date.now(),this.reset()}reset(){this.zi=0}Yi(){this.zi=this.Gi}Xi(t){this.cancel();const e=Math.floor(this.zi+this.Zi()),n=Math.max(0,Date.now()-this.Ji),r=Math.max(0,e-n);r>0&&Tr("ExponentialBackoff",`Backing off for ${r} ms (base delay: ${this.zi} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`),this.Hi=this.Oe.enqueueAfterDelay(this.timerId,r,(()=>(this.Ji=Date.now(),t()))),this.zi*=this.Wi,this.zi<this.Qi&&(this.zi=this.Qi),this.zi>this.Gi&&(this.zi=this.Gi)}tr(){null!==this.Hi&&(this.Hi.skipDelay(),this.Hi=null)}cancel(){null!==this.Hi&&(this.Hi.cancel(),this.Hi=null)}Zi(){return(Math.random()-.5)*this.zi}}class qa{constructor(t,e,n,r,i,s,o){this.Oe=t,this.er=n,this.nr=r,this.sr=i,this.credentialsProvider=s,this.listener=o,this.state=0,this.ir=0,this.rr=null,this.cr=null,this.stream=null,this.ar=new Va(t,e)}ur(){return 1===this.state||5===this.state||this.hr()}hr(){return 2===this.state||3===this.state}start(){4!==this.state?this.auth():this.lr()}async stop(){this.ur()&&await this.close(0)}dr(){this.state=0,this.ar.reset()}wr(){this.hr()&&null===this.rr&&(this.rr=this.Oe.enqueueAfterDelay(this.er,6e4,(()=>this._r())))}mr(t){this.gr(),this.stream.send(t)}async _r(){if(this.hr())return this.close(0)}gr(){this.rr&&(this.rr.cancel(),this.rr=null)}yr(){this.cr&&(this.cr.cancel(),this.cr=null)}async close(t,e){this.gr(),this.yr(),this.ar.cancel(),this.ir++,4!==t?this.ar.reset():e&&e.code===xr.RESOURCE_EXHAUSTED?(Ir(e.toString()),Ir("Using maximum backoff delay to prevent overloading the backend."),this.ar.Yi()):e&&e.code===xr.UNAUTHENTICATED&&3!==this.state&&this.credentialsProvider.invalidateToken(),null!==this.stream&&(this.pr(),this.stream.close(),this.stream=null),this.state=t,await this.listener.Ci(e)}pr(){}auth(){this.state=1;const t=this.Tr(this.ir),e=this.ir;this.credentialsProvider.getToken().then((t=>{this.ir===e&&this.Er(t)}),(e=>{t((()=>{const t=new _r(xr.UNKNOWN,"Fetching auth token failed: "+e.message);return this.Ir(t)}))}))}Er(t){const e=this.Tr(this.ir);this.stream=this.Ar(t),this.stream.Si((()=>{e((()=>(this.state=2,this.cr=this.Oe.enqueueAfterDelay(this.nr,1e4,(()=>(this.hr()&&(this.state=3),Promise.resolve()))),this.listener.Si())))})),this.stream.Ci((t=>{e((()=>this.Ir(t)))})),this.stream.onMessage((t=>{e((()=>this.onMessage(t)))}))}lr(){this.state=5,this.ar.Xi((async()=>{this.state=0,this.start()}))}Ir(t){return Tr("PersistentStream",`close with error: ${t}`),this.stream=null,this.close(4,t)}Tr(t){return e=>{this.Oe.enqueueAndForget((()=>this.ir===t?e():(Tr("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())))}}}class $a extends qa{constructor(t,e,n,r,i){super(t,"listen_stream_connection_backoff","listen_stream_idle","health_check_timeout",e,n,i),this.N=r}Ar(t){return this.sr.ji("Listen",t)}onMessage(t){this.ar.reset();const e=function(t,e){let n;if("targetChange"in e){e.targetChange;const r=function(t){return"NO_CHANGE"===t?0:"ADD"===t?1:"REMOVE"===t?2:"CURRENT"===t?3:"RESET"===t?4:kr()}(e.targetChange.targetChangeType||"NO_CHANGE"),i=e.targetChange.targetIds||[],s=function(t,e){return t.D?(Dr(void 0===e||"string"==typeof e),Jr.fromBase64String(e||"")):(Dr(void 0===e||e instanceof Uint8Array),Jr.fromUint8Array(e||new Uint8Array))}(t,e.targetChange.resumeToken),o=e.targetChange.cause,a=o&&function(t){const e=void 0===t.code?xr.UNKNOWN:js(t.code);return new _r(e,t.message||"")}(o);n=new ro(r,i,s,a||null)}else if("documentChange"in e){e.documentChange;const r=e.documentChange;r.document,r.document.name,r.document.updateTime;const i=wo(t,r.document.name),s=po(r.document.updateTime),o=new Ti({mapValue:{fields:r.document.fields}}),a=Ci.newFoundDocument(i,s,o),c=r.targetIds||[],u=r.removedTargetIds||[];n=new eo(c,u,a.key,a)}else if("documentDelete"in e){e.documentDelete;const r=e.documentDelete;r.document;const i=wo(t,r.document),s=r.readTime?po(r.readTime):Hr.min(),o=Ci.newNoDocument(i,s),a=r.removedTargetIds||[];n=new eo([],a,o.key,o)}else if("documentRemove"in e){e.documentRemove;const r=e.documentRemove;r.document;const i=wo(t,r.document),s=r.removedTargetIds||[];n=new eo([],s,i,null)}else{if(!("filter"in e))return kr();{e.filter;const t=e.filter;t.targetId;const r=t.count||0,i=new Rs(r),s=t.targetId;n=new no(s,i)}}return n}(this.N,t),n=function(t){if(!("targetChange"in t))return Hr.min();const e=t.targetChange;return e.targetIds&&e.targetIds.length?Hr.min():e.readTime?po(e.readTime):Hr.min()}(t);return this.listener.Rr(e,n)}br(t){const e={};e.database=bo(this.N),e.addTarget=function(t,e){let n;const r=e.target;return n=xi(r)?{documents:Io(t,r)}:{query:Co(t,r)},n.targetId=e.targetId,e.resumeToken.approximateByteSize()>0?n.resumeToken=fo(t,e.resumeToken):e.snapshotVersion.compareTo(Hr.min())>0&&(n.readTime=ho(t,e.snapshotVersion.toTimestamp())),n}(this.N,t);const n=function(t,e){const n=function(t,e){switch(e){case 0:return null;case 1:return"existence-filter-mismatch";case 2:return"limbo-document";default:return kr()}}(0,e.purpose);return null==n?null:{"goog-listen-tags":n}}(this.N,t);n&&(e.labels=n),this.mr(e)}Pr(t){const e={};e.database=bo(this.N),e.removeTarget=t,this.mr(e)}}class Ha extends qa{constructor(t,e,n,r,i){super(t,"write_stream_connection_backoff","write_stream_idle","health_check_timeout",e,n,i),this.N=r,this.vr=!1}get Vr(){return this.vr}start(){this.vr=!1,this.lastStreamToken=void 0,super.start()}pr(){this.vr&&this.Sr([])}Ar(t){return this.sr.ji("Write",t)}onMessage(t){if(Dr(!!t.streamToken),this.lastStreamToken=t.streamToken,this.vr){this.ar.reset();const e=function(t,e){return t&&t.length>0?(Dr(void 0!==e),t.map((t=>function(t,e){let n=t.updateTime?po(t.updateTime):po(e);return n.isEqual(Hr.min())&&(n=po(e)),new ws(n,t.transformResults||[])}(t,e)))):[]}(t.writeResults,t.commitTime),n=po(t.commitTime);return this.listener.Dr(n,e)}return Dr(!t.writeResults||0===t.writeResults.length),this.vr=!0,this.listener.Cr()}Nr(){const t={};t.database=bo(this.N),this.mr(t)}Sr(t){const e={streamToken:this.lastStreamToken,writes:t.map((t=>function(t,e){let n;if(e instanceof Ds)n={update:To(t,e.key,e.value)};else if(e instanceof Ps)n={delete:vo(t,e.key)};else if(e instanceof Ns)n={update:To(t,e.key,e.data),updateMask:Bo(e.fieldMask)};else{if(!(e instanceof Ms))return kr();n={verify:vo(t,e.key)}}return e.fieldTransforms.length>0&&(n.updateTransforms=e.fieldTransforms.map((t=>function(t,e){const n=e.transform;if(n instanceof hs)return{fieldPath:e.field.canonicalString(),setToServerValue:"REQUEST_TIME"};if(n instanceof ds)return{fieldPath:e.field.canonicalString(),appendMissingElements:{values:n.elements}};if(n instanceof ms)return{fieldPath:e.field.canonicalString(),removeAllFromArray:{values:n.elements}};if(n instanceof gs)return{fieldPath:e.field.canonicalString(),increment:n.C};throw kr()}(0,t)))),e.precondition.isNone||(n.currentDocument=function(t,e){return void 0!==e.updateTime?{updateTime:mo(t,e.updateTime)}:void 0!==e.exists?{exists:e.exists}:kr()}(t,e.precondition)),n}(this.N,t)))};this.mr(e)}}class za extends class{}{constructor(t,e,n){super(),this.credentials=t,this.sr=e,this.N=n,this.kr=!1}$r(){if(this.kr)throw new _r(xr.FAILED_PRECONDITION,"The client has already been terminated.")}Li(t,e,n){return this.$r(),this.credentials.getToken().then((r=>this.sr.Li(t,e,n,r))).catch((t=>{throw"FirebaseError"===t.name?(t.code===xr.UNAUTHENTICATED&&this.credentials.invalidateToken(),t):new _r(xr.UNKNOWN,t.toString())}))}Ki(t,e,n){return this.$r(),this.credentials.getToken().then((r=>this.sr.Ki(t,e,n,r))).catch((t=>{throw"FirebaseError"===t.name?(t.code===xr.UNAUTHENTICATED&&this.credentials.invalidateToken(),t):new _r(xr.UNKNOWN,t.toString())}))}terminate(){this.kr=!0}}class Wa{constructor(t,e){this.asyncQueue=t,this.onlineStateHandler=e,this.state="Unknown",this.Or=0,this.Fr=null,this.Mr=!0}Lr(){0===this.Or&&(this.Br("Unknown"),this.Fr=this.asyncQueue.enqueueAfterDelay("online_state_timeout",1e4,(()=>(this.Fr=null,this.Ur("Backend didn't respond within 10 seconds."),this.Br("Offline"),Promise.resolve()))))}qr(t){"Online"===this.state?this.Br("Unknown"):(this.Or++,this.Or>=1&&(this.Kr(),this.Ur(`Connection failed 1 times. Most recent error: ${t.toString()}`),this.Br("Offline")))}set(t){this.Kr(),this.Or=0,"Online"===t&&(this.Mr=!1),this.Br(t)}Br(t){t!==this.state&&(this.state=t,this.onlineStateHandler(t))}Ur(t){const e=`Could not reach Cloud Firestore backend. ${t}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;this.Mr?(Ir(e),this.Mr=!1):Tr("OnlineStateTracker",e)}Kr(){null!==this.Fr&&(this.Fr.cancel(),this.Fr=null)}}class Ka{constructor(t,e,n,r,i){this.localStore=t,this.datastore=e,this.asyncQueue=n,this.remoteSyncer={},this.jr=[],this.Qr=new Map,this.Wr=new Set,this.Gr=[],this.zr=i,this.zr.Ti((t=>{n.enqueueAndForget((async()=>{nc(this)&&(Tr("RemoteStore","Restarting streams for network reachability change."),await async function(t){const e=Nr(t);e.Wr.add(4),await Ya(e),e.Hr.set("Unknown"),e.Wr.delete(4),await Ga(e)}(this))}))})),this.Hr=new Wa(n,r)}}async function Ga(t){if(nc(t))for(const e of t.Gr)await e(!0)}async function Ya(t){for(const e of t.Gr)await e(!1)}function Za(t,e){const n=Nr(t);n.Qr.has(e.targetId)||(n.Qr.set(e.targetId,e),ec(n)?tc(n):vc(n).hr()&&Xa(n,e))}function Qa(t,e){const n=Nr(t),r=vc(n);n.Qr.delete(e),r.hr()&&Ja(n,e),0===n.Qr.size&&(r.hr()?r.wr():nc(n)&&n.Hr.set("Unknown"))}function Xa(t,e){t.Jr.Y(e.targetId),vc(t).br(e)}function Ja(t,e){t.Jr.Y(e),vc(t).Pr(e)}function tc(t){t.Jr=new so({getRemoteKeysForTarget:e=>t.remoteSyncer.getRemoteKeysForTarget(e),Tt:e=>t.Qr.get(e)||null}),vc(t).start(),t.Hr.Lr()}function ec(t){return nc(t)&&!vc(t).ur()&&t.Qr.size>0}function nc(t){return 0===Nr(t).Wr.size}function rc(t){t.Jr=void 0}async function ic(t){t.Qr.forEach(((e,n)=>{Xa(t,e)}))}async function sc(t,e){rc(t),ec(t)?(t.Hr.qr(e),tc(t)):t.Hr.set("Unknown")}async function oc(t,e,n){if(t.Hr.set("Online"),e instanceof ro&&2===e.state&&e.cause)try{await async function(t,e){const n=e.cause;for(const r of e.targetIds)t.Qr.has(r)&&(await t.remoteSyncer.rejectListen(r,n),t.Qr.delete(r),t.Jr.removeTarget(r))}(t,e)}catch(n){Tr("RemoteStore","Failed to remove targets %s: %s ",e.targetIds.join(","),n),await ac(t,n)}else if(e instanceof eo?t.Jr.rt(e):e instanceof no?t.Jr.ft(e):t.Jr.at(e),!n.isEqual(Hr.min()))try{const e=await va(t.localStore);n.compareTo(e)>=0&&await function(t,e){const n=t.Jr._t(e);return n.targetChanges.forEach(((n,r)=>{if(n.resumeToken.approximateByteSize()>0){const i=t.Qr.get(r);i&&t.Qr.set(r,i.withResumeToken(n.resumeToken,e))}})),n.targetMismatches.forEach((e=>{const n=t.Qr.get(e);if(!n)return;t.Qr.set(e,n.withResumeToken(Jr.EMPTY_BYTE_STRING,n.snapshotVersion)),Ja(t,e);const r=new ia(n.target,e,1,n.sequenceNumber);Xa(t,r)})),t.remoteSyncer.applyRemoteEvent(n)}(t,n)}catch(e){Tr("RemoteStore","Failed to raise snapshot:",e),await ac(t,e)}}async function ac(t,e,n){if(!ea(e))throw e;t.Wr.add(1),await Ya(t),t.Hr.set("Offline"),n||(n=()=>va(t.localStore)),t.asyncQueue.enqueueRetryable((async()=>{Tr("RemoteStore","Retrying IndexedDB access"),await n(),t.Wr.delete(1),await Ga(t)}))}function cc(t,e){return e().catch((n=>ac(t,n,e)))}async function uc(t){const e=Nr(t),n=wc(e);let r=e.jr.length>0?e.jr[e.jr.length-1].batchId:-1;for(;lc(e);)try{const t=await wa(e.localStore,r);if(null===t){0===e.jr.length&&n.wr();break}r=t.batchId,hc(e,t)}catch(t){await ac(e,t)}dc(e)&&fc(e)}function lc(t){return nc(t)&&t.jr.length<10}function hc(t,e){t.jr.push(e);const n=wc(t);n.hr()&&n.Vr&&n.Sr(e.mutations)}function dc(t){return nc(t)&&!wc(t).ur()&&t.jr.length>0}function fc(t){wc(t).start()}async function mc(t){wc(t).Nr()}async function pc(t){const e=wc(t);for(const n of t.jr)e.Sr(n.mutations)}async function gc(t,e,n){const r=t.jr.shift(),i=ra.from(r,e,n);await cc(t,(()=>t.remoteSyncer.applySuccessfulWrite(i))),await uc(t)}async function yc(t,e){e&&wc(t).Vr&&await async function(t,e){if(function(t){switch(t){default:return kr();case xr.CANCELLED:case xr.UNKNOWN:case xr.DEADLINE_EXCEEDED:case xr.RESOURCE_EXHAUSTED:case xr.INTERNAL:case xr.UNAVAILABLE:case xr.UNAUTHENTICATED:return!1;case xr.INVALID_ARGUMENT:case xr.NOT_FOUND:case xr.ALREADY_EXISTS:case xr.PERMISSION_DENIED:case xr.FAILED_PRECONDITION:case xr.ABORTED:case xr.OUT_OF_RANGE:case xr.UNIMPLEMENTED:case xr.DATA_LOSS:return!0}}(n=e.code)&&n!==xr.ABORTED){const n=t.jr.shift();wc(t).dr(),await cc(t,(()=>t.remoteSyncer.rejectFailedWrite(n.batchId,e))),await uc(t)}var n}(t,e),dc(t)&&fc(t)}function vc(t){return t.Yr||(t.Yr=function(t,e,n){const r=Nr(t);return r.$r(),new $a(e,r.sr,r.credentials,r.N,n)}(t.datastore,t.asyncQueue,{Si:ic.bind(null,t),Ci:sc.bind(null,t),Rr:oc.bind(null,t)}),t.Gr.push((async e=>{e?(t.Yr.dr(),ec(t)?tc(t):t.Hr.set("Unknown")):(await t.Yr.stop(),rc(t))}))),t.Yr}function wc(t){return t.Xr||(t.Xr=function(t,e,n){const r=Nr(t);return r.$r(),new Ha(e,r.sr,r.credentials,r.N,n)}(t.datastore,t.asyncQueue,{Si:mc.bind(null,t),Ci:yc.bind(null,t),Cr:pc.bind(null,t),Dr:gc.bind(null,t)}),t.Gr.push((async e=>{e?(t.Xr.dr(),await uc(t)):(await t.Xr.stop(),t.jr.length>0&&(Tr("RemoteStore",`Stopping write stream with ${t.jr.length} pending writes`),t.jr=[]))}))),t.Xr}class Ac{constructor(t,e,n,r,i){this.asyncQueue=t,this.timerId=e,this.targetTimeMs=n,this.op=r,this.removalCallback=i,this.deferred=new Lr,this.then=this.deferred.promise.then.bind(this.deferred.promise),this.deferred.promise.catch((t=>{}))}static createAndSchedule(t,e,n,r,i){const s=Date.now()+n,o=new Ac(t,e,s,r,i);return o.start(n),o}start(t){this.timerHandle=setTimeout((()=>this.handleDelayElapsed()),t)}skipDelay(){return this.handleDelayElapsed()}cancel(t){null!==this.timerHandle&&(this.clearTimeout(),this.deferred.reject(new _r(xr.CANCELLED,"Operation cancelled"+(t?": "+t:""))))}handleDelayElapsed(){this.asyncQueue.enqueueAndForget((()=>null!==this.timerHandle?(this.clearTimeout(),this.op().then((t=>this.deferred.resolve(t)))):Promise.resolve()))}clearTimeout(){null!==this.timerHandle&&(this.removalCallback(this),clearTimeout(this.timerHandle),this.timerHandle=null)}}function bc(t,e){if(Ir("AsyncQueue",`${e}: ${t}`),ea(t))return new _r(xr.UNAVAILABLE,`${e}: ${t}`);throw t}class Ec{constructor(t){this.comparator=t?(e,n)=>t(e,n)||ui.comparator(e.key,n.key):(t,e)=>ui.comparator(t.key,e.key),this.keyedMap=Ks(),this.sortedSet=new Us(this.comparator)}static emptySet(t){return new Ec(t.comparator)}has(t){return null!=this.keyedMap.get(t)}get(t){return this.keyedMap.get(t)}first(){return this.sortedSet.minKey()}last(){return this.sortedSet.maxKey()}isEmpty(){return this.sortedSet.isEmpty()}indexOf(t){const e=this.keyedMap.get(t);return e?this.sortedSet.indexOf(e):-1}get size(){return this.sortedSet.size}forEach(t){this.sortedSet.inorderTraversal(((e,n)=>(t(e),!1)))}add(t){const e=this.delete(t.key);return e.copy(e.keyedMap.insert(t.key,t),e.sortedSet.insert(t,null))}delete(t){const e=this.get(t);return e?this.copy(this.keyedMap.remove(t),this.sortedSet.remove(e)):this}isEqual(t){if(!(t instanceof Ec))return!1;if(this.size!==t.size)return!1;const e=this.sortedSet.getIterator(),n=t.sortedSet.getIterator();for(;e.hasNext();){const t=e.getNext().key,r=n.getNext().key;if(!t.isEqual(r))return!1}return!0}toString(){const t=[];return this.forEach((e=>{t.push(e.toString())})),0===t.length?"DocumentSet ()":"DocumentSet (\n  "+t.join("  \n")+"\n)"}copy(t,e){const n=new Ec;return n.comparator=this.comparator,n.keyedMap=t,n.sortedSet=e,n}}class Tc{constructor(){this.Zr=new Us(ui.comparator)}track(t){const e=t.doc.key,n=this.Zr.get(e);n?0!==t.type&&3===n.type?this.Zr=this.Zr.insert(e,t):3===t.type&&1!==n.type?this.Zr=this.Zr.insert(e,{type:n.type,doc:t.doc}):2===t.type&&2===n.type?this.Zr=this.Zr.insert(e,{type:2,doc:t.doc}):2===t.type&&0===n.type?this.Zr=this.Zr.insert(e,{type:0,doc:t.doc}):1===t.type&&0===n.type?this.Zr=this.Zr.remove(e):1===t.type&&2===n.type?this.Zr=this.Zr.insert(e,{type:1,doc:n.doc}):0===t.type&&1===n.type?this.Zr=this.Zr.insert(e,{type:2,doc:t.doc}):kr():this.Zr=this.Zr.insert(e,t)}eo(){const t=[];return this.Zr.inorderTraversal(((e,n)=>{t.push(n)})),t}}class Ic{constructor(t,e,n,r,i,s,o,a){this.query=t,this.docs=e,this.oldDocs=n,this.docChanges=r,this.mutatedKeys=i,this.fromCache=s,this.syncStateChanged=o,this.excludesMetadataChanges=a}static fromInitialDocuments(t,e,n,r){const i=[];return e.forEach((t=>{i.push({type:0,doc:t})})),new Ic(t,e,Ec.emptySet(e),i,n,r,!0,!1)}get hasPendingWrites(){return!this.mutatedKeys.isEmpty()}isEqual(t){if(!(this.fromCache===t.fromCache&&this.syncStateChanged===t.syncStateChanged&&this.mutatedKeys.isEqual(t.mutatedKeys)&&Xi(this.query,t.query)&&this.docs.isEqual(t.docs)&&this.oldDocs.isEqual(t.oldDocs)))return!1;const e=this.docChanges,n=t.docChanges;if(e.length!==n.length)return!1;for(let t=0;t<e.length;t++)if(e[t].type!==n[t].type||!e[t].doc.isEqual(n[t].doc))return!1;return!0}}class Cc{constructor(){this.no=void 0,this.listeners=[]}}class Sc{constructor(){this.queries=new da((t=>Ji(t)),Xi),this.onlineState="Unknown",this.so=new Set}}function kc(t,e){const n=Nr(t);let r=!1;for(const t of e){const e=t.query,i=n.queries.get(e);if(i){for(const e of i.listeners)e.ro(t)&&(r=!0);i.no=t}}r&&Nc(n)}function Dc(t,e,n){const r=Nr(t),i=r.queries.get(e);if(i)for(const t of i.listeners)t.onError(n);r.queries.delete(e)}function Nc(t){t.so.forEach((t=>{t.next()}))}class xc{constructor(t,e,n){this.query=t,this.oo=e,this.co=!1,this.ao=null,this.onlineState="Unknown",this.options=n||{}}ro(t){if(!this.options.includeMetadataChanges){const e=[];for(const n of t.docChanges)3!==n.type&&e.push(n);t=new Ic(t.query,t.docs,t.oldDocs,e,t.mutatedKeys,t.fromCache,t.syncStateChanged,!0)}let e=!1;return this.co?this.uo(t)&&(this.oo.next(t),e=!0):this.ho(t,this.onlineState)&&(this.lo(t),e=!0),this.ao=t,e}onError(t){this.oo.error(t)}io(t){this.onlineState=t;let e=!1;return this.ao&&!this.co&&this.ho(this.ao,t)&&(this.lo(this.ao),e=!0),e}ho(t,e){if(!t.fromCache)return!0;const n="Offline"!==e;return!(this.options.fo&&n||t.docs.isEmpty()&&"Offline"!==e)}uo(t){if(t.docChanges.length>0)return!0;const e=this.ao&&this.ao.hasPendingWrites!==t.hasPendingWrites;return!(!t.syncStateChanged&&!e)&&!0===this.options.includeMetadataChanges}lo(t){t=Ic.fromInitialDocuments(t.query,t.docs,t.mutatedKeys,t.fromCache),this.co=!0,this.oo.next(t)}}class _c{constructor(t){this.key=t}}class Lc{constructor(t){this.key=t}}class Pc{constructor(t,e){this.query=t,this.po=e,this.To=null,this.current=!1,this.Eo=Zs(),this.mutatedKeys=Zs(),this.Io=ns(t),this.Ao=new Ec(this.Io)}get Ro(){return this.po}bo(t,e){const n=e?e.Po:new Tc,r=e?e.Ao:this.Ao;let i=e?e.mutatedKeys:this.mutatedKeys,s=r,o=!1;const a=Gi(this.query)&&r.size===this.query.limit?r.last():null,c=Yi(this.query)&&r.size===this.query.limit?r.first():null;if(t.inorderTraversal(((t,e)=>{const u=r.get(t),l=es(this.query,e)?e:null,h=!!u&&this.mutatedKeys.has(u.key),d=!!l&&(l.hasLocalMutations||this.mutatedKeys.has(l.key)&&l.hasCommittedMutations);let f=!1;u&&l?u.data.isEqual(l.data)?h!==d&&(n.track({type:3,doc:l}),f=!0):this.vo(u,l)||(n.track({type:2,doc:l}),f=!0,(a&&this.Io(l,a)>0||c&&this.Io(l,c)<0)&&(o=!0)):!u&&l?(n.track({type:0,doc:l}),f=!0):u&&!l&&(n.track({type:1,doc:u}),f=!0,(a||c)&&(o=!0)),f&&(l?(s=s.add(l),i=d?i.add(t):i.delete(t)):(s=s.delete(t),i=i.delete(t)))})),Gi(this.query)||Yi(this.query))for(;s.size>this.query.limit;){const t=Gi(this.query)?s.last():s.first();s=s.delete(t.key),i=i.delete(t.key),n.track({type:1,doc:t})}return{Ao:s,Po:n,Ln:o,mutatedKeys:i}}vo(t,e){return t.hasLocalMutations&&e.hasCommittedMutations&&!e.hasLocalMutations}applyChanges(t,e,n){const r=this.Ao;this.Ao=t.Ao,this.mutatedKeys=t.mutatedKeys;const i=t.Po.eo();i.sort(((t,e)=>function(t,e){const n=t=>{switch(t){case 0:return 1;case 2:case 3:return 2;case 1:return 0;default:return kr()}};return n(t)-n(e)}(t.type,e.type)||this.Io(t.doc,e.doc))),this.Vo(n);const s=e?this.So():[],o=0===this.Eo.size&&this.current?1:0,a=o!==this.To;return this.To=o,0!==i.length||a?{snapshot:new Ic(this.query,t.Ao,r,i,t.mutatedKeys,0===o,a,!1),Do:s}:{Do:s}}io(t){return this.current&&"Offline"===t?(this.current=!1,this.applyChanges({Ao:this.Ao,Po:new Tc,mutatedKeys:this.mutatedKeys,Ln:!1},!1)):{Do:[]}}Co(t){return!this.po.has(t)&&!!this.Ao.has(t)&&!this.Ao.get(t).hasLocalMutations}Vo(t){t&&(t.addedDocuments.forEach((t=>this.po=this.po.add(t))),t.modifiedDocuments.forEach((t=>{})),t.removedDocuments.forEach((t=>this.po=this.po.delete(t))),this.current=t.current)}So(){if(!this.current)return[];const t=this.Eo;this.Eo=Zs(),this.Ao.forEach((t=>{this.Co(t.key)&&(this.Eo=this.Eo.add(t.key))}));const e=[];return t.forEach((t=>{this.Eo.has(t)||e.push(new Lc(t))})),this.Eo.forEach((n=>{t.has(n)||e.push(new _c(n))})),e}No(t){this.po=t.Gn,this.Eo=Zs();const e=this.bo(t.documents);return this.applyChanges(e,!0)}xo(){return Ic.fromInitialDocuments(this.query,this.Ao,this.mutatedKeys,0===this.To)}}class Mc{constructor(t,e,n){this.query=t,this.targetId=e,this.view=n}}class Rc{constructor(t){this.key=t,this.ko=!1}}class Bc{constructor(t,e,n,r,i,s){this.localStore=t,this.remoteStore=e,this.eventManager=n,this.sharedClientState=r,this.currentUser=i,this.maxConcurrentLimboResolutions=s,this.$o={},this.Oo=new da((t=>Ji(t)),Xi),this.Fo=new Map,this.Mo=new Set,this.Lo=new Us(ui.comparator),this.Bo=new Map,this.Uo=new Ta,this.qo={},this.Ko=new Map,this.jo=la.ie(),this.onlineState="Unknown",this.Qo=void 0}get isPrimaryClient(){return!0===this.Qo}}async function Oc(t,e){const n=function(t){const e=Nr(t);return e.remoteStore.remoteSyncer.applyRemoteEvent=Uc.bind(null,e),e.remoteStore.remoteSyncer.getRemoteKeysForTarget=Jc.bind(null,e),e.remoteStore.remoteSyncer.rejectListen=Vc.bind(null,e),e.$o.Rr=kc.bind(null,e.eventManager),e.$o.Go=Dc.bind(null,e.eventManager),e}(t);let r,i;const s=n.Oo.get(e);if(s)r=s.targetId,n.sharedClientState.addLocalQueryTarget(r),i=s.view.xo();else{const t=await function(t,e){const n=Nr(t);return n.persistence.runTransaction("Allocate target","readwrite",(t=>{let r;return n.ze.getTargetData(t,e).next((i=>i?(r=i,ta.resolve(r)):n.ze.allocateTargetId(t).next((i=>(r=new ia(e,i,0,t.currentSequenceNumber),n.ze.addTargetData(t,r).next((()=>r)))))))})).then((t=>{const r=n.Un.get(t.targetId);return(null===r||t.snapshotVersion.compareTo(r.snapshotVersion)>0)&&(n.Un=n.Un.insert(t.targetId,t),n.qn.set(e,t.targetId)),t}))}(n.localStore,Qi(e)),s=n.sharedClientState.addLocalQueryTarget(t.targetId);r=t.targetId,i=await async function(t,e,n,r){t.Wo=(e,n,r)=>async function(t,e,n,r){let i=e.view.bo(n);i.Ln&&(i=await ba(t.localStore,e.query,!1).then((({documents:t})=>e.view.bo(t,i))));const s=r&&r.targetChanges.get(e.targetId),o=e.view.applyChanges(i,t.isPrimaryClient,s);return Gc(t,e.targetId,o.Do),o.snapshot}(t,e,n,r);const i=await ba(t.localStore,e,!0),s=new Pc(e,i.Gn),o=s.bo(i.documents),a=to.createSynthesizedTargetChangeForCurrentChange(n,r&&"Offline"!==t.onlineState),c=s.applyChanges(o,t.isPrimaryClient,a);Gc(t,n,c.Do);const u=new Mc(e,n,s);return t.Oo.set(e,u),t.Fo.has(n)?t.Fo.get(n).push(e):t.Fo.set(n,[e]),c.snapshot}(n,e,r,"current"===s),n.isPrimaryClient&&Za(n.remoteStore,t)}return i}async function jc(t,e){const n=Nr(t),r=n.Oo.get(e),i=n.Fo.get(r.targetId);if(i.length>1)return n.Fo.set(r.targetId,i.filter((t=>!Xi(t,e)))),void n.Oo.delete(e);n.isPrimaryClient?(n.sharedClientState.removeLocalQueryTarget(r.targetId),n.sharedClientState.isActiveQueryTarget(r.targetId)||await Aa(n.localStore,r.targetId,!1).then((()=>{n.sharedClientState.clearQueryState(r.targetId),Qa(n.remoteStore,r.targetId),Wc(n,r.targetId)})).catch(ha)):(Wc(n,r.targetId),await Aa(n.localStore,r.targetId,!0))}async function Uc(t,e){const n=Nr(t);try{const t=await function(t,e){const n=Nr(t),r=e.snapshotVersion;let i=n.Un;return n.persistence.runTransaction("Apply remote event","readwrite-primary",(t=>{const s=n.jn.newChangeBuffer({trackRemovals:!0});i=n.Un;const o=[];e.targetChanges.forEach(((e,s)=>{const a=i.get(s);if(!a)return;o.push(n.ze.removeMatchingKeys(t,e.removedDocuments,s).next((()=>n.ze.addMatchingKeys(t,e.addedDocuments,s))));const c=e.resumeToken;if(c.approximateByteSize()>0){const u=a.withResumeToken(c,r).withSequenceNumber(t.currentSequenceNumber);i=i.insert(s,u),function(t,e,n){return Dr(e.resumeToken.approximateByteSize()>0),0===t.resumeToken.approximateByteSize()||e.snapshotVersion.toMicroseconds()-t.snapshotVersion.toMicroseconds()>=3e8||n.addedDocuments.size+n.modifiedDocuments.size+n.removedDocuments.size>0}(a,u,e)&&o.push(n.ze.updateTargetData(t,u))}}));let a=zs();if(e.documentUpdates.forEach(((r,i)=>{e.resolvedLimboDocuments.has(r)&&o.push(n.persistence.referenceDelegate.updateLimboDocument(t,r))})),o.push(function(t,e,n,r,i){let s=Zs();return n.forEach((t=>s=s.add(t))),e.getEntries(t,s).next((t=>{let s=zs();return n.forEach(((n,o)=>{const a=t.get(n),c=(null==i?void 0:i.get(n))||r;o.isNoDocument()&&o.version.isEqual(Hr.min())?(e.removeEntry(n,c),s=s.insert(n,o)):!a.isValidDocument()||o.version.compareTo(a.version)>0||0===o.version.compareTo(a.version)&&a.hasPendingWrites?(e.addEntry(o,c),s=s.insert(n,o)):Tr("LocalStore","Ignoring outdated watch update for ",n,". Current version:",a.version," Watch version:",o.version)})),s}))}(t,s,e.documentUpdates,r,void 0).next((t=>{a=t}))),!r.isEqual(Hr.min())){const e=n.ze.getLastRemoteSnapshotVersion(t).next((e=>n.ze.setTargetsMetadata(t,t.currentSequenceNumber,r)));o.push(e)}return ta.waitFor(o).next((()=>s.apply(t))).next((()=>n.Qn.vn(t,a))).next((()=>a))})).then((t=>(n.Un=i,t)))}(n.localStore,e);e.targetChanges.forEach(((t,e)=>{const r=n.Bo.get(e);r&&(Dr(t.addedDocuments.size+t.modifiedDocuments.size+t.removedDocuments.size<=1),t.addedDocuments.size>0?r.ko=!0:t.modifiedDocuments.size>0?Dr(r.ko):t.removedDocuments.size>0&&(Dr(r.ko),r.ko=!1))})),await Qc(n,t,e)}catch(t){await ha(t)}}function Fc(t,e,n){const r=Nr(t);if(r.isPrimaryClient&&0===n||!r.isPrimaryClient&&1===n){const t=[];r.Oo.forEach(((n,r)=>{const i=r.view.io(e);i.snapshot&&t.push(i.snapshot)})),function(t,e){const n=Nr(t);n.onlineState=e;let r=!1;n.queries.forEach(((t,n)=>{for(const t of n.listeners)t.io(e)&&(r=!0)})),r&&Nc(n)}(r.eventManager,e),t.length&&r.$o.Rr(t),r.onlineState=e,r.isPrimaryClient&&r.sharedClientState.setOnlineState(e)}}async function Vc(t,e,n){const r=Nr(t);r.sharedClientState.updateQueryState(e,"rejected",n);const i=r.Bo.get(e),s=i&&i.key;if(s){let t=new Us(ui.comparator);t=t.insert(s,Ci.newNoDocument(s,Hr.min()));const n=Zs().add(s),i=new Js(Hr.min(),new Map,new qs(Vr),t,n);await Uc(r,i),r.Lo=r.Lo.remove(s),r.Bo.delete(e),Zc(r)}else await Aa(r.localStore,e,!1).then((()=>Wc(r,e,n))).catch(ha)}async function qc(t,e){const n=Nr(t),r=e.batch.batchId;try{const t=await function(t,e){const n=Nr(t);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(t=>{const r=e.batch.keys(),i=n.jn.newChangeBuffer({trackRemovals:!0});return function(t,e,n,r){const i=n.batch,s=i.keys();let o=ta.resolve();return s.forEach((t=>{o=o.next((()=>r.getEntry(e,t))).next((e=>{const s=n.docVersions.get(t);Dr(null!==s),e.version.compareTo(s)<0&&(i.applyToRemoteDocument(e,n),e.isValidDocument()&&r.addEntry(e,n.commitVersion))}))})),o.next((()=>t.In.removeMutationBatch(e,i)))}(n,t,e,i).next((()=>i.apply(t))).next((()=>n.In.performConsistencyCheck(t))).next((()=>n.Qn.Pn(t,r)))}))}(n.localStore,e);zc(n,r,null),Hc(n,r),n.sharedClientState.updateMutationState(r,"acknowledged"),await Qc(n,t)}catch(t){await ha(t)}}async function $c(t,e,n){const r=Nr(t);try{const t=await function(t,e){const n=Nr(t);return n.persistence.runTransaction("Reject batch","readwrite-primary",(t=>{let r;return n.In.lookupMutationBatch(t,e).next((e=>(Dr(null!==e),r=e.keys(),n.In.removeMutationBatch(t,e)))).next((()=>n.In.performConsistencyCheck(t))).next((()=>n.Qn.Pn(t,r)))}))}(r.localStore,e);zc(r,e,n),Hc(r,e),r.sharedClientState.updateMutationState(e,"rejected",n),await Qc(r,t)}catch(n){await ha(n)}}function Hc(t,e){(t.Ko.get(e)||[]).forEach((t=>{t.resolve()})),t.Ko.delete(e)}function zc(t,e,n){const r=Nr(t);let i=r.qo[r.currentUser.toKey()];if(i){const t=i.get(e);t&&(n?t.reject(n):t.resolve(),i=i.remove(e)),r.qo[r.currentUser.toKey()]=i}}function Wc(t,e,n=null){t.sharedClientState.removeLocalQueryTarget(e);for(const r of t.Fo.get(e))t.Oo.delete(r),n&&t.$o.Go(r,n);t.Fo.delete(e),t.isPrimaryClient&&t.Uo.cs(e).forEach((e=>{t.Uo.containsKey(e)||Kc(t,e)}))}function Kc(t,e){t.Mo.delete(e.path.canonicalString());const n=t.Lo.get(e);null!==n&&(Qa(t.remoteStore,n),t.Lo=t.Lo.remove(e),t.Bo.delete(n),Zc(t))}function Gc(t,e,n){for(const r of n)r instanceof _c?(t.Uo.addReference(r.key,e),Yc(t,r)):r instanceof Lc?(Tr("SyncEngine","Document no longer in limbo: "+r.key),t.Uo.removeReference(r.key,e),t.Uo.containsKey(r.key)||Kc(t,r.key)):kr()}function Yc(t,e){const n=e.key,r=n.path.canonicalString();t.Lo.get(n)||t.Mo.has(r)||(Tr("SyncEngine","New document in limbo: "+n),t.Mo.add(r),Zc(t))}function Zc(t){for(;t.Mo.size>0&&t.Lo.size<t.maxConcurrentLimboResolutions;){const e=t.Mo.values().next().value;t.Mo.delete(e);const n=new ui(Yr.fromString(e)),r=t.jo.next();t.Bo.set(r,new Rc(n)),t.Lo=t.Lo.insert(n,r),Za(t.remoteStore,new ia(Qi(Ki(n.path)),r,2,jr.T))}}async function Qc(t,e,n){const r=Nr(t),i=[],s=[],o=[];r.Oo.isEmpty()||(r.Oo.forEach(((t,a)=>{o.push(r.Wo(a,e,n).then((t=>{if(t){r.isPrimaryClient&&r.sharedClientState.updateQueryState(a.targetId,t.fromCache?"not-current":"current"),i.push(t);const e=ma.kn(a.targetId,t);s.push(e)}})))})),await Promise.all(o),r.$o.Rr(i),await async function(t,e){const n=Nr(t);try{await n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(t=>ta.forEach(e,(e=>ta.forEach(e.Nn,(r=>n.persistence.referenceDelegate.addReference(t,e.targetId,r))).next((()=>ta.forEach(e.xn,(r=>n.persistence.referenceDelegate.removeReference(t,e.targetId,r)))))))))}catch(t){if(!ea(t))throw t;Tr("LocalStore","Failed to update sequence numbers: "+t)}for(const t of e){const e=t.targetId;if(!t.fromCache){const t=n.Un.get(e),r=t.snapshotVersion,i=t.withLastLimboFreeSnapshotVersion(r);n.Un=n.Un.insert(e,i)}}}(r.localStore,s))}async function Xc(t,e){const n=Nr(t);if(!n.currentUser.isEqual(e)){Tr("SyncEngine","User change. New user:",e.toKey());const t=await ya(n.localStore,e);n.currentUser=e,function(t,e){t.Ko.forEach((t=>{t.forEach((t=>{t.reject(new _r(xr.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),t.Ko.clear()}(n),n.sharedClientState.handleUserChange(e,t.removedBatchIds,t.addedBatchIds),await Qc(n,t.Wn)}}function Jc(t,e){const n=Nr(t),r=n.Bo.get(e);if(r&&r.ko)return Zs().add(r.key);{let t=Zs();const r=n.Fo.get(e);if(!r)return t;for(const e of r){const r=n.Oo.get(e);t=t.unionWith(r.view.Ro)}return t}}function tu(t){const e=Nr(t);return e.remoteStore.remoteSyncer.applySuccessfulWrite=qc.bind(null,e),e.remoteStore.remoteSyncer.rejectFailedWrite=$c.bind(null,e),e}class eu{constructor(){this.synchronizeTabs=!1}async initialize(t){this.N=Fa(t.databaseInfo.databaseId),this.sharedClientState=this.Ho(t),this.persistence=this.Jo(t),await this.persistence.start(),this.gcScheduler=this.Yo(t),this.localStore=this.Xo(t)}Yo(t){return null}Xo(t){return function(t,e,n,r){return new ga(t,e,n,r)}(this.persistence,new pa,t.initialUser,this.N)}Jo(t){return new Na(_a.Ns,this.N)}Ho(t){return new Pa}async terminate(){this.gcScheduler&&this.gcScheduler.stop(),await this.sharedClientState.shutdown(),await this.persistence.shutdown()}}class nu{async initialize(t,e){this.localStore||(this.localStore=t.localStore,this.sharedClientState=t.sharedClientState,this.datastore=this.createDatastore(e),this.remoteStore=this.createRemoteStore(e),this.eventManager=this.createEventManager(e),this.syncEngine=this.createSyncEngine(e,!t.synchronizeTabs),this.sharedClientState.onlineStateHandler=t=>Fc(this.syncEngine,t,1),this.remoteStore.remoteSyncer.handleCredentialChange=Xc.bind(null,this.syncEngine),await async function(t,e){const n=Nr(t);e?(n.Wr.delete(2),await Ga(n)):e||(n.Wr.add(2),await Ya(n),n.Hr.set("Unknown"))}(this.remoteStore,this.syncEngine.isPrimaryClient))}createEventManager(t){return new Sc}createDatastore(t){const e=Fa(t.databaseInfo.databaseId),n=(r=t.databaseInfo,new ja(r));var r;return function(t,e,n){return new za(t,e,n)}(t.credentials,n,e)}createRemoteStore(t){return e=this.localStore,n=this.datastore,r=t.asyncQueue,i=t=>Fc(this.syncEngine,t,0),s=Ra.bt()?new Ra:new Ma,new Ka(e,n,r,i,s);var e,n,r,i,s}createSyncEngine(t,e){return function(t,e,n,r,i,s,o){const a=new Bc(t,e,n,r,i,s);return o&&(a.Qo=!0),a}(this.localStore,this.remoteStore,this.eventManager,this.sharedClientState,t.initialUser,t.maxConcurrentLimboResolutions,e)}terminate(){return async function(t){const e=Nr(t);Tr("RemoteStore","RemoteStore shutting down."),e.Wr.add(5),await Ya(e),e.zr.shutdown(),e.Hr.set("Unknown")}(this.remoteStore)}}class ru{constructor(t){this.observer=t,this.muted=!1}next(t){this.observer.next&&this.tc(this.observer.next,t)}error(t){this.observer.error?this.tc(this.observer.error,t):console.error("Uncaught Error in snapshot listener:",t)}ec(){this.muted=!0}tc(t,e){this.muted||setTimeout((()=>{this.muted||t(e)}),0)}}class iu{constructor(t,e,n){this.credentials=t,this.asyncQueue=e,this.databaseInfo=n,this.user=wr.UNAUTHENTICATED,this.clientId=Fr.I(),this.credentialListener=()=>Promise.resolve(),this.credentials.start(e,(async t=>{Tr("FirestoreClient","Received user=",t.uid),await this.credentialListener(t),this.user=t}))}async getConfiguration(){return{asyncQueue:this.asyncQueue,databaseInfo:this.databaseInfo,clientId:this.clientId,credentials:this.credentials,initialUser:this.user,maxConcurrentLimboResolutions:100}}setCredentialChangeListener(t){this.credentialListener=t}verifyNotTerminated(){if(this.asyncQueue.isShuttingDown)throw new _r(xr.FAILED_PRECONDITION,"The client has already been terminated.")}terminate(){this.asyncQueue.enterRestrictedMode();const t=new Lr;return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async()=>{try{this.onlineComponents&&await this.onlineComponents.terminate(),this.offlineComponents&&await this.offlineComponents.terminate(),this.credentials.shutdown(),t.resolve()}catch(e){const n=bc(e,"Failed to shutdown persistence");t.reject(n)}})),t.promise}}async function su(t,e){t.asyncQueue.verifyOperationInProgress();const n=await async function(t){return t.offlineComponents||(Tr("FirestoreClient","Using default OfflineComponentProvider"),await async function(t,e){t.asyncQueue.verifyOperationInProgress(),Tr("FirestoreClient","Initializing OfflineComponentProvider");const n=await t.getConfiguration();await e.initialize(n);let r=n.initialUser;t.setCredentialChangeListener((async t=>{r.isEqual(t)||(await ya(e.localStore,t),r=t)})),e.persistence.setDatabaseDeletedListener((()=>t.terminate())),t.offlineComponents=e}(t,new eu)),t.offlineComponents}(t);Tr("FirestoreClient","Initializing OnlineComponentProvider");const r=await t.getConfiguration();await e.initialize(n,r),t.setCredentialChangeListener((t=>async function(t,e){const n=Nr(t);n.asyncQueue.verifyOperationInProgress(),Tr("RemoteStore","RemoteStore received new credentials");const r=nc(n);n.Wr.add(3),await Ya(n),r&&n.Hr.set("Unknown"),await n.remoteSyncer.handleCredentialChange(e),n.Wr.delete(3),await Ga(n)}(e.remoteStore,t))),t.onlineComponents=e}async function ou(t){return t.onlineComponents||(Tr("FirestoreClient","Using default OnlineComponentProvider"),await su(t,new nu)),t.onlineComponents}async function au(t){const e=await ou(t),n=e.eventManager;return n.onListen=Oc.bind(null,e.syncEngine),n.onUnlisten=jc.bind(null,e.syncEngine),n}function cu(t,e,n={}){const r=new Lr;return t.asyncQueue.enqueueAndForget((async()=>function(t,e,n,r,i){const s=new ru({next:n=>{e.enqueueAndForget((()=>async function(t,e){const n=Nr(t),r=e.query;let i=!1;const s=n.queries.get(r);if(s){const t=s.listeners.indexOf(e);t>=0&&(s.listeners.splice(t,1),i=0===s.listeners.length)}if(i)return n.queries.delete(r),n.onUnlisten(r)}(t,o))),n.fromCache&&"server"===r.source?i.reject(new _r(xr.UNAVAILABLE,'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')):i.resolve(n)},error:t=>i.reject(t)}),o=new xc(n,s,{includeMetadataChanges:!0,fo:!0});return async function(t,e){const n=Nr(t),r=e.query;let i=!1,s=n.queries.get(r);if(s||(i=!0,s=new Cc),i)try{s.no=await n.onListen(r)}catch(t){const n=bc(t,`Initialization of query '${ts(e.query)}' failed`);return void e.onError(n)}n.queries.set(r,s),s.listeners.push(e),e.io(n.onlineState),s.no&&e.ro(s.no)&&Nc(n)}(t,o)}(await au(t),t.asyncQueue,e,n,r))),r.promise}class uu{constructor(t,e,n,r,i,s,o,a){this.databaseId=t,this.appId=e,this.persistenceKey=n,this.host=r,this.ssl=i,this.forceLongPolling=s,this.autoDetectLongPolling=o,this.useFetchStreams=a}}class lu{constructor(t,e){this.projectId=t,this.database=e||"(default)"}get isDefaultDatabase(){return"(default)"===this.database}isEqual(t){return t instanceof lu&&t.projectId===this.projectId&&t.database===this.database}}const hu=new Map;function du(t,e,n){if(!n)throw new _r(xr.INVALID_ARGUMENT,`Function ${t}() cannot be called with an empty ${e}.`)}function fu(t){if(!ui.isDocumentKey(t))throw new _r(xr.INVALID_ARGUMENT,`Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`)}function mu(t){if(ui.isDocumentKey(t))throw new _r(xr.INVALID_ARGUMENT,`Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`)}function pu(t){if(void 0===t)return"undefined";if(null===t)return"null";if("string"==typeof t)return t.length>20&&(t=`${t.substring(0,20)}...`),JSON.stringify(t);if("number"==typeof t||"boolean"==typeof t)return""+t;if("object"==typeof t){if(t instanceof Array)return"an array";{const e=function(t){return t.constructor?t.constructor.name:null}(t);return e?`a custom ${e} object`:"an object"}}return"function"==typeof t?"a function":kr()}function gu(t,e){if("_delegate"in t&&(t=t._delegate),!(t instanceof e)){if(e.name===t.constructor.name)throw new _r(xr.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");{const n=pu(t);throw new _r(xr.INVALID_ARGUMENT,`Expected type '${e.name}', but it was: ${n}`)}}return t}class yu{constructor(t){var e;if(void 0===t.host){if(void 0!==t.ssl)throw new _r(xr.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=t.host,this.ssl=null===(e=t.ssl)||void 0===e||e;if(this.credentials=t.credentials,this.ignoreUndefinedProperties=!!t.ignoreUndefinedProperties,void 0===t.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==t.cacheSizeBytes&&t.cacheSizeBytes<1048576)throw new _r(xr.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=t.cacheSizeBytes}this.experimentalForceLongPolling=!!t.experimentalForceLongPolling,this.experimentalAutoDetectLongPolling=!!t.experimentalAutoDetectLongPolling,this.useFetchStreams=!!t.useFetchStreams,function(t,e,n,r){if(!0===e&&!0===r)throw new _r(xr.INVALID_ARGUMENT,"experimentalForceLongPolling and experimentalAutoDetectLongPolling cannot be used together.")}(0,t.experimentalForceLongPolling,0,t.experimentalAutoDetectLongPolling)}isEqual(t){return this.host===t.host&&this.ssl===t.ssl&&this.credentials===t.credentials&&this.cacheSizeBytes===t.cacheSizeBytes&&this.experimentalForceLongPolling===t.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===t.experimentalAutoDetectLongPolling&&this.ignoreUndefinedProperties===t.ignoreUndefinedProperties&&this.useFetchStreams===t.useFetchStreams}}class vu{constructor(t,e){this._credentials=e,this.type="firestore-lite",this._persistenceKey="(lite)",this._settings=new yu({}),this._settingsFrozen=!1,t instanceof lu?this._databaseId=t:(this._app=t,this._databaseId=function(t){if(!Object.prototype.hasOwnProperty.apply(t.options,["projectId"]))throw new _r(xr.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new lu(t.options.projectId)}(t))}get app(){if(!this._app)throw new _r(xr.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this._app}get _initialized(){return this._settingsFrozen}get _terminated(){return void 0!==this._terminateTask}_setSettings(t){if(this._settingsFrozen)throw new _r(xr.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this._settings=new yu(t),void 0!==t.credentials&&(this._credentials=function(t){if(!t)return new Mr;switch(t.type){case"gapi":const e=t.client;return Dr(!("object"!=typeof e||null===e||!e.auth||!e.auth.getAuthHeaderValueForFirstParty)),new Or(e,t.sessionIndex||"0",t.iamToken||null);case"provider":return t.client;default:throw new _r(xr.INVALID_ARGUMENT,"makeCredentialsProvider failed due to invalid credential type")}}(t.credentials))}_getSettings(){return this._settings}_freezeSettings(){return this._settingsFrozen=!0,this._settings}_delete(){return this._terminateTask||(this._terminateTask=this._terminate()),this._terminateTask}toJSON(){return{app:this._app,databaseId:this._databaseId,settings:this._settings}}_terminate(){return function(t){const e=hu.get(t);e&&(Tr("ComponentProvider","Removing Datastore"),hu.delete(t),e.terminate())}(this),Promise.resolve()}}class wu{constructor(t,e,n){this.converter=e,this._key=n,this.type="document",this.firestore=t}get _path(){return this._key.path}get id(){return this._key.path.lastSegment()}get path(){return this._key.path.canonicalString()}get parent(){return new bu(this.firestore,this.converter,this._key.path.popLast())}withConverter(t){return new wu(this.firestore,t,this._key)}}class Au{constructor(t,e,n){this.converter=e,this._query=n,this.type="query",this.firestore=t}withConverter(t){return new Au(this.firestore,t,this._query)}}class bu extends Au{constructor(t,e,n){super(t,e,Ki(n)),this._path=n,this.type="collection"}get id(){return this._query.path.lastSegment()}get path(){return this._query.path.canonicalString()}get parent(){const t=this._path.popLast();return t.isEmpty()?null:new wu(this.firestore,null,new ui(t))}withConverter(t){return new bu(this.firestore,t,this._path)}}function Eu(t,e,...n){if(t=(0,a.m9)(t),du("collection","path",e),t instanceof vu){const r=Yr.fromString(e,...n);return mu(r),new bu(t,null,r)}{if(!(t instanceof wu||t instanceof bu))throw new _r(xr.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const r=t._path.child(Yr.fromString(e,...n));return mu(r),new bu(t.firestore,null,r)}}function Tu(t,e,...n){if(t=(0,a.m9)(t),1===arguments.length&&(e=Fr.I()),du("doc","path",e),t instanceof vu){const r=Yr.fromString(e,...n);return fu(r),new wu(t,null,new ui(r))}{if(!(t instanceof wu||t instanceof bu))throw new _r(xr.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const r=t._path.child(Yr.fromString(e,...n));return fu(r),new wu(t.firestore,t instanceof bu?t.converter:null,new ui(r))}}class Iu{constructor(){this._c=Promise.resolve(),this.mc=[],this.gc=!1,this.yc=[],this.Tc=null,this.Ec=!1,this.Ic=!1,this.Ac=[],this.ar=new Va(this,"async_queue_retry"),this.Rc=()=>{const t=Ua();t&&Tr("AsyncQueue","Visibility state changed to "+t.visibilityState),this.ar.tr()};const t=Ua();t&&"function"==typeof t.addEventListener&&t.addEventListener("visibilitychange",this.Rc)}get isShuttingDown(){return this.gc}enqueueAndForget(t){this.enqueue(t)}enqueueAndForgetEvenWhileRestricted(t){this.bc(),this.Pc(t)}enterRestrictedMode(t){if(!this.gc){this.gc=!0,this.Ic=t||!1;const e=Ua();e&&"function"==typeof e.removeEventListener&&e.removeEventListener("visibilitychange",this.Rc)}}enqueue(t){if(this.bc(),this.gc)return new Promise((()=>{}));const e=new Lr;return this.Pc((()=>this.gc&&this.Ic?Promise.resolve():(t().then(e.resolve,e.reject),e.promise))).then((()=>e.promise))}enqueueRetryable(t){this.enqueueAndForget((()=>(this.mc.push(t),this.vc())))}async vc(){if(0!==this.mc.length){try{await this.mc[0](),this.mc.shift(),this.ar.reset()}catch(t){if(!ea(t))throw t;Tr("AsyncQueue","Operation failed with retryable error: "+t)}this.mc.length>0&&this.ar.Xi((()=>this.vc()))}}Pc(t){const e=this._c.then((()=>(this.Ec=!0,t().catch((t=>{this.Tc=t,this.Ec=!1;const e=function(t){let e=t.message||"";return t.stack&&(e=t.stack.includes(t.message)?t.stack:t.message+"\n"+t.stack),e}(t);throw Ir("INTERNAL UNHANDLED ERROR: ",e),t})).then((t=>(this.Ec=!1,t))))));return this._c=e,e}enqueueAfterDelay(t,e,n){this.bc(),this.Ac.indexOf(t)>-1&&(e=0);const r=Ac.createAndSchedule(this,t,e,n,(t=>this.Vc(t)));return this.yc.push(r),r}bc(){this.Tc&&kr()}verifyOperationInProgress(){}async Sc(){let t;do{t=this._c,await t}while(t!==this._c)}Dc(t){for(const e of this.yc)if(e.timerId===t)return!0;return!1}Cc(t){return this.Sc().then((()=>{this.yc.sort(((t,e)=>t.targetTimeMs-e.targetTimeMs));for(const e of this.yc)if(e.skipDelay(),"all"!==t&&e.timerId===t)break;return this.Sc()}))}Nc(t){this.Ac.push(t)}Vc(t){const e=this.yc.indexOf(t);this.yc.splice(e,1)}}class Cu extends vu{constructor(t,e){super(t,e),this.type="firestore",this._queue=new Iu,this._persistenceKey="name"in t?t.name:"[DEFAULT]"}_terminate(){return this._firestoreClient||Du(this),this._firestoreClient.terminate()}}function Su(t=(0,i.Mq)()){return(0,i.qX)(t,"firestore").getImmediate()}function ku(t){return t._firestoreClient||Du(t),t._firestoreClient.verifyNotTerminated(),t._firestoreClient}function Du(t){var e;const n=t._freezeSettings(),r=function(t,e,n,r){return new uu(t,e,n,r.host,r.ssl,r.experimentalForceLongPolling,r.experimentalAutoDetectLongPolling,r.useFetchStreams)}(t._databaseId,(null===(e=t._app)||void 0===e?void 0:e.options.appId)||"",t._persistenceKey,n);t._firestoreClient=new iu(t._credentials,t._queue,r)}class Nu{constructor(...t){for(let e=0;e<t.length;++e)if(0===t[e].length)throw new _r(xr.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this._internalPath=new Qr(t)}isEqual(t){return this._internalPath.isEqual(t._internalPath)}}class xu{constructor(t){this._byteString=t}static fromBase64String(t){try{return new xu(Jr.fromBase64String(t))}catch(t){throw new _r(xr.INVALID_ARGUMENT,"Failed to construct data from Base64 string: "+t)}}static fromUint8Array(t){return new xu(Jr.fromUint8Array(t))}toBase64(){return this._byteString.toBase64()}toUint8Array(){return this._byteString.toUint8Array()}toString(){return"Bytes(base64: "+this.toBase64()+")"}isEqual(t){return this._byteString.isEqual(t._byteString)}}class _u{constructor(t){this._methodName=t}}class Lu{constructor(t,e){if(!isFinite(t)||t<-90||t>90)throw new _r(xr.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+t);if(!isFinite(e)||e<-180||e>180)throw new _r(xr.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+e);this._lat=t,this._long=e}get latitude(){return this._lat}get longitude(){return this._long}isEqual(t){return this._lat===t._lat&&this._long===t._long}toJSON(){return{latitude:this._lat,longitude:this._long}}_compareTo(t){return Vr(this._lat,t._lat)||Vr(this._long,t._long)}}const Pu=/^__.*__$/;class Mu{constructor(t,e,n){this.data=t,this.fieldMask=e,this.fieldTransforms=n}toMutation(t,e){return null!==this.fieldMask?new Ns(t,this.data,this.fieldMask,e,this.fieldTransforms):new Ds(t,this.data,e,this.fieldTransforms)}}class Ru{constructor(t,e,n){this.data=t,this.fieldMask=e,this.fieldTransforms=n}toMutation(t,e){return new Ns(t,this.data,this.fieldMask,e,this.fieldTransforms)}}function Bu(t){switch(t){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw kr()}}class Ou{constructor(t,e,n,r,i,s){this.settings=t,this.databaseId=e,this.N=n,this.ignoreUndefinedProperties=r,void 0===i&&this.xc(),this.fieldTransforms=i||[],this.fieldMask=s||[]}get path(){return this.settings.path}get kc(){return this.settings.kc}$c(t){return new Ou(Object.assign(Object.assign({},this.settings),t),this.databaseId,this.N,this.ignoreUndefinedProperties,this.fieldTransforms,this.fieldMask)}Oc(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),r=this.$c({path:n,Fc:!1});return r.Mc(t),r}Lc(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),r=this.$c({path:n,Fc:!1});return r.xc(),r}Bc(t){return this.$c({path:void 0,Fc:!0})}Uc(t){return Qu(t,this.settings.methodName,this.settings.qc||!1,this.path,this.settings.Kc)}contains(t){return void 0!==this.fieldMask.find((e=>t.isPrefixOf(e)))||void 0!==this.fieldTransforms.find((e=>t.isPrefixOf(e.field)))}xc(){if(this.path)for(let t=0;t<this.path.length;t++)this.Mc(this.path.get(t))}Mc(t){if(0===t.length)throw this.Uc("Document fields must not be empty");if(Bu(this.kc)&&Pu.test(t))throw this.Uc('Document fields cannot begin and end with "__"')}}class ju{constructor(t,e,n){this.databaseId=t,this.ignoreUndefinedProperties=e,this.N=n||Fa(t)}jc(t,e,n,r=!1){return new Ou({kc:t,methodName:e,Kc:n,path:Qr.emptyPath(),Fc:!1,qc:r},this.databaseId,this.N,this.ignoreUndefinedProperties)}}function Uu(t){const e=t._freezeSettings(),n=Fa(t._databaseId);return new ju(t._databaseId,!!e.ignoreUndefinedProperties,n)}function Fu(t,e,n,r,i,s={}){const o=t.jc(s.merge||s.mergeFields?2:0,e,n,i);Ku("Data must be an object, but it was:",o,r);const a=zu(r,o);let c,u;if(s.merge)c=new Xr(o.fieldMask),u=o.fieldTransforms;else if(s.mergeFields){const t=[];for(const r of s.mergeFields){const i=Gu(e,r,n);if(!o.contains(i))throw new _r(xr.INVALID_ARGUMENT,`Field '${i}' is specified in your field mask but missing from your input data.`);Xu(t,i)||t.push(i)}c=new Xr(t),u=o.fieldTransforms.filter((t=>c.covers(t.field)))}else c=null,u=o.fieldTransforms;return new Mu(new Ti(a),c,u)}class Vu extends _u{_toFieldTransform(t){if(2!==t.kc)throw 1===t.kc?t.Uc(`${this._methodName}() can only appear at the top level of your update data`):t.Uc(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);return t.fieldMask.push(t.path),null}isEqual(t){return t instanceof Vu}}function qu(t,e,n,r){const i=t.jc(1,e,n);Ku("Data must be an object, but it was:",i,r);const s=[],o=Ti.empty();Wr(r,((t,r)=>{const c=Zu(e,t,n);r=(0,a.m9)(r);const u=i.Lc(c);if(r instanceof Vu)s.push(c);else{const t=Hu(r,u);null!=t&&(s.push(c),o.set(c,t))}}));const c=new Xr(s);return new Ru(o,c,i.fieldTransforms)}function $u(t,e,n,r,i,s){const o=t.jc(1,e,n),c=[Gu(e,r,n)],u=[i];if(s.length%2!=0)throw new _r(xr.INVALID_ARGUMENT,`Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);for(let t=0;t<s.length;t+=2)c.push(Gu(e,s[t])),u.push(s[t+1]);const l=[],h=Ti.empty();for(let t=c.length-1;t>=0;--t)if(!Xu(l,c[t])){const e=c[t];let n=u[t];n=(0,a.m9)(n);const r=o.Lc(e);if(n instanceof Vu)l.push(e);else{const t=Hu(n,r);null!=t&&(l.push(e),h.set(e,t))}}const d=new Xr(l);return new Ru(h,d,o.fieldTransforms)}function Hu(t,e){if(Wu(t=(0,a.m9)(t)))return Ku("Unsupported field value:",e,t),zu(t,e);if(t instanceof _u)return function(t,e){if(!Bu(e.kc))throw e.Uc(`${t._methodName}() can only be used with update() and set()`);if(!e.path)throw e.Uc(`${t._methodName}() is not currently supported inside arrays`);const n=t._toFieldTransform(e);n&&e.fieldTransforms.push(n)}(t,e),null;if(void 0===t&&e.ignoreUndefinedProperties)return null;if(e.path&&e.fieldMask.push(e.path),t instanceof Array){if(e.settings.Fc&&4!==e.kc)throw e.Uc("Nested arrays are not supported");return function(t,e){const n=[];let r=0;for(const i of t){let t=Hu(i,e.Bc(r));null==t&&(t={nullValue:"NULL_VALUE"}),n.push(t),r++}return{arrayValue:{values:n}}}(t,e)}return function(t,e){if(null===(t=(0,a.m9)(t)))return{nullValue:"NULL_VALUE"};if("number"==typeof t)return os(e.N,t);if("boolean"==typeof t)return{booleanValue:t};if("string"==typeof t)return{stringValue:t};if(t instanceof Date){const n=$r.fromDate(t);return{timestampValue:ho(e.N,n)}}if(t instanceof $r){const n=new $r(t.seconds,1e3*Math.floor(t.nanoseconds/1e3));return{timestampValue:ho(e.N,n)}}if(t instanceof Lu)return{geoPointValue:{latitude:t.latitude,longitude:t.longitude}};if(t instanceof xu)return{bytesValue:fo(e.N,t._byteString)};if(t instanceof wu){const n=e.databaseId,r=t.firestore._databaseId;if(!r.isEqual(n))throw e.Uc(`Document reference is for database ${r.projectId}/${r.database} but should be for database ${n.projectId}/${n.database}`);return{referenceValue:go(t.firestore._databaseId||e.databaseId,t._key.path)}}throw e.Uc(`Unsupported field value: ${pu(t)}`)}(t,e)}function zu(t,e){const n={};return Kr(t)?e.path&&e.path.length>0&&e.fieldMask.push(e.path):Wr(t,((t,r)=>{const i=Hu(r,e.Oc(t));null!=i&&(n[t]=i)})),{mapValue:{fields:n}}}function Wu(t){return!("object"!=typeof t||null===t||t instanceof Array||t instanceof Date||t instanceof $r||t instanceof Lu||t instanceof xu||t instanceof wu||t instanceof _u)}function Ku(t,e,n){if(!Wu(n)||!function(t){return"object"==typeof t&&null!==t&&(Object.getPrototypeOf(t)===Object.prototype||null===Object.getPrototypeOf(t))}(n)){const r=pu(n);throw"an object"===r?e.Uc(t+" a custom object"):e.Uc(t+" "+r)}}function Gu(t,e,n){if((e=(0,a.m9)(e))instanceof Nu)return e._internalPath;if("string"==typeof e)return Zu(t,e);throw Qu("Field path arguments must be of type string or FieldPath.",t,!1,void 0,n)}const Yu=new RegExp("[~\\*/\\[\\]]");function Zu(t,e,n){if(e.search(Yu)>=0)throw Qu(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`,t,!1,void 0,n);try{return new Nu(...e.split("."))._internalPath}catch(r){throw Qu(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,t,!1,void 0,n)}}function Qu(t,e,n,r,i){const s=r&&!r.isEmpty(),o=void 0!==i;let a=`Function ${e}() called with invalid data`;n&&(a+=" (via `toFirestore()`)"),a+=". ";let c="";return(s||o)&&(c+=" (found",s&&(c+=` in field ${r}`),o&&(c+=` in document ${i}`),c+=")"),new _r(xr.INVALID_ARGUMENT,a+t+c)}function Xu(t,e){return t.some((t=>t.isEqual(e)))}class Ju{constructor(t,e,n,r,i){this._firestore=t,this._userDataWriter=e,this._key=n,this._document=r,this._converter=i}get id(){return this._key.path.lastSegment()}get ref(){return new wu(this._firestore,this._converter,this._key)}exists(){return null!==this._document}data(){if(this._document){if(this._converter){const t=new tl(this._firestore,this._userDataWriter,this._key,this._document,null);return this._converter.fromFirestore(t)}return this._userDataWriter.convertValue(this._document.data.value)}}get(t){if(this._document){const e=this._document.data.field(el("DocumentSnapshot.get",t));if(null!==e)return this._userDataWriter.convertValue(e)}}}class tl extends Ju{data(){return super.data()}}function el(t,e){return"string"==typeof e?Zu(t,e):e instanceof Nu?e._internalPath:e._delegate._internalPath}class nl{constructor(t,e){this.hasPendingWrites=t,this.fromCache=e}isEqual(t){return this.hasPendingWrites===t.hasPendingWrites&&this.fromCache===t.fromCache}}class rl extends Ju{constructor(t,e,n,r,i,s){super(t,e,n,r,s),this._firestore=t,this._firestoreImpl=t,this.metadata=i}exists(){return super.exists()}data(t={}){if(this._document){if(this._converter){const e=new il(this._firestore,this._userDataWriter,this._key,this._document,this.metadata,null);return this._converter.fromFirestore(e,t)}return this._userDataWriter.convertValue(this._document.data.value,t.serverTimestamps)}}get(t,e={}){if(this._document){const n=this._document.data.field(el("DocumentSnapshot.get",t));if(null!==n)return this._userDataWriter.convertValue(n,e.serverTimestamps)}}}class il extends rl{data(t={}){return super.data(t)}}class sl{constructor(t,e,n,r){this._firestore=t,this._userDataWriter=e,this._snapshot=r,this.metadata=new nl(r.hasPendingWrites,r.fromCache),this.query=n}get docs(){const t=[];return this.forEach((e=>t.push(e))),t}get size(){return this._snapshot.docs.size}get empty(){return 0===this.size}forEach(t,e){this._snapshot.docs.forEach((n=>{t.call(e,new il(this._firestore,this._userDataWriter,n.key,n,new nl(this._snapshot.mutatedKeys.has(n.key),this._snapshot.fromCache),this.query.converter))}))}docChanges(t={}){const e=!!t.includeMetadataChanges;if(e&&this._snapshot.excludesMetadataChanges)throw new _r(xr.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");return this._cachedChanges&&this._cachedChangesIncludeMetadataChanges===e||(this._cachedChanges=function(t,e){if(t._snapshot.oldDocs.isEmpty()){let e=0;return t._snapshot.docChanges.map((n=>({type:"added",doc:new il(t._firestore,t._userDataWriter,n.doc.key,n.doc,new nl(t._snapshot.mutatedKeys.has(n.doc.key),t._snapshot.fromCache),t.query.converter),oldIndex:-1,newIndex:e++})))}{let n=t._snapshot.oldDocs;return t._snapshot.docChanges.filter((t=>e||3!==t.type)).map((e=>{const r=new il(t._firestore,t._userDataWriter,e.doc.key,e.doc,new nl(t._snapshot.mutatedKeys.has(e.doc.key),t._snapshot.fromCache),t.query.converter);let i=-1,s=-1;return 0!==e.type&&(i=n.indexOf(e.doc.key),n=n.delete(e.doc.key)),1!==e.type&&(n=n.add(e.doc),s=n.indexOf(e.doc.key)),{type:ol(e.type),doc:r,oldIndex:i,newIndex:s}}))}}(this,e),this._cachedChangesIncludeMetadataChanges=e),this._cachedChanges}}function ol(t){switch(t){case 0:return"added";case 2:case 3:return"modified";case 1:return"removed";default:return kr()}}function al(t,...e){for(const n of e)t=n._apply(t);return t}function cl(t,e,n){let r;return r=t?n&&(n.merge||n.mergeFields)?t.toFirestore(e,n):t.toFirestore(e):e,r}class ul{constructor(t,e){this._firestore=t,this._commitHandler=e,this._mutations=[],this._committed=!1,this._dataReader=Uu(t)}set(t,e,n){this._verifyNotCommitted();const r=ll(t,this._firestore),i=cl(r.converter,e,n),s=Fu(this._dataReader,"WriteBatch.set",r._key,i,null!==r.converter,n);return this._mutations.push(s.toMutation(r._key,As.none())),this}update(t,e,n,...r){this._verifyNotCommitted();const i=ll(t,this._firestore);let s;return s="string"==typeof(e=(0,a.m9)(e))||e instanceof Nu?$u(this._dataReader,"WriteBatch.update",i._key,e,n,r):qu(this._dataReader,"WriteBatch.update",i._key,e),this._mutations.push(s.toMutation(i._key,As.exists(!0))),this}delete(t){this._verifyNotCommitted();const e=ll(t,this._firestore);return this._mutations=this._mutations.concat(new Ps(e._key,As.none())),this}commit(){return this._verifyNotCommitted(),this._committed=!0,this._mutations.length>0?this._commitHandler(this._mutations):Promise.resolve()}_verifyNotCommitted(){if(this._committed)throw new _r(xr.FAILED_PRECONDITION,"A write batch can no longer be used after commit() has been called.")}}function ll(t,e){if((t=(0,a.m9)(t)).firestore!==e)throw new _r(xr.INVALID_ARGUMENT,"Provided document reference is from a different Firestore instance.");return t}class hl extends class{convertValue(t,e="none"){switch(li(t)){case 0:return null;case 1:return t.booleanValue;case 2:return ni(t.integerValue||t.doubleValue);case 3:return this.convertTimestamp(t.timestampValue);case 4:return this.convertServerTimestamp(t,e);case 5:return t.stringValue;case 6:return this.convertBytes(ri(t.bytesValue));case 7:return this.convertReference(t.referenceValue);case 8:return this.convertGeoPoint(t.geoPointValue);case 9:return this.convertArray(t.arrayValue,e);case 10:return this.convertObject(t.mapValue,e);default:throw kr()}}convertObject(t,e){const n={};return Wr(t.fields,((t,r)=>{n[t]=this.convertValue(r,e)})),n}convertGeoPoint(t){return new Lu(ni(t.latitude),ni(t.longitude))}convertArray(t,e){return(t.values||[]).map((t=>this.convertValue(t,e)))}convertServerTimestamp(t,e){switch(e){case"previous":const n=si(t);return null==n?null:this.convertValue(n,e);case"estimate":return this.convertTimestamp(oi(t));default:return null}}convertTimestamp(t){const e=ei(t);return new $r(e.seconds,e.nanos)}convertDocumentKey(t,e){const n=Yr.fromString(t);Dr(Oo(n));const r=new lu(n.get(1),n.get(3)),i=new ui(n.popFirst(5));return r.isEqual(e)||Ir(`Document ${i} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`),i}}{constructor(t){super(),this.firestore=t}convertBytes(t){return new xu(t)}convertReference(t){const e=this.convertDocumentKey(t,this.firestore._databaseId);return new wu(this.firestore,null,e)}}function dl(t){t=gu(t,Au);const e=gu(t.firestore,Cu),n=ku(e),r=new hl(e);return function(t){if(Yi(t)&&0===t.explicitOrderBy.length)throw new _r(xr.UNIMPLEMENTED,"limitToLast() queries require specifying at least one orderBy() clause")}(t._query),cu(n,t._query).then((n=>new sl(e,r,t,n)))}function fl(t,e,n){t=gu(t,wu);const r=gu(t.firestore,Cu),i=cl(t.converter,e,n);return yl(r,[Fu(Uu(r),"setDoc",t._key,i,null!==t.converter,n).toMutation(t._key,As.none())])}function ml(t,e,n,...r){t=gu(t,wu);const i=gu(t.firestore,Cu),s=Uu(i);let o;return o="string"==typeof(e=(0,a.m9)(e))||e instanceof Nu?$u(s,"updateDoc",t._key,e,n,r):qu(s,"updateDoc",t._key,e),yl(i,[o.toMutation(t._key,As.exists(!0))])}function pl(t){return yl(gu(t.firestore,Cu),[new Ps(t._key,As.none())])}function gl(t,e){const n=gu(t.firestore,Cu),r=Tu(t),i=cl(t.converter,e);return yl(n,[Fu(Uu(t.firestore),"addDoc",r._key,i,null!==t.converter,{}).toMutation(r._key,As.exists(!1))]).then((()=>r))}function yl(t,e){return function(t,e){const n=new Lr;return t.asyncQueue.enqueueAndForget((async()=>async function(t,e,n){const r=tu(t);try{const t=await function(t,e){const n=Nr(t),r=$r.now(),i=e.reduce(((t,e)=>t.add(e.key)),Zs());let s;return n.persistence.runTransaction("Locally write mutations","readwrite",(t=>n.Qn.Pn(t,i).next((i=>{s=i;const o=[];for(const t of e){const e=Cs(t,s.get(t.key));null!=e&&o.push(new Ns(t.key,e,Ii(e.value.mapValue),As.exists(!0)))}return n.In.addMutationBatch(t,r,o,e)})))).then((t=>(t.applyToLocalDocumentSet(s),{batchId:t.batchId,changes:s})))}(r.localStore,e);r.sharedClientState.addPendingMutation(t.batchId),function(t,e,n){let r=t.qo[t.currentUser.toKey()];r||(r=new Us(Vr)),r=r.insert(e,n),t.qo[t.currentUser.toKey()]=r}(r,t.batchId,n),await Qc(r,t.changes),await uc(r.remoteStore)}catch(t){const e=bc(t,"Failed to persist write");n.reject(e)}}(await function(t){return ou(t).then((t=>t.syncEngine))}(t),e,n))),n.promise}(ku(t),e)}function vl(t){return ku(t=gu(t,Cu)),new ul(t,(e=>yl(t,e)))}!function(t,e=!0){!function(t){Ar=t}(i.Jn),(0,i.Xd)(new s.wA("firestore",((t,{options:n})=>{const r=t.getProvider("app").getImmediate(),i=new Cu(r,new Rr(t.getProvider("auth-internal")));return n=Object.assign({useFetchStreams:e},n),i._setSettings(n),i}),"PUBLIC")),(0,i.KN)(vr,"3.2.0",t),(0,i.KN)(vr,"3.2.0","esm2017")}()},548:(t,e,n)=>{var r=n(379),i=n.n(r),s=n(795),o=n.n(s),a=n(569),c=n.n(a),u=n(565),l=n.n(u),h=n(216),d=n.n(h),f=n(589),m=n.n(f),p=n(424),g={};g.styleTagTransform=m(),g.setAttributes=l(),g.insert=c().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=d(),i()(p.Z,g),p.Z&&p.Z.locals&&p.Z.locals},547:(t,e,n)=>{var r=n(379),i=n.n(r),s=n(795),o=n.n(s),a=n(569),c=n.n(a),u=n(565),l=n.n(u),h=n(216),d=n.n(h),f=n(589),m=n.n(f),p=n(935),g={};g.styleTagTransform=m(),g.setAttributes=l(),g.insert=c().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=d(),i()(p.Z,g),p.Z&&p.Z.locals&&p.Z.locals},163:(t,e,n)=>{var r=n(379),i=n.n(r),s=n(795),o=n.n(s),a=n(569),c=n.n(a),u=n(565),l=n.n(u),h=n(216),d=n.n(h),f=n(589),m=n.n(f),p=n(86),g={};g.styleTagTransform=m(),g.setAttributes=l(),g.insert=c().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=d(),i()(p.Z,g),p.Z&&p.Z.locals&&p.Z.locals},25:(t,e,n)=>{var r=n(379),i=n.n(r),s=n(795),o=n.n(s),a=n(569),c=n.n(a),u=n(565),l=n.n(u),h=n(216),d=n.n(h),f=n(589),m=n.n(f),p=n(912),g={};g.styleTagTransform=m(),g.setAttributes=l(),g.insert=c().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=d(),i()(p.Z,g),p.Z&&p.Z.locals&&p.Z.locals},57:(t,e,n)=>{var r=n(379),i=n.n(r),s=n(795),o=n.n(s),a=n(569),c=n.n(a),u=n(565),l=n.n(u),h=n(216),d=n.n(h),f=n(589),m=n.n(f),p=n(808),g={};g.styleTagTransform=m(),g.setAttributes=l(),g.insert=c().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=d(),i()(p.Z,g),p.Z&&p.Z.locals&&p.Z.locals},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var s={},o=[],a=0;a<t.length;a++){var c=t[a],u=r.base?c[0]+r.base:c[0],l=s[u]||0,h="".concat(u," ").concat(l);s[u]=l+1;var d=n(h),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var m=i(f,r);r.byIndex=a,e.splice(a,0,{identifier:h,updater:m,references:1})}o.push(h)}return o}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var s=r(t=t||[],i=i||{});return function(t){t=t||[];for(var o=0;o<s.length;o++){var a=n(s[o]);e[a].references--}for(var c=r(t,i),u=0;u<s.length;u++){var l=n(s[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}s=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},886:(t,e,n)=>{n.d(e,{Z:()=>r});const r={apiKey:"AIzaSyArZn8GEdJKwoNEfh5l4uNXUhd8XFu4878",authDomain:"odin-project-todo.firebaseapp.com",projectId:"odin-project-todo",storageBucket:"odin-project-todo.appspot.com",messagingSenderId:"421054148267",appId:"1:421054148267:web:959bd2fc01605b62ec91ee"}},138:(t,e,n)=>{n.a(t,(async t=>{var e=n(513),r=n(860),i=n(395),s=(n(548),t([i,e,r]));[i,e,r]=s.then?await s:s,(0,e.VN)("project","dueDate",!0),document.getElementById("home-controls-switch").addEventListener("click",e.Hy),document.getElementById("home-controls-add").addEventListener("click",r.w),(0,e.dB)(i.q.getProjects(),"project","dueDate",!0)}))},395:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{ai:()=>l,iA:()=>h,dN:()=>d,mk:()=>f,CB:()=>m,P2:()=>p,yW:()=>g,s3:()=>y,M$:()=>v,q:()=>w});var r=n(503),i=n(591),s=n(886),o=n(816),a=n(259);(0,r.ZF)(s.Z);const c=(0,i.ad)(),u="todos",l=async(t,e)=>(await(0,i.oe)((0,i.JU)(c,u,t,"todos",e)),e),h=async t=>{const e=(0,i.IO)((0,i.hJ)(c,u,t,"todos"));return(await(0,i.PL)(e)).forEach((async e=>{await(0,i.oe)((0,i.JU)(c,u,t,"todos",e.id))})),await(0,i.oe)((0,i.JU)(c,u,t)),t},d=async(t,e=null,n)=>{const r="project"===t?(0,i.hJ)(c,u):(0,i.hJ)(c,u,e,"todos");return(await(0,i.ET)(r,{...n})).id},f=async(t,e)=>{const n=(0,i.JU)(c,u,t);return await(0,i.r7)(n,e),!0},m=async(t,e)=>{const n=(0,i.qs)(c),r=(0,i.JU)(c,u,t);return n.update(r,e),await n.commit(),!0},p=async(t,e,n)=>{const r=(0,i.JU)(c,u,t,"todos",e);return await(0,i.r7)(r,n),!0},g=async(t,e,n)=>{const r=(0,i.qs)(c),s=(0,i.JU)(c,u,t,"todos",e);return r.update(s,n),await r.commit(),!0},y=async(t,e)=>{const n=(0,i.hJ)(c,u,t,"todos"),r=await(0,i.PL)(n);return await(0,a.ML)(r,(async t=>await(0,i.r7)(t,e))),!0},v=async(t,e,n)=>(await(0,i.pl)((0,i.JU)(c,u,t,"todos",e),{...n}),!0),w=(0,o.p)(...await(async()=>{const t=await(async()=>{const t=(0,i.hJ)(c,u),e=[];return await(0,i.PL)(t).then((t=>{t.forEach((t=>{e.push({type:"project",id:t.id,...t.data(),todos:[]})}))})),e})();return await(0,a.ML)(t,(async t=>{const e=await(async(t,e)=>{const n=(0,i.hJ)(c,`todos/${t}/todos`),r=[];return await(0,i.PL)(n).then((n=>{n.docs.forEach((n=>{r.push({type:"todo",projectId:t,projectTitle:e,id:n.id,...n.data()})}))})),r})(t.id,t.title);t.todos=e})),t})());t()}),1)},6:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{H:()=>c,G:()=>u});var r=n(395),i=n(392),s=t([r]);r=(s.then?await s:s)[0];const o=(t,e,n)=>{e=t.elements.namedItem(e);const r=document.createElement("div");return r.innerText=n,t.insertBefore(r,e),(0,i.si)(r,"form"),!0},a=(t,e)=>!t.includes(e),c=(t,e)=>{const n=[];return n.push(((t,e)=>{const n=r.q.getTodosProp(t,"title");return 0===n.length||!!a(n,e.target.title.value)||(o(e.target,"title","wrong title"),!1)})(t,e)),n.push(((t,e)=>!(!(r.q.getProjectProp(t,"dueDate").toDate()>=new Date(e.target.date.value))&&(o(e.target,"date","wrong date"),1)))(t,e)),!n.includes(!1)},u=(t,e)=>{switch(t){case"add-todo-home":{const t=r.q.getProjectIdByProp("title",e.target.project.value);return c(t,e)}case"add-project-home":return(t=>{const e=r.q.getProjectsProp("title");return!!a(e,t.target.title.value)||(o(t.target,"title","wrong title"),!1)})(e);case"add-todo-project":{const t=e.target.parentElement.closest("div[class~=project]").id;return c(t,e)}default:console.log(`validateForm: sorry, we are out of ${t}.`)}return!1}}))},897:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{j:()=>u,w:()=>l});var r=n(610),i=n(468),s=n(196),o=n(395),a=n(875),c=t([s,i,r,o,a]);[s,i,r,o,a]=c.then?await c:c;const u=async(t,e,n=null)=>{const r=t.match(/(?<=-)\w+(?=-)/)[0],i=await(0,o.dN)(r,n,e);switch(e={type:t,id:i,...e},(0,a.fE)(e),e.type=r,r){case"project":o.q.addProject(e);break;case"todo":o.q.addTodo(n,{projectTitle:o.q.getProjectProp(n,"title"),...e});break;default:console.log(`AddItem: sorry, we are out of ${r}.`)}return i},l=async t=>{const{id:e,type:n}=t.target;switch(n){case"project":await(0,r.t)(e);break;case"todo":case"project-todo":{const{projectId:n}=t.target;await(0,i.a)(n,e);break}default:console.log(`deleteItem: sorry, we are out of ${n}.`)}const o=document.querySelector(`[itemid=${e}]`);if(null!==o){const e=o.getAttribute("location");switch(e){case"home":(0,s.x4)();break;case"project":(0,s.Ai)(t);break;default:console.log(`deleteItem: sorry, we are out of ${e}.`)}}return document.getElementById(e).remove(),e}}))},610:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{t:()=>s});var r=n(395),i=t([r]);r=(i.then?await i:i)[0];const s=async t=>(await(0,r.iA)(t),r.q.deleteProject(t),t)}))},816:(t,e,n)=>{n.d(e,{p:()=>s});const r=(t,e)=>t.findIndex((t=>t.id===e)),i={projectId:"id",projectTitle:"title"},s=(...t)=>{const e=[...t];return Object.assign({},(t=>({get:()=>t}))(e),{set:t=>{}},(t=>({getProjects:()=>t,getProjectsProp:e=>{const n=[];return t.forEach((t=>n.push(t[e]))),n}}))(e),(t=>({getProject:e=>t.filter((t=>t.id===e))[0],getProjectProp:(e,n)=>t.filter((t=>t.id===e))[0][n],getProjectIdFromProp:(e,n)=>t.filter((t=>t[e]===n))[0].id,getProjectPropFromTodoId:(e,n)=>t.filter((t=>t.todos.filter((t=>t.id===e)).length>0))[0][n],getProjectPropsFromTodoId:(e,...n)=>{const r=t.filter((t=>t.todos.filter((t=>t.id===e)).length>0))[0],s={};return n.forEach((t=>{Object.keys(i).includes(t)?s[t]=r[i[t]]:s[t]=r[t]})),s},setProject:(e,n)=>{const i=r(t,e);return t[i]=n,!0},setProjectProp:(e,n,i)=>{const s=r(t,e);return t[s][n]=i,!0},setProjectProps:(e,n)=>{const i=r(t,e);return Object.keys(n).forEach((e=>{t[i][e]=n[e]})),!0},deleteProject:e=>{const n=r(t,e);return t.splice(n,1),e},addProject:e=>(t.push(e),e.id)}))(e),(t=>({getTodos:()=>{const e=[];return t.forEach((t=>t.todos.forEach((t=>e.push(t))))),e},getTodosProp:(e,n)=>{const i=[],s=r(t,e);return t[s].todos.forEach((t=>i.push(t[n]))),i},getTodoFromId:e=>t.forEach((t=>t.todos.forEach((t=>t.id===e))))}))(e),(t=>({getTodo:(e,n)=>{const i=r(t,e),s=t[i],o=r(s.todos,n);return t[i].todos[o]},getTodoProp:(e,n,i)=>{const s=r(t,e),o=t[s],a=r(o.todos,n);return t[s].todos[a][i]},setTodo:(e,n,i)=>{const s=r(t,e),o=t[s],a=r(o.todos,n);return t[s].todos[a]=i,!0},setTodoProp:(e,n,i,s)=>{const o=r(t,e),a=t[o],c=r(a.todos,n);return t[o].todos[c][i]=s,!0},setTodosProp:(e,n,i)=>{const s=r(t,e);return t[s].todos.forEach((t=>{t[n]=i})),!0},setTodoProps:(e,n,i)=>{const s=r(t,e),o=t[s],a=r(o.todos,n);return Object.keys(i).forEach((e=>{t[s].todos[a][e]=i[e]})),!0},addTodo:(e,n)=>{const i=r(t,e);return n.projectId=e,t[i].todos.push(n),n.id},deleteTodo:(e,n)=>{const i=r(t,e),s=t[i].todos.filter((t=>t.id!==n));return t[i].todos=s,!0}}))(e))}},468:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{a:()=>s});var r=n(395),i=t([r]);r=(i.then?await i:i)[0];const s=async(t,e)=>(await(0,r.ai)(t,e),r.q.deleteTodo(t,e),e)}))},259:(t,e,n)=>{n.d(e,{DY:()=>r,ML:()=>i,e1:()=>s,wf:()=>o});const r=(t,e,n=!0)=>{switch(n){case!0:t.sort(((t,n)=>t[e]-n[e]));break;case!1:t.sort(((t,n)=>n[e]-t[e]));break;default:console.log("sort: something went wrong.")}return t},i=async(t,e)=>{for(let n=0;n<t.length;n++)await e(t[n],n,t);return!0},s=(t,e,n=!1)=>{let r=0,i=t.length;for(;r<i;){const s=r+i>>>1;switch(n){case!0:t[s]<e?r=s+1:i=s;break;case!1:t[s]>e?r=s+1:i=s;break;default:console.log("sortedIndex: something went wrong.")}}return r},o=(t,e)=>Array.from(t).filter((t=>e.includes(t)))},513:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{dB:()=>d,VN:()=>f,oZ:()=>m,Xi:()=>p,em:()=>g,zl:()=>y,Hy:()=>v});var r=n(591),i=n(875),s=n(392),o=n(196),a=n(304),c=n(259),u=n(395),l=(n(547),t([u,o,a,i]));[u,o,a,i]=l.then?await l:l;const h=["todo","project"],d=(t,e,...n)=>(document.getElementById("home-items-list").innerHTML="",(t=(0,c.DY)(t,...n)).forEach((t=>{t.type=e,t=(0,i.oV)(t)})),!0),f=async(t,...e)=>{document.body.innerHTML="",(t=>{const e=document.createElement("div");e.id="home";const n=(t=>{const e=document.createElement("div");e.classList.add("home-controls"),t=h.filter((e=>e!==t))[0];const n=document.createElement("div");n.textContent=`${t}s`,n.id="home-controls-switch",n.type=t,e.appendChild(n);const r=document.createElement("div");return r.textContent="add",r.id="home-controls-add",e.appendChild(r),e})(t);e.appendChild(n);const r=(()=>{const t=document.createElement("div");t.id="home-items",t.classList.add("home-items");const e=document.createElement("div");return e.classList.add("home-items-list"),e.id="home-items-list",t.appendChild(e),t})();e.appendChild(r),document.body.appendChild(e)})(t);const n=document.getElementById("home");return n.type=t,[n.by,n.desc]=e,!0},m=()=>document.getElementById("home").type,p=t=>{const e=document.getElementById("home-items-list"),n=[];return Array.from(e.children).forEach((e=>n.push((0,i.fe)(e,t)))),n},g=t=>{const e=document.getElementById("home-items-list"),{by:n,desc:r}=(()=>{const t=document.getElementById("home");return{by:t.by,desc:t.desc}})(),s=(0,i.O_)(t,n),o=(0,i.k2)(t.type,n),a=(0,c.e1)(o,s,r),u=e.children[a];return t=(0,i.dS)(t),e.insertBefore(t,u),!0},y=(t,e)=>{const n=document.getElementById(t),i=n.classList[1];return["title","description","dueDate","priority"].forEach((t=>{n.querySelector(`[class*=${t}]`).textContent=e[t]})),e.dueDate=r.EK.fromDate(new Date(e.dueDate)),(0,a.kH)(e,n),"todo"===i&&(n.querySelector("[class*=project]").textContent=`project: ${e.project}`),!0},v=async t=>{const e=document.getElementById("home-controls-switch");let{type:n}=t.target,r=null;const i=document.getElementById("home-items"),a=i.querySelector("form");if(null!==a){const t=document.getElementById("home-controls-add"),e=a.classList[1].match(/(?<=-)\w+$/)[0];(0,o.s_)(t,e,!1),(0,s.Kj)(i,"form")}const{by:c,desc:l}=document.getElementById("home");switch(n){case"project":r=u.q.getProjects();break;case"todo":r=u.q.getTodos();break;default:console.log(`switchProjectsTodos: sorry, we are out of ${n}.`)}switch(d(r,n,c,l),(t=>{document.getElementById("home").type=t})(n),n){case"project":n="todo";break;case"todo":n="project";break;default:console.log(`switchProjectsTodos: sorry, we are out of ${n}.`)}return e.textContent=`${n}s`,e.type=n,!0}}))},875:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{Sm:()=>p,dS:()=>v,oV:()=>w,fE:()=>A,fe:()=>b,O_:()=>E,k2:()=>T,JL:()=>I,UK:()=>C,$y:()=>S,$F:()=>k});var r=n(591),i=n(598),s=n(513),o=n(509),a=n(392),c=n(257),u=n(897),l=n(259),h=n(395),d=n(125),f=n(304),m=(n(163),t([o,h,s,f,u,d,c]));[o,h,s,f,u,d,c]=m.then?await m:m;const p=t=>{const e=t.querySelector("[class~=item-title]");(0,a.jm)(e,"title-active",!1);const n=t.querySelector("[class~=item-content]");return n.style.display="none",(0,a.si)(n,"div[class$=content]"),!0},g=t=>(0,a.es)("button","item-title",t,null,null,{type:"click",callback:a.f});function y(t,e,n,r=null,s,l,h,f=null){const m=(0,a.re)("item-content");n=(0,a.re)(`${t}-description`,n),m.appendChild(n);const p=((t,e,n)=>{const r=(0,a.re)("item-details");e=(0,i.Z)(e.toDate(),"yyyy-MM-dd");const s=(0,a.es)("div",`${t}-dueDate`,e);return r.appendChild(s),n=(0,a.es)("div",`${t}-priority`,n),r.appendChild(n),r})(t,s,l);m.appendChild(p);const g=((t,e,n,r)=>{const i=(0,a.re)("item-controls"),s=(0,a.re)(`${t}-edit`,"edit",t,null,{type:"click",callback:c.F});i.appendChild(s);const o=(0,a.re)(`${t}-status`,n,null,null,{type:"click",callback:d.V});i.appendChild(o);const l=(0,a.re)(`${t}-delete`,"delete",t,e,{type:"click",callback:u.w});return l.projectId=r,i.appendChild(l),i})(t,e,h,f);return m.appendChild(g),"project"===t&&(r=(0,o.Td)(r,"project"),m.appendChild(r)),m}const v=t=>{const e=t.type.match(/(?<=-)\w+(?=-)/)[0],n=t.type.match(/(?<=-)\w+$/)[0],{id:r,title:i,description:s,todos:o,dueDate:c,priority:u,status:l,projectId:h,projectTitle:d}=t,m=(0,a.re)("item",null,null,r);m.classList.add(e),m.appendChild(g(i));const p=y(e,r,s,null!==o?t.todos:[],c,u,l,h);if(m.appendChild(p),(0,f.ci)(t)&&(0,f.j0)(m),"todo"===e&&"home"===n){const t=(0,a.re)("todo-project",`project: ${d}`);m.appendChild(t)}return m},w=t=>{const{id:e,projectId:n,type:r}=t,i=(0,a.re)("item",null,null,e);i.classList.add(r);const s=g(t.title);i.appendChild(s);const o=y(r,e,t.description,"project"===r?t.todos:[],t.dueDate,t.priority,t.status,n);switch(i.appendChild(o),(0,a.jm)(i,"done","done"===t.status),(0,f.ci)(t)&&(0,f.j0)(i),r){case"project":(0,f.Em)(t)&&(0,f.wm)(i);break;case"todo":{const e=(0,a.re)("todo-project",`project: ${t.projectTitle}`);i.appendChild(e);break}}switch(r){case"project":case"todo":return document.getElementById("home-items-list").appendChild(i),!0}return i},A=t=>{const{type:e}=t;switch(e){case"add-todo-home":(0,s.em)(t);break;case"add-project-home":t.todos=[],(0,s.em)(t);break;case"add-todo-project":(0,o.n3)(t);break;default:console.log(`addItemToItemsList: sorry, we are out of ${e}.`)}return!0},b=(t,e)=>{let n=t.querySelector(`div[class$=${e}`).textContent;return/date/i.test(e)&&(n=Math.round(new Date(n).getTime()/1e3)),n},E=(t,e)=>{let n=t[e];return/date/i.test(e)&&(n=n.seconds),n},T=(t,e)=>{switch(t){case"add-todo-home":case"add-project-home":return(0,s.Xi)(e);default:console.log(`getItemSortValues: sorry, we are out of ${t}.`)}return!1},I=t=>{const e=(0,l.wf)(t.classList,a.V5);if(e.length>1)throw new Error(`getTypeFromDOMItem: more than one item found: ${e.join(", ")}.`);return e[0]},C=t=>{let e={title:null,description:null,dueDate:null,priority:null,status:null};Object.keys(e).forEach((n=>{const r=t.querySelector(`[class*=${n}]`).textContent;e[n]=r}));const n=I(t);switch(n){case"todo":case"project-todo":{const n=h.q.getProjectPropsFromTodoId(t.id,"projectId","projectTitle");e={...e,...n};break}case"project":e.todos=(0,o.yn)(t);break;default:console.log(`getPropsFromDOMItem: sorry, we are out of ${n}.`)}return null!==e.dueDate&&(e.dueDate=r.EK.fromDate(new Date(e.dueDate))),e.id=t.id,e},S=(t,e,n,r)=>(r?t.removeEventListener(e,n):t.addEventListener(e,n),!0),k=(t,e,n,r)=>{t.forEach((t=>S(t,e,n,r)))}}))},509:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{Td:()=>u,n3:()=>l,qm:()=>h,yn:()=>d});var r=n(591),i=n(875),s=n(392),o=n(304),a=n(860),c=(n(25),t([i,o,a]));[i,o,a]=c.then?await c:c;const u=(t,e)=>{const n=(0,s.re)("project-todos");if("project"===e){const t=(()=>{const t=(0,s.re)("project-todos-header"),e=(0,s.re)("project-todos-header-text","In the pipe:");t.appendChild(e);const n=(0,s.re)("project-todos-header-button","add","todo","project-add-todo",{type:"click",callback:a.w});return t.appendChild(n),t})();n.appendChild(t)}const r=(t=>{const e=(0,s.re)("project-todos-list");return t.forEach((t=>{t.type="project-todo",t=(0,i.oV)(t),e.appendChild(t)})),e})(t);return n.appendChild(r),n},l=t=>{const e=document.getElementById(t.projectId).querySelector("div[class$=list]"),n=e.querySelector(".project-todo");return(t=(0,i.dS)(t)).classList.remove("todo"),t.classList.add("project-todo"),e.insertBefore(t,n),!0},h=(t,e)=>{const n=document.getElementById(t);return["title","description","dueDate","priority"].forEach((t=>{n.querySelector(`[class*=${t}]`).textContent=e[t]})),e.dueDate=r.EK.fromDate(new Date(e.dueDate)),(0,o.kH)(e,n),(0,o.bc)(t,e.dueDate),!0},d=t=>{const e=[];return Array.from(t.querySelectorAll(".project-todo")).forEach((t=>e.push((0,i.UK)(t)))),e}}))},860:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{w:()=>h});var r=n(395),i=n(196),s=n(392),o=n(897),a=n(6),c=n(513),u=t([i,o,a,c,r]);[i,o,a,c,r]=u.then?await u:u;const l=t=>{const e=(()=>{const t=document.createElement("form"),e=(0,i.NF)("add","title","title","title");t.appendChild(e);const n=(0,i.NF)("add","description","description","description");t.appendChild(n);const r=(0,i.qN)("date","date");t.appendChild(r);const s=(0,i.ty)("priority","priority","priority: ",i.WS,i.WS[1]);t.appendChild(s);const o=(0,i.Lm)("add","add","add");return t.appendChild(o),t})();return e.name="add-item",e.classList.add("form-add"),e.classList.add(`form-add-${t}`),e.addEventListener("submit",d),e},h=t=>{let{type:e}=t.target;const n=t.target.id.match(/^\w+/)[0];switch(n){case"home":{e=(0,c.oZ)();const t=(t=>{const e=l("project");if("todo"===t){let t=r.q.getProjectsProp("title");t=(0,i.ty)("project","project","project: ",t),e.prepend(t)}return e.type=`add-${t}-home`,e})(e);(t=>{const e=document.getElementById("home-items"),n=document.getElementById("home-controls-add");(0,i.s_)(n,"home",!0),e.prepend(t),(0,s.si)(t,"div[class$=content]")})(t);break}case"project":((t,e)=>{const n=e.target.parentElement.closest("div[class$=header]").nextSibling,r=e.target;(0,i.s_)(r,"project",!0),n.prepend(t),(0,s.si)(t,"div[class$=content]")})((()=>{const t=l("todo");return t.type="add-todo-project",t})(),t);break;default:console.log(`showAddItem: sorry, we are out of ${n}.`)}return!0},d=async t=>{t.preventDefault();const{type:e}=t.target;let n=(0,i.zz)(t),r=null;if(!(0,a.G)(e,t))return!1;const s=e.match(/(?<=-)\w+$/)[0];/todo/.test(e)&&(n=(0,i.o3)(t,s,n),r=n.projectId);const c=await(0,o.j)(e,n,r);switch(s){case"home":(0,i.x4)();break;case"project":(0,i.Ai)(t);break;default:console.log(`processAddItem: sorry, we are out of ${s}.`)}return c}}))},257:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{F:()=>f});var r=n(591),i=n(598),s=n(395),o=n(196),a=n(392),c=n(513),u=n(509),l=n(6),h=t([o,u,c,s,l]);[o,u,c,s,l]=h.then?await h:h;const d=(t,e,n)=>{const r=document.createElement("form");t=(0,o.NF)("edit","title","title",t),r.appendChild(t),e=(0,o.NF)("edit","description","description",e),r.appendChild(e),n=(0,o.ty)("priority","priority","priority: ",o.WS,n),r.appendChild(n);const i=(0,o.Lm)("edit","save","save");return r.appendChild(i),r},f=t=>{const{type:e}=t.target,{id:n}=t.target.parentElement.closest(`div[class*=${e}]`),r=(t=>{let e="home",n=document.getElementById(t).classList[1];/-/.test(n)&&(e=n.match(/^\w+(?=-)/)[0],n=n.match(/(?<=-)\w+$/)[0]);let r=null;switch(n){case"project":r=(t=>{const e=s.q.getProjectProp(t,"title"),n=s.q.getProjectProp(t,"description"),r=s.q.getProjectProp(t,"priority"),c=d(e,n,r);let u=s.q.getProjectProp(t,"dueDate");u=(0,o.qN)("date","date",(0,i.Z)(1e3*u.seconds,"yyyy-MM-dd"));const l=c.querySelector("input[id=description]");return(0,a.BE)(u,l),c.type="project",c.itemId=t,c})(t);break;case"todo":r=(t=>{const e=s.q.getProjectPropFromTodoId(t,"id"),n=s.q.getTodoProp(e,t,"title"),r=s.q.getTodoProp(e,t,"description"),c=s.q.getTodoProp(e,t,"priority"),u=d(n,r,c);let l=s.q.getProjectsProp("title");l=(0,o.ty)("project","project","project: ",l,s.q.getProjectPropFromTodoId(t,"title")),u.prepend(l);let h=s.q.getTodoProp(e,t,"dueDate");h=(0,o.qN)("date","date",(0,i.Z)(1e3*h.seconds,"yyyy-MM-dd"));const f=u.querySelector("input[id=description]");return(0,a.BE)(h,f),u.type="todo",u.itemId=t,u})(t);break;default:console.log(`makeEditItemForm: sorry, we are out of ${n}.`)}return Object.entries({name:"edit-item",location:e,itemId:t}).forEach((t=>{r.setAttribute(t[0],t[1])})),["form-edit",`form-edit-${e}`].forEach((t=>r.classList.add(t))),r.addEventListener("submit",m),r})(n),c=r.getAttribute("location");switch(c){case"home":(t=>{const e=document.getElementById("home-items"),n=document.getElementById("home-controls-add");(0,o.s_)(n,"home",!0),(0,a.Kj)(e,"form"),e.prepend(t),(0,a.si)(t,"div[class$=content]")})(r);break;case"project":(t=>{const e=document.getElementById(s.q.getProjectPropFromTodoId(t.itemId,"id")),n=e.querySelector(".project-todos-list"),r=e.querySelector("#project-add-todo");(0,o.s_)(r,"project",!0),(0,a.Kj)(n,"form"),n.prepend(t),(0,a.si)(t,"div[class$=content]")})(r);break;default:console.log(`showEditItem: sorry, we are out of ${c}.`)}return!0},m=async t=>{t.preventDefault();const{type:e}=t.target,n=t.target.getAttribute("itemId");switch(e){case"project":await(async(t,e)=>{const n=(0,o.sW)("project",t);return await(async(t,e)=>{const n=(0,o.sW)("project",t);return n.dueDate=new Date(n.dueDate),await(0,s.CB)(e,n),n.dueDate=r.EK.fromDate(n.dueDate),s.q.setProjectProps(e,n),e})(t,e),(0,c.zl)(e,n),(0,o.x4)(t),!0})(t,n);break;case"todo":(async(t,e)=>{const n=(0,o.sW)("todo",t),i=t.target.classList[1].match(/(?<=-)\w+$/)[0];switch(await(async(t,e)=>{let{project:n,...i}=(0,o.sW)("todo",t);const a=s.q.getProjectIdFromProp("title",n),c=s.q.getProjectPropFromTodoId(e,"id");if(a!==c){if(!(0,l.H)(a,t))return!1;i={status:s.q.getTodoProp(c,e,"status"),...i},i.dueDate=new Date(i.dueDate),await(0,s.M$)(a,e,i),i={projectTitle:n,...i},i.dueDate=r.EK.fromDate(i.dueDate),s.q.addTodo(a,i),await(0,s.ai)(c,e),s.q.deleteTodo(c,e)}else i.dueDate=new Date(i.dueDate),await(0,s.yW)(a,e,i),i.dueDate=r.EK.fromDate(i.dueDate),s.q.setTodoProps(a,e,i);return e})(t,e),i){case"home":(0,c.zl)(e,n),(0,o.x4)();break;case"project":(0,u.qm)(e,n),(0,o.Ai)(t);break;default:console.log(`editTodo: sorry, we are out of ${i}.`)}})(t,n);break;default:console.log(`processAddItem: sorry, we are out of ${e}.`)}return!0}}))},196:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{WS:()=>l,sW:()=>h,NF:()=>d,ty:()=>f,qN:()=>m,Lm:()=>p,zz:()=>g,o3:()=>y,x4:()=>v,Ai:()=>w,s_:()=>A});var r=n(591),i=n(598),s=n(562),o=n(395),a=n(860),c=n(392),u=(n(57),t([a,o]));[a,o]=u.then?await u:u;const l=["high","moderate","low"],h=(t,e)=>{const n={};return"todo"===t&&(n.project=e.target.project.value),n.id=e.target.itemId,n.title=e.target.title.value,n.description=e.target.description.value,n.dueDate=e.target.date.value,n.priority=e.target.priority.value,n},d=(t,e,n,r)=>{const i=document.createElement("input");switch(i.type="text",i.id=e,i.name=n,t){case"add":i.placeholder=r;break;case"edit":i.value=r;break;default:console.log(`makeFormInputText: sorry, we are out of ${t}.`)}return i},f=(t,e,n,r,i=null)=>{const s=document.createElement("span"),o=document.createElement("label");o.textContent=n,o.for=e,s.appendChild(o);const a=document.createElement("select");return a.id=t,a.name=e,r.forEach((t=>{const e=document.createElement("option");e.value=t,t===i&&(e.selected=!0),e.textContent=t,a.appendChild(e)})),s.appendChild(a),s},m=(t,e,n=(0,i.Z)(new Date,"yyyy-MM-dd"),r=new Date,o=(0,s.Z)(new Date,1))=>{const a=document.createElement("input");return a.type="date",a.id=t,a.name=e,a.value=n,a.min=r,a.max=o,a},p=(t,e,n)=>{const r=document.createElement("div");r.id=`submit-${t}-form`;const i=document.createElement("input");return i.type="submit",i.id=e,i.value=n,r.appendChild(i),r},g=t=>({title:t.target.title.value,description:t.target.description.value,dueDate:r.EK.fromDate(new Date(t.target.date.value)),priority:t.target.priority.value,status:"open"}),y=(t,e,n)=>{let r=null;switch(e){case"home":{const e=t.target.project.value;n={projectTitle:e,...n},r=o.q.getProjectIdByProp("title",e);break}case"project":r=t.target.parentElement.closest("div[class~=project]").id;break;default:console.log(`addProjectIdToTodoItem: sorry, we are out of ${e}.`)}return{projectId:r,...n}},v=()=>{const t=document.getElementById("home-items"),e=document.getElementById("home-controls-add");return A(e,"home",!1),(0,c.Kj)(t,"form"),!0},w=t=>{const e=t.target.closest("[class~='project']").querySelector("[class*=project-todos-list]"),n=e.parentElement.querySelector(".project-todos-header-button");return A(n,"project",!1),(0,c.Kj)(e,"form"),!0},A=(t,e,n=!0)=>{switch(t.textContent=n?"cancel":"add",e){case"home":t.removeEventListener("click",n?a.w:v),t.addEventListener("click",n?v:a.w);break;case"project":t.removeEventListener("click",n?a.w:w),t.addEventListener("click",n?w:a.w);break;default:console.log(`switchItemControl: sorry, we are out of ${e}.`)}return!0}}))},304:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{eG:()=>s,ci:()=>a,Em:()=>c,j0:()=>u,wm:()=>l,kH:()=>d,Uj:()=>f,bc:()=>m});var r=n(875),i=t([r]);r=(i.then?await i:i)[0];const s=["overdue","hasOverdue"],o=t=>(t=t.setHours(0,0,0,0))<(new Date).setHours(0,0,0,0),a=t=>{const e=new Date(1e3*t.dueDate.seconds);return o(e)},c=t=>{const e=(new Date).setHours(0,0,0,0);return t.todos.map((t=>new Date(1e3*t.dueDate.seconds).setHours(0,0,0,0)<e)).includes(!0)},u=t=>t.classList.add("overdue"),l=t=>t.classList.add("hasOverdue"),h=t=>t.classList.remove("hasOverdue"),d=(t,e)=>{const n=a(t);switch(n){case!0:u(e);break;case!1:e.classList.remove("overdue");break;default:console.log(`sortItemOverdueStatus: sorry, we are out of ${n}.`)}return!0},f=(t,e)=>{const n=c(t);switch(n){case!0:l(e);break;case!1:h(e);break;default:console.log(`sortItemOverdueStatus: sorry, we are out of ${n}.`)}const i=Array.from(e.querySelectorAll("[class~=project-todo]"));return i.length>0&&(t=>{t.forEach((t=>{const e=(0,r.UK)(t);d(e,t)}))})(i),!0},m=(t,e)=>{const n=document.getElementById(t).parentElement.closest("[class~=project]"),r=o(new Date(1e3*e.seconds));switch(r){case!0:l(n);break;case!1:h(n);break;default:console.log(`sortProjectOverdueStatus: sorry, we are out of ${r}.`)}return!0}}))},125:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{V:()=>y});var r=n(304),i=n(392),s=n(875),o=n(860),a=n(257),c=n(196),u=n(897),l=n(395),h=t([s,r,c,l,a,o,u]);[s,r,c,l,a,o,u]=h.then?await h:h;const d=(t,e,n)=>{const r=t.querySelectorAll('[id*="add"]');(0,s.$F)(r,"click",o.w,n);const c=t.querySelectorAll('[class*="edit"]');return(0,s.$F)(c,"click",a.F,n),"project"===e&&((t,e)=>{t.forEach((t=>{const n=t.querySelector("[class~=item-title]");(0,s.$y)(n,"click",i.f,e);const r=t.querySelector("[class*=status]");(0,s.$y)(r,"click",y,e);const o=t.querySelector("[class*=delete]");(0,s.$y)(o,"click",u.w,e)}))})(t.querySelectorAll('[class^="item project-todo"]'),n),!0},f=async(t,e,n)=>{switch(e){case"project":await(0,l.mk)(t,n),await(0,l.s3)(t,n);break;case"todo":case"project-todo":{const e=l.q.getProjectPropFromTodoId(t,"id");await(0,l.P2)(e,t,n);break}default:console.log(`toggleStatusInFiresotre: sorry, we are out of ${e}.`)}return!0},m=async(t,e,n)=>{switch(e){case"project":l.q.setProjectProp(t,"status",n),l.q.setTodosProp(t,"status",n);break;case"todo":case"project-todo":{const e=l.q.getProjectPropFromTodoId(t,"id");l.q.setTodoProp(e,t,"status",n);break}default:console.log(`toggleStatusInProjects: sorry, we are out of ${e}.`)}return!0},p=async t=>{const e=t.target.parentElement.closest("[class~=item]"),n=(0,s.JL)(e);return((t,e,n)=>{const o=e.querySelectorAll("[class~=item]");switch(t.target.textContent="done",(0,c.x4)(),n){case"project":case"project-todo":o.forEach((t=>p({target:t.querySelector("[class$=status]")}))),(0,c.Ai)(t);break;default:console.log(`toggleDoneOnDOM: sorry, we are out of ${n}.`)}r.eG.forEach((t=>{(0,i.jm)(e,t,!1),(0,i.r7)(o,t,!1)})),e.classList.add("done"),d(e,n,!0),(0,s.Sm)(e)})(t,e,n),m(e.id,n,"done"),await f(e.id,n,{status:"done"}),!0},g=async t=>{const e=t.target.parentElement.closest("[class~=item]"),n=(0,s.JL)(e);return((t,e,n)=>{const i=(0,s.UK)(e);t.target.textContent="open",(0,c.x4)(),"project"!==n&&"project-todo"!==n||(0,c.Ai)(t),(0,r.kH)(i,e),"project"===n&&((0,r.Uj)(i,e),e.querySelectorAll("[class~=item]").forEach((t=>g({target:t.querySelector("[class$=status]")})))),e.classList.remove("done"),d(e,n,!1)})(t,e,n),m(e.id,n,"open"),await f(e.id,n,{status:"open"}),!0},y=t=>{const e=t.target.textContent;switch(e){case"open":p(t);break;case"done":g(t);break;default:console.log(`toggleStatus: sorry, we are out of ${e}.`)}return!0}}))},392:(t,e,n)=>{n.d(e,{V5:()=>r,es:()=>i,re:()=>s,si:()=>o,f:()=>a,BE:()=>c,Kj:()=>u,jm:()=>l,r7:()=>h});const r=["todo","project","project-todo"],i=(t,e=null,n=null,r=null,i=null,s={type:null,callback:null})=>{const o=document.createElement(t);return o.classList.add(e),null!==n&&(o.innerHTML=n),null!==r&&(o.type=r),null!==i&&(o.id=i),o.addEventListener(s.type,s.callback),o},s=(t,e,n,r,s)=>i("div",t,e,n,r,s),o=(t,e)=>{const n=t.parentElement.closest(e);return t.style.maxHeight>0?t.style.maxHeight=null:(t.style.maxHeight=`${t.scrollHeight}px`,n&&(n.style.maxHeight=`${n.scrollHeight+t.scrollHeight}px`)),t},a=t=>{t.target.classList.toggle("title-active");const e=t.target.nextElementSibling;var n;return(n=e).style.display="block"===n.style.display?"none":"block",o(e,"div[class$=content]"),!0},c=(t,e)=>{e.parentNode.insertBefore(t,e.nextSibling)},u=(t,e)=>(t.querySelectorAll(`:scope > ${e}`).forEach((t=>t.remove())),!0),l=(t,e,n)=>(n?t.classList.add(e):t.classList.remove(e),t),h=(t,e,n)=>(t.forEach((t=>l(t,e,n))),t)}},o={};function a(t){var e=o[t];if(void 0!==e)return e.exports;var n=o[t]={id:t,exports:{}};return s[t](n,n.exports,a),n.exports}t="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n=t=>{t&&(t.forEach((t=>t.r--)),t.forEach((t=>t.r--?t.r++:t())))},r=t=>!--t.r&&t(),i=(t,e)=>t?t.push(e):r(e),a.a=(s,o,a)=>{var c,u,l,h=a&&[],d=s.exports,f=!0,m=!1,p=(e,n,r)=>{m||(m=!0,n.r+=e.length,e.map(((e,i)=>e[t](n,r))),m=!1)},g=new Promise(((t,e)=>{l=e,u=()=>(t(d),n(h),h=0)}));g[e]=d,g[t]=(t,e)=>{if(f)return r(t);c&&p(c,t,e),i(h,t),g.catch(e)},s.exports=g,o((s=>{if(!s)return u();var o,a;c=(s=>s.map((s=>{if(null!==s&&"object"==typeof s){if(s[t])return s;if(s.then){var o=[];s.then((t=>{a[e]=t,n(o),o=0}));var a={};return a[t]=(t,e)=>(i(o,t),s.catch(e)),a}}var c={};return c[t]=t=>r(t),c[e]=s,c})))(s);var l=new Promise(((t,n)=>{(o=()=>t(a=c.map((t=>t[e])))).r=0,p(c,o,n)}));return o.r?l:a})).then(u,l),f=!1},a.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return a.d(e,{a:e}),e},a.d=(t,e)=>{for(var n in e)a.o(e,n)&&!a.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),a(138)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,